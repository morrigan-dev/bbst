<?php

/**
 * Diese Klasse ermöglicht die Verbindung zur MySQL Datenbank. Es kann immer nur eine Verbindung zu einer Datenbank
 * hergestellt werden. Außerdem werden hier alle benötigten Abfragen zusammengebaut, um auf Tabellen und Spalten,
 * zugreifen zu können. Ebenso kann in dieser Klasse die Sortierung nach einzelnen Spalten angegeben werden.
 *
 * @since 14.09.2011
 * @author Thomas Gattinger
 */
class DBConnection {

	/** Ein Host Adresse auf der die MySQL Datenbank liegt */
	private $host;

	/** Ein Benutzername, mit dem Zugriff auf die MySQL Datenbank möglich ist */
	private $username;

	/** Ein zu dem Benutzername gültiges Passwot fü den Zugriff auf die MySQL Datenbank */
	private $passwort;

	/** Eine Datenbank zu der verbunden werden soll */
	private $database;

	/** Link auf die aktuell geöffnete Datenbankverbindung */
	private $dbLink;

	/** Gibt an, ob eine Verbindung zu einer MySQL Datenbank besteht */
	private $connected;

	/**
	 * Dieser Konstruktor erzeugt eine neue Instanz dieser Klasse und setzt die übergebenen Wert.
	 *
	 * @param $host Eine Host Adresse auf der die MySQL Datenbank liegt.
	 * @param $username Ein Benutzername, mit dem Zugriff auf die MySQL Datenbank möglich ist.
	 * @param $passwort Ein zu dem Benutzername gültiges Passwot fü den Zugriff auf die MySQL Datenbank.
	 * @param $database Eine Datenbank zu der verbunden werden soll.
	 */
	public function __construct($host, $username, $passwort, $database) {
		$this->host = $host;
		$this->username = $username;
		$this->passwort = $passwort;
		$this->database = $database;
		$this->dbLink = null;
		$this->connected = false;
		$this->connect();
	}

	/**
	 * Dieser Destruktor beendet eine noch offene Datenbankverbindung und gibt alle angeforderten Resourcen wieder frei.
	 */
	public function __destruct() {
		$this->disconnect();
		unset($this->host);
		unset($this->username);
		unset($this->passwort);
		unset($this->database);
		unset($this->dbLink);
		unset($this->connected);
	}

	/**
	 * Diese Methode versucht eine Verbindung zu einer MySQL Datenbank herzustellen. Es werden die Verbindungsdaten,
	 * die im Konstruktor angegeben wurden verwendet. Bestand bereits eine Verbindung zu einer Datenbank, so wird diese
	 * Verbindung beendet und eine neue Verbindung aufgebaut.
	 *
	 * @return liefert true, falls eine Verbindung zum Host und zur Datenbank hergestellt werden konnte. Ansonsten wird
	 *         false zurückgegeben.
	 */
	public function connect() {
		if($this->connected) {
			$this->disconnect();
		}
		if($this->dbLink = mysql_connect ($this->host, $this->username, $this->passwort)) {
			if(mysql_select_db($this->database)) {
				$this->connected = true;
			}
		}
		return $this->connected;
	}

	/**
	 * Diese Methode beendet eine bestehende Datenbankverbindung.
	 *
	 * @return liefert true, falls eine bestehende Datenbankverbindung nun erfolgreich geschlossen wurde oder gar keine
	 *         Verbdinung offen war. Konnte eine bestehende Verbindung nicht geschlossen werden, so wird false
	 *         zurückgegeben.
	 */
	public function disconnect() {
		if(isset($this->dbLink)) {
			return mysql_close($this->dbLink);
		}
		return true;
	}

	/**
	 * Diese Methode fügt einen neuen Datensatz in die angebene Tabelle ein. Dabei können beliebig viele Spalten
	 * und deren Werte mittels eines assiziativen Arrays übergeben werden.
	 *
	 * @param $table Die Tabelle, in die ein neuer Datensazu eingefügt werden soll.
	 * @param $columnsAndValue Ein assoziatives Array bei dem die keys die Spaltennamen und die values die Werte
	 *                         des Datensatzes sind.
	 */
	public function insert($table, $columnsAndValue) {
		if($this->connected) {
			$size = count($columnsAndValue);
			$index = 0;
			$columns = "";
			$values = "";
			foreach ($columnsAndValue as $column => $value) {
				$columns .= $column;
				$values .= "'" . $value . "'";
				$index++;
				if($index < $size) {
					$columns .= ",";
					$values .= ",";
				}
			}
			$query = "INSERT INTO " . $table . " (" . $columns . ") VALUES (" . $values . ");";
			echo $query . "<br>";
			return mysql_query($query, $this->dbLink);
		}
		return false;
	}

	/**
	 * Diese Methode gibt an, ob eine Verbindung zu einer Datenbank besteht.
	 *
	 * @return liefert true, falls eine Verbindung zum Host und der Datenbank erfolgreich war und somit Zugriff auf die
	 *         Daten besteht. Besteht keine Verbindung zum Host oder zur Datenbank so wird false zurückgegeben.
	 */
	public function isConnected() {
		return $this->connected;
	}

	/**
	 * Diese Methode liefert den aktuellen Datenbank-Link, sofern eine Verbindung zum Host und einer Datenbank besteht.
	 *
	 * @return liefert den aktuellen Datenbank-Link oder null, falls keine Verbinsung besteht.
	 */
	public function getDBLink() {
		if($this->connected) {
			return $this->dbLink;
		}
		return null;
	}

	/**
	 * Diese Methode fragt per Datensätze aus der angegebenen Tabelle ab. Über das $columnArray array können die Spalten
	 * angegeben werden, die bei der Abfrage berücksichtigt werden sollen.
	 *
	 * @param $table Die Tabelle aus der Datensätze abgefragt werden sollen.
	 * @param $columnArray Die Spalten, die bei der Abfrage herauskommen sollen.
	 */
	public function select($table, $columnArray) {
		if($this->connected) {
			$size = count($columnArray);
			$columns = $columnArray[0];
			for ($i = 1; $i < $size; $i++) {
				$columns .= "," . $columnArray[$i];
			}
			$query = "SELECT " . $columns . " FROM " . $table . ";";
			return mysql_query($query, $this->dbLink);
		}
	}
}

/**
 * Diese Klasse beinhaltet alle benötigten Abfragen für das Kneipentest Projekt.
 *
 * @author Thomas Gattinger
 * @since 15.09.2011
 */
class KneipenTestQueries {

	/** Objekt, dass eine Datenbankverbindung verwaltet */
	private $dbconnection;

	/**
	 * Dieser Konstruktor erzeugt eine neue Instanz dieser Klasse und setzt das übergebene Datenbankverwaltungsobjekt.
	 *
	 * @param Objekt, dass eine Datenbankverbindung verwaltet.
	 */
	function __construct($dbconnection) {
		$this->dbconnection = $dbconnection;
	}

	/**
	 * Dieser Destruktor gibt alle Resourcen dieser Klasse wieder frei.
	 */
	function __destruct() {
		unset($this->dbconnection);
	}

	/**
	 * Diese Methode ruft alle Kneipenarten aus der Datenbank ab.
	 *
	 * @return liefert alle Kneipenarten bzw. false falls ein Fehler auftritt.
	 */
	public function selectKneipenArten() {
		$dbLink = $this->dbconnection->getDBLink();
		$query = "SELECT id, bezeichnung FROM kt_kneipen_arten;";
		return mysql_query($query, $dbLink);
	}
	
	/**
	 * Diese Methode ruft alle Noten aus der Datenbank ab.
	 * 
	 * @return liefert alle Noten bzw. false falls ein Fehler auftritt.
	 */
	public function selectNoten() {
		$dbLink = $this->dbconnection->getDBLink();
		$query = "SELECT id, note FROM kt_noten;";
		return mysql_query($query, $dbLink);
	}

	/**
	 * Diese Methode ruft alle Kneipen aus der Datenbank ab.
	 *
	 * @param $order_column Gibt Spalte, die sortiert werden soll an.
	 * @param $order Gibt die Sortierrichtung an.
	 * @param $suchbegriff Ein Suchbegriff nach dem die Kneipen gefiltert werden. Der Suchbegriff wird in den Spalten
	 * 					   Name und Kommentar benutzt. Ist der Suchbegrif in einer der beiden Spalten enthalten, so
	 * 					   wird der entsprechende Datensatz ausgegeben.
	 * @return liefert alle Kneipen bzw. false falls ein Fehler auftritt.
	 */
	public function selectKneipen($order_column, $order, $suchbegriff) {
		$dbLink = $this->dbconnection->getDBLink();
		$query = "SELECT name, bezeichnung, note, kommentar
					FROM kt_kneipen
	    			LEFT JOIN kt_kneipen_arten ON kt_kneipen.kneipen_arten_id = kt_kneipen_arten.id
	    			LEFT JOIN kt_noten ON kt_kneipen.noten_id = kt_noten.id";
		
		if(isset($suchbegriff) && !empty($suchbegriff)) {
			$query .= " WHERE name LIKE '%" . $suchbegriff . "%' OR kommentar LIKE '%" . $suchbegriff . "%'";
		}
		
		if(isset($order_column) && !empty($order_column)) {
			$query .= " ORDER BY " . $order_column;
		}
		if(isset($order) && !empty($order)) {
			$query .= " " . $order;
		}
		return mysql_query($query, $dbLink);
	}
}
?>