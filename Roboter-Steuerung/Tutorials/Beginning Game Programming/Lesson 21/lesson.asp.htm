<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">



<title>NeHe Productions: OpenGL Lesson #21</title>
<meta name="author" content="Jeff Molofee">
<meta name="description" content="OpenGL Tutorials, Demos, Games and More...">
<meta name="keywords" content="opengl, tutorial, article, demo, game, blend, texturemap, lighting, contest, 3D">
<link rel="stylesheet" type="text/css" href="lesson.asp-Dateien/rgb.css">
</head><body bgcolor="black" link="#aaccff" text="white" vlink="#aaccff">

<table border="0" width="100%"><tbody><tr><td align="center">
<!-- Begin -  Site: GameDev.net Zone: NeHe 728x90 -->
<script language="javascript" type="text/javascript">
<!--
var browName = navigator.appName;
var SiteID = 1;
var ZoneID = 4;
var browDateTime = (new Date()).getTime();
if (browName=='Netscape')
{
document.write('<s'+'cript lang' + 'uage="jav' + 'ascript" src="http://www.gamedev.net/banman/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;Browser=NETSCAPE4&amp;PageID=61252&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '">'); document.write('</'+'scr'+'ipt>');
}
if (browName!='Netscape')
{
document.write('<s'+'cript lang' + 'uage="jav' + 'ascript" src="http://www.gamedev.net/banman/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;PageID=61252&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '">'); document.write('</'+'scr'+'ipt>');
}
// --> 
</script><script language="javascript" src="lesson.asp-Dateien/a.js"></script><script language="JavaScript">
var ShockMode = 0;
if (navigator.mimeTypes && navigator.mimeTypes["application/x-shockwave-flash"] && navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin) {
if (navigator.plugins && navigator.plugins["Shockwave Flash"])
ShockMode = 1;
}
else if (navigator.userAgent && navigator.userAgent.indexOf("MSIE")>=0 
&& (navigator.userAgent.indexOf("Windows 9")>=0 || navigator.userAgent.indexOf("Windows NT")>=0)) {
document.write('<SCRIPT LANGUAGE=VBScript\> \n');
document.write('on error resume next \n');
document.write('ShockMode = (IsObject(CreateObject("ShockwaveFlash.ShockwaveFlash.4"))) ');
document.write('<\/SCRIPT\> ');
}
if ( ShockMode ) {
document.write('<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"');
document.write(' codebase="http://active.macromedia.com/flash2/cabs/swflash.cab#version=4,0,0,0"');
document.write(' ID=banner WIDTH="728" HEIGHT="90" >');
document.write(' <PARAM NAME=movie VALUE="http://members.gamedev.net/dave/ads/Intel/728x90GameDev_dirt2_Traffic-Driver.swf?url=http%3a%2f%2fwww.gamedev.net%2fbanman%2fa.aspx%3fTask%3dClick%26ZoneID%3d4%26CampaignID%3d715%26AdvertiserID%3d119%26BannerID%3d771%26SiteID%3d1%26RandomNumber%3d1556403268%26Keywords%3d"> ');
document.write(' <param name="wmode" value="transparent"> ');
document.write(' <PARAM NAME=quality VALUE=autohigh> ');
document.write('<EMBED SRC="http://members.gamedev.net/dave/ads/Intel/728x90GameDev_dirt2_Traffic-Driver.swf?url=http%3a%2f%2fwww.gamedev.net%2fbanman%2fa.aspx%3fTask%3dClick%26ZoneID%3d4%26CampaignID%3d715%26AdvertiserID%3d119%26BannerID%3d771%26SiteID%3d1%26RandomNumber%3d1556403268%26Keywords%3d"');
document.write(' swLiveConnect=FALSE WIDTH="728" HEIGHT="90"');
document.write(' QUALITY=autohigh wmode="transparent"');
document.write(' TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash">');
document.write('</EMBED>');
document.write('</OBJECT>');
} else if (!(navigator.appName && navigator.appName.indexOf("Netscape")>=0 && navigator.appVersion.indexOf("2.")>=0)){
document.write('<A HREF="http://www.gamedev.net/banman/a.aspx?Task=Click&ZoneID=4&CampaignID=715&AdvertiserID=119&BannerID=771&SiteID=1&RandomNumber=1556403268&Keywords=" TARGET="_top"><IMG SRC="http://members.gamedev.net/dave/ads/Intel/728x90GameDev_dirt2_Traffic-Driver_Backup.gif" WIDTH="728" HEIGHT="90" BORDER="0"></A>');
}
</script><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://active.macromedia.com/flash2/cabs/swflash.cab#version=4,0,0,0" id="banner" height="90" width="728"> <param name="movie" value="http://members.gamedev.net/dave/ads/Intel/728x90GameDev_dirt2_Traffic-Driver.swf?url=http%3a%2f%2fwww.gamedev.net%2fbanman%2fa.aspx%3fTask%3dClick%26ZoneID%3d4%26CampaignID%3d715%26AdvertiserID%3d119%26BannerID%3d771%26SiteID%3d1%26RandomNumber%3d1556403268%26Keywords%3d">  <param name="wmode" value="transparent">  <param name="quality" value="autohigh"> <embed src="lesson.asp-Dateien/728x90GameDev_dirt2_Traffic-Driver.swf" swliveconnect="FALSE" quality="autohigh" wmode="transparent" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" height="90" width="728"><a class="prnedhmidpgwpzjxwowq" href="http://members.gamedev.net/dave/ads/Intel/728x90GameDev_dirt2_Traffic-Driver.swf?url=http%3a%2f%2fwww.gamedev.net%2fbanman%2fa.aspx%3fTask%3dClick%26ZoneID%3d4%26CampaignID%3d715%26AdvertiserID%3d119%26BannerID%3d771%26SiteID%3d1%26RandomNumber%3d1556403268%26Keywords%3d"></a><a class="prnedhmidpgwpzjxwowq" href="http://members.gamedev.net/dave/ads/Intel/728x90GameDev_dirt2_Traffic-Driver.swf?url=http%3a%2f%2fwww.gamedev.net%2fbanman%2fa.aspx%3fTask%3dClick%26ZoneID%3d4%26CampaignID%3d715%26AdvertiserID%3d119%26BannerID%3d771%26SiteID%3d1%26RandomNumber%3d1556403268%26Keywords%3d"></a></object>
<noembed>&lt;A
HREF="http://www.gamedev.net/banman/a.aspx?Task=Click&amp;ZoneID=4&amp;CampaignID=715&amp;AdvertiserID=119&amp;BannerID=771&amp;SiteID=1&amp;RandomNumber=1556403268&amp;Keywords="
TARGET="_top"&gt;&lt;IMG
SRC="http://members.gamedev.net/dave/ads/Intel/728x90GameDev_dirt2_Traffic-Driver_Backup.gif"
WIDTH="728" HEIGHT="90" BORDER="0"&gt;&lt;/A&gt;</noembed>
<noscript><A
HREF="http://www.gamedev.net/banman/a.aspx?Task=Click&ZoneID=4&CampaignID=715&AdvertiserID=119&BannerID=771&SiteID=1&RandomNumber=1556403268&Keywords="
TARGET="_top"><IMG
SRC="http://members.gamedev.net/dave/ads/Intel/728x90GameDev_dirt2_Traffic-Driver_Backup.gif"
WIDTH="728" HEIGHT="90" BORDER="0"></A></noscript>

<noscript> <a
href="http://www.gamedev.net/banman/a.aspx?ZoneID=4&amp;Task=Click&amp;Mode=HTML&amp;SiteID=1&amp;PageID=70554"
target="_blank"> <img
src="http://www.gamedev.net/banman/a.aspx?ZoneID=4&amp;Task=Get&amp;Mode=HTML&amp;SiteID=1&amp;PageID=70554"
width="728" height="90" border="0" alt=""></a>
</noscript>
<!-- End -  Site: GameDev.net Zone: NeHe 728x90 --></td></tr></tbody></table><br>

<table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tinylogo" height="130" width="326"><img src="lesson.asp-Dateien/blank.gif" alt="NeHe Productions" height="130" width="326"></td><td class="indexheading" align="center" valign="middle"><font class="text"><font class="theme" size="+3"><b><i>Lesson: 21</i></b></font></font></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">Welcome to my 21st OpenGL Tutorial!  Coming up with a topic for this tutorial was extremely difficult.  I know alot of
you are tired of learning the basics.  Everyone is dying to learn about 3D objects, Multitexturing and all that other
good stuff.  For those people, I'm sorry, but I want to keep the learning curve gradual.  Once I've gone a step ahead
it's not as easy to take a step back without people losing interest.  So I'd prefer to keep pushing forward at a steady
pace.
<br><br>
In case I've lost a few of you :) I'll tell you a bit about this tutorial.  Until now all of my tutorials have used
polygons, quads and triangles.  So I decided it would be nice to write a tutorial on lines.  A few hours after starting
the line tutorial, I decided to call it quits.  The tutorial was coming along fine, but it was BORING!  Lines are great,
but there's only so much you can do to make lines exciting.  I read through my email, browsed through the message board,
and wrote down a few of your tutorial requests.  Out of all the requests there were a few questions that came up more than
others.  So... I decided to write a multi-tutorial :)
<br><br>
In this tutorial you will learn about:  Lines, Anti-Aliasing, Orthographic Projection, Timing, Basic Sound Effects,
and Simple Game Logic.  Hopefully there's enough in this tutorial to keep everyone happy :)  I spent 2 days coding this
tutorial, and It's taken almost 2 weeks to write this HTML file.  I hope you enjoy my efforts!
<br><br>
At the end of this tutorial you will have made a simple 'amidar' type game.  Your mission is to fill in the grid without
being caught by the bad guys.  The game has levels, stages, lives, sound, and a secret item to help you progress through
the levels when things get tough.  Although this game will run fine on a Pentium 166 with a Voodoo 2, a faster processor
is recommended if you want smoother animation.
<br><br>
I used the code from lesson 1 as a starting point while writing this tutorial.  We start off by adding the required header
files.  stdio.h is used for file operations, and we include stdarg.h so that we can display variables on the screen,
such as the score and current stage.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre><font class="theme">// This Code Was Created By Jeff Molofee 2000</font>
<font class="theme">// If You've Found This Code Useful, Please Let Me Know.</font>

#include	&lt;windows.h&gt;							<font class="theme">// Header File For Windows</font>
#include	&lt;stdio.h&gt;							<font class="theme">// Standard Input / Output</font>
#include	&lt;stdarg.h&gt;							<font class="theme">// Header File For Variable Argument Routines</font>
#include	&lt;gl\gl.h&gt;							<font class="theme">// Header File For The OpenGL32 Library</font>
#include	&lt;gl\glu.h&gt;							<font class="theme">// Header File For The GLu32 Library</font>
#include	&lt;gl\glaux.h&gt;							<font class="theme">// Header File For The Glaux Library</font>

HDC		hDC=NULL;							<font class="theme">// Private GDI Device Context</font>
HGLRC		hRC=NULL;							<font class="theme">// Permanent Rendering Context</font>
HWND		hWnd=NULL;							<font class="theme">// Holds Our Window Handle</font>
HINSTANCE	hInstance;							<font class="theme">// Holds The Instance Of The Application</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we set up our boolean variables.  vline keeps track of the 121 vertical lines that make up our game grid.
11 lines across and 11 up and down.  hline keeps track of the 121 horizontal lines that make up the game grid.
We use ap to keep track of whether or not the 'A' key is being pressed.
<br><br>
filled is FALSE while the grid isn't filled and TRUE when it's been filled in. gameover is pretty obvious.
If gameover is TRUE, that's it, the game is over, otherwise you're still playing.  anti keeps track of
antialiasing.  If anti is TRUE, object antialiasing is ON.  Otherwise it's off.  active and fullscreen
keep track of whether or not the program has been minimized or not, and whether you're running in fullscreen mode or
windowed mode.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>bool		keys[256];							<font class="theme">// Array Used For The Keyboard Routine</font>
bool		vline[11][10];							<font class="theme">// Keeps Track Of Verticle Lines</font>
bool		hline[10][11];							<font class="theme">// Keeps Track Of Horizontal Lines</font>
bool		ap;								<font class="theme">// 'A' Key Pressed?</font>
bool		filled;								<font class="theme">// Done Filling In The Grid?</font>
bool		gameover;							<font class="theme">// Is The Game Over?</font>
bool		anti=TRUE;							<font class="theme">// Antialiasing?</font>
bool		active=TRUE;							<font class="theme">// Window Active Flag Set To TRUE By Default</font>
bool		fullscreen=TRUE;						<font class="theme">// Fullscreen Flag Set To Fullscreen Mode By Default</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we set up our integer variables.  loop1 and loop2 will be used to check points on our grid, see if
an enemy has hit us and to give objects random locations on the grid.  You'll see loop1 / loop2 in action
later in the program.  delay is a counter variable that I use to slow down the bad guys.  If delay is greater
than a certain value, the enemies are moved and delay is set back to zero.
<br><br>
The variable adjust is a very special variable!  Even though this program has a timer, the timer only checks to see
if your computer is too fast.  If it is, a delay is created to slow the computer down.  On my GeForce card, the program
runs insanely smooth, and very very fast.  After testing this program on my PIII/450 with a Voodoo 3500TV, I noticed that
the program was running extremely slow.  The problem is that my timing code only slows down the gameplay.  It wont speed it
up.  So I made a new variable called adjust.  adjust can be any value from 0 to 5.  The objects in the game
move at different speeds depending on the value of adjust.  The lower the value the smoother they move, the higher the
value, the faster they move (choppy at values higher than 3).  This was the only real easy way to make the game playable
on slow systems.  One thing to note, no matter how fast the objects are moving the game speed will never run faster than
I intended it to run.  So setting the adjust value to 3 is safe for fast and slow systems.
<br><br>
The variable lives is set to 5 so that you start the game with 5 lives.  level is an internal
variable.  The game uses it to keep track of the level of difficulty.  This is not the level that you will
see on the screen.  The variable level2 starts off with the same value as level but can
increase forever depending on your skill.  If you manage to get past level 3 the level
variable will stop increasing at 3.  The level variable is an internal variable used for game difficulty.
The stage variable keeps track of the current game stage.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int		loop1;								<font class="theme">// Generic Loop1</font>
int		loop2;								<font class="theme">// Generic Loop2</font>
int		delay;								<font class="theme">// Enemy Delay</font>
int		adjust=3;							<font class="theme">// Speed Adjustment For Really Slow Video Cards</font>
int		lives=5;							<font class="theme">// Player Lives</font>
int		level=1;							<font class="theme">// Internal Game Level</font>
int		level2=level;							<font class="theme">// Displayed Game Level</font>
int		stage=1;							<font class="theme">// Game Stage</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we create a structure to keep track of the objects in our game.  We have a fine X position
(fx) and a fine Y position (fy).  These variables will move the player and enemies around
the grid a few pixels at a time.  Creating a smooth moving object.
<br><br>
Then we have x and y.  These variables will keep track of what intersection our player is
at.  There are 11 points left and right and 11 points up and down.  So x and y can be any
value from 0 to 10.  That is why we need the fine values.  If we could only move one of 11 spots left and
right and one of 11 spots up and down our player would jump around the screen in a quick (non smooth)
motion.
<br><br>
The last variable spin will be used to spin the objects on their z-axis.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>struct		object								<font class="theme">// Create A Structure For Our Player</font>
{
	int	fx, fy;								<font class="theme">// Fine Movement Position</font>
	int	x, y;								<font class="theme">// Current Player Position</font>
	float	spin;								<font class="theme">// Spin Direction</font>
};
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now that we have created a structure that can be used for our player, enemies and even a special item
we can create new structures that take on the characteristics of the structure we just made.
<br><br>
The first line below creates a structure for our player.  Basically we're giving our player structure
fx, fy, x, y and spin values.  By adding this line, we can access
the player x position by checking player.x.  We can change the player spin by adding a
number to player.spin.
<br><br>
The second line is a bit different.  Because we can have up to 9 enemies on the screen at a time, we
need to create the above variables for each enemy.  We do this by making an array of 9 enemies.
the x position of the first enemy will be enemy[0].x.  The second enemy will be
enemy[1].x, etc.
<br><br>
The last line creates a structure for our special item.  The special item is an hourglass that will appear
on the screen from time to time.  We need to keep track of the x and y values for the
hourglass, but because the hourglass doesn't move, we don't need to keep track of the fine positions.
Instead we will use the fine variables (fx and fy) for other things later in the program.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>struct	object	player;								<font class="theme">// Player Information</font>
struct	object	enemy[9];							<font class="theme">// Enemy Information</font>
struct	object	hourglass;							<font class="theme">// Hourglass Information</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we create a timer structure.  We create a structure so that it's easier to keep track of timer
variables and so that it's easier to tell that the variable is a timer variable.
<br><br>
The first thing we do is create a 64 bit integer called frequency.  This variable will hold the
frequency of the timer.  When I first wrote this program, I forgot to include this variable.  I didn't
realize that the frequency on one machine may not match the frequency on another.  Big mistake on my part!
The code ran fine on the 3 systems in my house, but when I tested it on a friends machine the game ran WAY
to fast.  Frequency is basically how fast the clock is updated.  Good thing to keep track of :)
<br><br>
The resolution variable keeps track of the steps it takes before we get 1 millisecond of time.
<br><br>
mm_timer_start and mm_timer_elapsed hold the value that the timer started at, and the amount
of time that has elapsed since the the timer was started.  These two variables are only used if the
computer doesn't have a performance counter.  In that case we end up using the less accurate multimedia
timer, which is still not to bad for a non-time critical game like this.
<br><br>
The variable performance_timer can be either TRUE of FALSE.  If the program detects a performance
counter, the variable performance_timer variable is set to TRUE, and all timing is done using the
performance counter (alot more accurate than the multimedia timer).  If a performance counter is not
found, performance_timer is set to FALSE and the multimedia timer is used for timing.
<br><br>
The last 2 variables are 64 bit integer variables that hold the start time of the performance counter
and the amount of time that has elapsed since the performance counter was started.
<br><br>
The name of this structure is "timer" as you can see at the bottom of the structure.  If we want to know
the timer frequency we can now check timer.frequency.  Nice!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>struct			 							<font class="theme">// Create A Structure For The Timer Information</font>
{
  __int64       frequency;							<font class="theme">// Timer Frequency</font>
  float         resolution;							<font class="theme">// Timer Resolution</font>
  unsigned long mm_timer_start;							<font class="theme">// Multimedia Timer Start Value</font>
  unsigned long mm_timer_elapsed;						<font class="theme">// Multimedia Timer Elapsed Time</font>
  bool		performance_timer;						<font class="theme">// Using The Performance Timer?</font>
  __int64       performance_timer_start;					<font class="theme">// Performance Timer Start Value</font>
  __int64       performance_timer_elapsed;					<font class="theme">// Performance Timer Elapsed Time</font>
} timer;									<font class="theme">// Structure Is Named timer</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The next line of code is our speed table.  The objects in the game will move at a different rate depending
on the value of adjust.  If adjust is 0 the objects will move one pixel at a time.  If the
value of adjust is 5, the objects will move 20 pixels at a time.  So by increasing the value of
adjust the speed of the objects will increase, making the game run faster on slow computers.  The
higher adjust is however, the choppier the game will play.
<br><br>
Basically steps[ ] is just a look-up table.  If adjust was 3, we would look at the number
stored at location 3 in steps[ ].  Location 0 holds the value 1, location 1 holds the value 2,
location 2 holds the value 4, and location 3 hold the value 5.  If adjust was 3, our objects would
move 5 pixels at a time.  Make sense?
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int		steps[6]={ 1, 2, 4, 5, 10, 20 };				<font class="theme">// Stepping Values For Slow Video Adjustment</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Next we make room for two textures.  We'll load a background scene, and a bitmap font texture.  Then we set
up a base variable so we can keep track of our font display list just like we did in the other
font tutorials.  Finally we declare WndProc().
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLuint		texture[2];							<font class="theme">// Font Texture Storage Space</font>
GLuint		base;								<font class="theme">// Base Display List For The Font</font>

LRESULT	CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);				<font class="theme">// Declaration For WndProc</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now for the fun stuff :)  The next section of code initializes our timer.  It will check the computer to
see if a performance counter is available (very accurate counter).  If we don't have a performance counter
the computer will use the multimedia timer.  This code should be portable from what I'm told.
<br><br>
We start off by clearing all the timer variables to zero.  This will set all the variables in our timer
structure to zero.  After that, we check to see if there is NOT a performance counter.  The ! means NOT.
If there is, the frequency will be stored in timer.frequency.
<br><br>
If there was no performance counter, the code in between the { }'s is run.  The first line sets the
variable timer.performance_timer to FALSE.  This tells our program that there is no performance
counter.  The second line gets our starting multimedia timer value from timeGetTime().  We set the
timer.resolution to 0.001f, and the timer.frequency to 1000.  Because no time has elapsed
yet, we make the elapsed time equal the start time.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void TimerInit(void)								<font class="theme">// Initialize Our Timer (Get It Ready)</font>
{
	memset(&amp;timer, 0, sizeof(timer));					<font class="theme">// Clear Our Timer Structure</font>

	<font class="theme">// Check To See If A Performance Counter Is Available</font>
	<font class="theme">// If One Is Available The Timer Frequency Will Be Updated</font>
	if (!QueryPerformanceFrequency((LARGE_INTEGER *) &amp;timer.frequency))
	{
		<font class="theme">// No Performace Counter Available</font>
		timer.performance_timer	= FALSE;				<font class="theme">// Set Performance Timer To FALSE</font>
		timer.mm_timer_start	= timeGetTime();			<font class="theme">// Use timeGetTime() To Get Current Time</font>
		timer.resolution	= 1.0f/1000.0f;				<font class="theme">// Set Our Timer Resolution To .001f</font>
		timer.frequency		= 1000;					<font class="theme">// Set Our Timer Frequency To 1000</font>
		timer.mm_timer_elapsed	= timer.mm_timer_start;			<font class="theme">// Set The Elapsed Time To The Current Time</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
If there is a performance counter, the following code is run instead.  The first line grabs the current
starting value of the performance counter, and stores it in timer.performance_timer_start.  Then
we set timer.performance_timer to TRUE so that our program knows there is a performance counter
available.  After that we calculate the timer resolution by using the frequency that we got when we
checked for a performance counter in the code above.  We divide 1 by the frequency to get the resolution.
The last thing we do is make the elapsed time the same as the starting time.
<br><br>
Notice instead of sharing variables for the performance and multimedia timer start and elapsed variables,
I've decided to make seperate variables.  Either way it will work fine.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	else
	{
		<font class="theme">// Performance Counter Is Available, Use It Instead Of The Multimedia Timer</font>
		<font class="theme">// Get The Current Time And Store It In performance_timer_start</font>
		QueryPerformanceCounter((LARGE_INTEGER *) &amp;timer.performance_timer_start);
		timer.performance_timer		= TRUE;				<font class="theme">// Set Performance Timer To TRUE</font>
		<font class="theme">// Calculate The Timer Resolution Using The Timer Frequency</font>
		timer.resolution		= (float) (((double)1.0f)/((double)timer.frequency));
		<font class="theme">// Set The Elapsed Time To The Current Time</font>
		timer.performance_timer_elapsed	= timer.performance_timer_start;
	}
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The section of code above sets up the timer.  The code below reads the timer and returns the amount of
time that has passed in milliseconds.
<br><br>
The first thing we do is set up a 64 bit variable called time.  We will use this variable to grab
the current counter value.  The next line checks to see if we have a performance counter.  If we do,
timer.performance_timer will be TRUE and the code right after will run.
<br><br>
The first line of code inside the { }'s grabs the counter value and stores it in the variable we created
called time.  The second line takes the time we just grabbed (time and subtracts the start
time that we got when we initialized the timer.  This way our timer should start out pretty close to zero.
We then multiply the results by the resolution to find out how many seconds have passed.  The last thing
we do is multiply the result by 1000 to figure out how many milliseconds have passed.  After the
calculation is done, our results are sent back to the section of code that called this procedure.
The results will be in floating point format for greater accuracy.
<br><br>
If we are not using the peformance counter, the code after the else statement will be run.  It does
pretty much the same thing.  We grab the current time with timeGetTime() and subtract our starting counter
value.  We multiply it by our resolution and then multiply the result by 1000 to convert from seconds into
milliseconds.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>float TimerGetTime()								<font class="theme">// Get Time In Milliseconds</font>
{
	__int64 time;								<font class="theme">// time Will Hold A 64 Bit Integer</font>

	if (timer.performance_timer)						<font class="theme">// Are We Using The Performance Timer?</font>
	{
		QueryPerformanceCounter((LARGE_INTEGER *) &amp;time);		<font class="theme">// Grab The Current Performance Time</font>
		<font class="theme">// Return The Current Time Minus The Start Time Multiplied By The Resolution And 1000 (To Get MS)</font>
		return ( (float) ( time - timer.performance_timer_start) * timer.resolution)*1000.0f;
	}
	else
	{
		<font class="theme">// Return The Current Time Minus The Start Time Multiplied By The Resolution And 1000 (To Get MS)</font>
		return( (float) ( timeGetTime() - timer.mm_timer_start) * timer.resolution)*1000.0f;
	}
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The following section of code resets the player to the top left corner of the screen, and gives the
enemies a random starting point.
<br><br>
The top left of the screen is 0 on the x-axis and 0 on the y-axis.  So by setting the player.x
value to 0 we move the player to the far left side of the screen.  By setting the player.y value
to 0 we move our player to the top of the screen.
<br><br>
The fine positions have to be equal to the current player position, otherwise our player would move from
whatever value it's at on the fine position to the top left of the screen.  We don't want to player to
move there, we want it to appear there, so we set the fine positions to 0 as well.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void ResetObjects(void)								<font class="theme">// Reset Player And Enemies</font>
{
	player.x=0;								<font class="theme">// Reset Player X Position To Far Left Of The Screen</font>
	player.y=0;								<font class="theme">// Reset Player Y Position To The Top Of The Screen</font>
	player.fx=0;								<font class="theme">// Set Fine X Position To Match</font>
	player.fy=0;								<font class="theme">// Set Fine Y Position To Match</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Next we give the enemies a random starting location.  The number of enemies displayed on the screen will
be equal to the current (internal) level value multiplied by the current stage.  Remember, the
maximum value that level can equal is 3 and the maximum number of stages per level is 3.  So we
can have a total of 9 enemies.
<br><br>
To make sure we give all the viewable enemies a new position, we loop through all the visible enemies
(stage times level).  We set each enemies x position to 5 plus a random value from 0 to 5.
(the maximum value rand can be is always the number you specify minus 1).  So the enemy can appear on
the grid, anywhere from 5 to 10.  We then give the enemy a random value on the y axis from 0 to 10.
<br><br>
We don't want the enemy to move from it's old position to the new random position so we make sure the
fine x (fx) and y (fy) values are equal to the actual x and y values multiplied by width and
height of each tile on the screen.  Each tile has a width of 60 and a height of 40.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	for (loop1=0; loop1&lt;(stage*level); loop1++)				<font class="theme">// Loop Through All The Enemies</font>
	{
		enemy[loop1].x=5+rand()%6;					<font class="theme">// Select A Random X Position</font>
		enemy[loop1].y=rand()%11;					<font class="theme">// Select A Random Y Position</font>
		enemy[loop1].fx=enemy[loop1].x*60;				<font class="theme">// Set Fine X To Match</font>
		enemy[loop1].fy=enemy[loop1].y*40;				<font class="theme">// Set Fine Y To Match</font>
	}
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The AUX_RGBImageRec code hasn't changed so I'm skipping over it.  In LoadGLTextures() we will load in our
two textures.  First the font bitmap (Font.bmp) and then the background image (Image.bmp).
We'll convert both the images into textures that we can use in our game.  After we have built the textures
we clean up by deleting the bitmap information.  Nothing really new.  If you've read the other tutorials
you should have no problems understanding the code.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int LoadGLTextures()								<font class="theme">// Load Bitmaps And Convert To Textures</font>
{
	int Status=FALSE;							<font class="theme">// Status Indicator</font>
	AUX_RGBImageRec *TextureImage[2];					<font class="theme">// Create Storage Space For The Textures</font>
	memset(TextureImage,0,sizeof(void *)*2);				<font class="theme">// Set The Pointer To NULL</font>

	if 	((TextureImage[0]=LoadBMP("Data/Font.bmp")) &amp;&amp;			<font class="theme">// Load The Font</font>
		 (TextureImage[1]=LoadBMP("Data/Image.bmp")))			<font class="theme">// Load Background Image</font>
	{
		Status=TRUE;							<font class="theme">// Set The Status To TRUE</font>

		glGenTextures(2, &amp;texture[0]);					<font class="theme">// Create The Texture</font>

		for (loop1=0; loop1&lt;2; loop1++)					<font class="theme">// Loop Through 2 Textures</font>
		{
			glBindTexture(GL_TEXTURE_2D, texture[loop1]);
			glTexImage2D(GL_TEXTURE_2D, 0, 3, TextureImage[loop1]-&gt;sizeX, TextureImage[loop1]-&gt;sizeY,
				0, GL_RGB, GL_UNSIGNED_BYTE, TextureImage[loop1]-&gt;data);
			glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
			glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
		}

		for (loop1=0; loop1&lt;2; loop1++)					<font class="theme">// Loop Through 2 Textures</font>
		{
			if (TextureImage[loop1])				<font class="theme">// If Texture Exists</font>
			{
				if (TextureImage[loop1]-&gt;data)			<font class="theme">// If Texture Image Exists</font>
				{
					free(TextureImage[loop1]-&gt;data);	<font class="theme">// Free The Texture Image Memory</font>
				}
				free(TextureImage[loop1]);			<font class="theme">// Free The Image Structure</font>
			}
		}
	}
	return Status;								<font class="theme">// Return The Status</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below builds our font display list.  I've already done a tutorial on bitmap texture fonts.  All
the code does is divides the Font.bmp image into 16 x 16 cells (256 characters).  Each 16x16 cell
will become a character.  Because I've set the y-axis up so that positive goes down instead of up, it's
necessary to subtract our y-axis values from 1.0f.  Otherwise the letters will all be upside down :)
If you don't understand what's going on, go back and read the bitmap texture font tutorial.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid BuildFont(GLvoid)							<font class="theme">// Build Our Font Display List</font>
{
	base=glGenLists(256);							<font class="theme">// Creating 256 Display Lists</font>
	glBindTexture(GL_TEXTURE_2D, texture[0]);				<font class="theme">// Select Our Font Texture</font>
	for (loop1=0; loop1&lt;256; loop1++)					<font class="theme">// Loop Through All 256 Lists</font>
	{
		float cx=float(loop1%16)/16.0f;					<font class="theme">// X Position Of Current Character</font>
		float cy=float(loop1/16)/16.0f;					<font class="theme">// Y Position Of Current Character</font>

		glNewList(base+loop1,GL_COMPILE);				<font class="theme">// Start Building A List</font>
			glBegin(GL_QUADS);					<font class="theme">// Use A Quad For Each Character</font>
				glTexCoord2f(cx,1.0f-cy-0.0625f);		<font class="theme">// Texture Coord (Bottom Left)</font>
				glVertex2d(0,16);				<font class="theme">// Vertex Coord (Bottom Left)</font>
				glTexCoord2f(cx+0.0625f,1.0f-cy-0.0625f);	<font class="theme">// Texture Coord (Bottom Right)</font>
				glVertex2i(16,16);				<font class="theme">// Vertex Coord (Bottom Right)</font>
				glTexCoord2f(cx+0.0625f,1.0f-cy);		<font class="theme">// Texture Coord (Top Right)</font>
				glVertex2i(16,0);				<font class="theme">// Vertex Coord (Top Right)</font>
				glTexCoord2f(cx,1.0f-cy);			<font class="theme">// Texture Coord (Top Left)</font>
				glVertex2i(0,0);				<font class="theme">// Vertex Coord (Top Left)</font>
			glEnd();						<font class="theme">// Done Building Our Quad (Character)</font>
			glTranslated(15,0,0);					<font class="theme">// Move To The Right Of The Character</font>
		glEndList();							<font class="theme">// Done Building The Display List</font>
	}									<font class="theme">// Loop Until All 256 Are Built</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
It's a good idea to destroy the font display list when you're done with it, so I've added the following
section of code.  Again, nothing new.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid KillFont(GLvoid)								<font class="theme">// Delete The Font From Memory</font>
{
	glDeleteLists(base,256);						<font class="theme">// Delete All 256 Display Lists</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The glPrint() code hasn't changed that much.  The only difference from the tutorial on bitmap font
textures is that I have added the ability to print the value of variables.  The only reason I've written
this section of code out is so that you can see the changes.  The print statement will position the text
at the x and y position that you specify.  You can pick one of 2 character sets, and the
value of variables will be written to the screen.  This allows us to display the current level and
stage on the screen.
<br><br>
Notice that I enable texture mapping, reset the view and then translate to the proper x / y
position.  Also notice that if character set 0 is selected, the font is enlarged one and half times
width wise, and double it's original size up and down.  I did this so that I could write the title of
the game in big letters.  After the text has been drawn, I disable texture mapping.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid glPrint(GLint x, GLint y, int set, const char *fmt, ...)			<font class="theme">// Where The Printing Happens</font>
{
	char		text[256];						<font class="theme">// Holds Our String</font>
	va_list		ap;							<font class="theme">// Pointer To List Of Arguments</font>

	if (fmt == NULL)							<font class="theme">// If There's No Text</font>
		return;								<font class="theme">// Do Nothing</font>

	va_start(ap, fmt);							<font class="theme">// Parses The String For Variables</font>
	    vsprintf(text, fmt, ap);						<font class="theme">// And Converts Symbols To Actual Numbers</font>
	va_end(ap);								<font class="theme">// Results Are Stored In Text</font>

	if (set&gt;1)								<font class="theme">// Did User Choose An Invalid Character Set?</font>
	{
		set=1;								<font class="theme">// If So, Select Set 1 (Italic)</font>
	}
	glEnable(GL_TEXTURE_2D);						<font class="theme">// Enable Texture Mapping</font>
	glLoadIdentity();							<font class="theme">// Reset The Modelview Matrix</font>
	glTranslated(x,y,0);							<font class="theme">// Position The Text (0,0 - Bottom Left)</font>
	glListBase(base-32+(128*set));						<font class="theme">// Choose The Font Set (0 or 1)</font>

	if (set==0)								<font class="theme">// If Set 0 Is Being Used Enlarge Font</font>
	{
		glScalef(1.5f,2.0f,1.0f);					<font class="theme">// Enlarge Font Width And Height</font>
	}

	glCallLists(strlen(text),GL_UNSIGNED_BYTE, text);			<font class="theme">// Write The Text To The Screen</font>
	glDisable(GL_TEXTURE_2D);						<font class="theme">// Disable Texture Mapping</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The resize code is NEW :)  Instead of using a perspective view I'm using an ortho view for this tutorial.
That means that objects don't get smaller as they move away from the viewer.  The z-axis is pretty much
useless in this tutorial.
<br><br>
We start off by setting up the view port.  We do this the same way we'd do it if we were setting up a
perspective view.  We make the viewport equal to the width of our window.
<br><br>
Then we select the projection matrix (thing movie projector, it information on how to display our image).
and reset it.
<br><br>
Immediately after we reset the projection matrix, we set up our ortho view.  I'll explain the command in
detail:
<br><br>
The first parameter (0.0f) is the value that we want for the far left side of the screen.  You wanted to
know how to use actual pixel values, so instead of using a negative number for far left, I've set the
value to 0.  The second  parameter is the value for the far right side of the screen.  If our window is
640x480, the value stored in width will be 640.  So the far right side of the screen effectively
becomes 640.  Therefore our screen runs from 0 to 639 on the x-axis (640 pixels).
<br><br>
The third parameter (height) would normally be our negative y-axis value (bottom of the screen).  But
because we want exact pixels, we wont have a negative value.  Instead we will make the bottom of the
screen equal the height of our window.  If our window is 640x480, height will be equal to
480.  So the bottom of our screen will be 479.  The fourth parameter would normally be the positive value
for the top of our screen.  We want the top of the screen to be 0 (good old fashioned screen coordinates)
so we just set the fourth parameter to 0.  This gives us from 0 to 479 on the y-axis (480 pixels).
<br><br>
The last two parameters are for the z-axis.  We don't really care about the z-axis so we'll set the range
from -1.0f to 1.0f.  Just enough that we can see anything drawn at 0.0f on the z-axis.
<br><br>
After we've set up the ortho view, we select the modelview matrix (object information... location, etc)
and reset it.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid ReSizeGLScene(GLsizei width, GLsizei height)				<font class="theme">// Resize And Initialize The GL Window</font>
{
	if (height==0)								<font class="theme">// Prevent A Divide By Zero By</font>
	{
		height=1;							<font class="theme">// Making Height Equal One</font>
	}

	glViewport(0,0,width,height);						<font class="theme">// Reset The Current Viewport</font>

	glMatrixMode(GL_PROJECTION);						<font class="theme">// Select The Projection Matrix</font>
	glLoadIdentity();							<font class="theme">// Reset The Projection Matrix</font>

	glOrtho(0.0f,width,height,0.0f,-1.0f,1.0f);				<font class="theme">// Create Ortho 640x480 View (0,0 At Top Left)</font>

	glMatrixMode(GL_MODELVIEW);						<font class="theme">// Select The Modelview Matrix</font>
	glLoadIdentity();							<font class="theme">// Reset The Modelview Matrix</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The init code has a few new commands.  We start off by loading our textures.  If they didn't load properly,
the program will quit with an error message.  After we have built the textures, we build our font set.
I don't bother error checking but you can if you want.
<br><br>
After the font has been built, we set things up.  We enable smooth shading, set our clear color to black
and set depth clearing to 1.0f.  After that is a new line of code.
<br><br>
glHint() tells OpenGL how to draw something.  In this case we are telling OpenGL that we want line
smoothing to be the best (nicest) that OpenGL can do.  This is the command that enables anti-aliasing.
<br><br>
The last thing we do is enable blending and select the blend mode that makes anti-aliased lines possible.
Blending is required if you want the lines to blend nicely with the background image.  Disable blending if
you want to see how crappy things look without it.
<br><br>
It's important to point out that antialiasing may not appear to be working.  The objects in this game are
quite small so you may not notice the antialaising right off the start.  Look hard.  Notice how the jaggie
lines on the enemies smooth out when antialiasing is on.  The player and hourglass should look better as well.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int InitGL(GLvoid)								<font class="theme">// All Setup For OpenGL Goes Here</font>
{
	if (!LoadGLTextures())							<font class="theme">// Jump To Texture Loading Routine</font>
	{
		return FALSE;							<font class="theme">// If Texture Didn't Load Return FALSE</font>
	}

	BuildFont();								<font class="theme">// Build The Font</font>

	glShadeModel(GL_SMOOTH);						<font class="theme">// Enable Smooth Shading</font>
	glClearColor(0.0f, 0.0f, 0.0f, 0.5f);					<font class="theme">// Black Background</font>
	glClearDepth(1.0f);							<font class="theme">// Depth Buffer Setup</font>
	glHint(GL_LINE_SMOOTH_HINT, GL_NICEST);					<font class="theme">// Set Line Antialiasing</font>
	glEnable(GL_BLEND);							<font class="theme">// Enable Blending</font>
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);			<font class="theme">// Type Of Blending To Use</font>
	return TRUE;								<font class="theme">// Initialization Went OK</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now for the drawing code.  This is where the magic happens :)
<br><br>
We clear the screen (to black) along with the depth buffer.  Then we select the font texture
(texture[0]).  We want the words "GRID CRAZY" to be a purple color so we set red and blue to full
intensity, and we turn the green up half way.  After we've selected the color, we call glPrint().
We position the words "GRID CRAZY" at 207 on the x axis (center on the screen) and 24 on the y-axis (up
and down).  We use our large font by selecting font set 0.
<br><br>
After we've drawn "GRID CRAZY" to the screen, we change the color to yellow (full red, full green).
We write "Level:" and the variable level2 to the screen.  Remember that level2 can be greater
than 3.  level2 holds the level value that the player sees on the screen. %2i means that we don't
want any more than 2 digits on the screen to represent the level.  The i means the number is an integer number.
<br><br>
After we have written the level information to the screen, we write the stage information right under it
using the same color.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int DrawGLScene(GLvoid)								<font class="theme">// Here's Where We Do All The Drawing</font>
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);			<font class="theme">// Clear Screen And Depth Buffer</font>
	glBindTexture(GL_TEXTURE_2D, texture[0]);				<font class="theme">// Select Our Font Texture</font>
	glColor3f(1.0f,0.5f,1.0f);						<font class="theme">// Set Color To Purple</font>
	glPrint(207,24,0,"GRID CRAZY");						<font class="theme">// Write GRID CRAZY On The Screen</font>
	glColor3f(1.0f,1.0f,0.0f);						<font class="theme">// Set Color To Yellow</font>
	glPrint(20,20,1,"Level:%2i",level2);					<font class="theme">// Write Actual Level Stats</font>
	glPrint(20,40,1,"Stage:%2i",stage);					<font class="theme">// Write Stage Stats</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we check to see if the game is over.  If the game is over, the variable gameover will be TRUE.
If the game is over, we use glColor3ub(r,g,b) to select a random color.  Notice we are using 3ub instead
of 3f.  By using 3ub we can use integer values from 0 to 255 to set our colors.  Plus it's easier to get a
random value from 0 to 255 than it is to get a random value from 0.0f to 1.0f.
<br><br>
Once a random color has been selected, we write the words "GAME OVER" to the right of the game title.
Right under "GAME OVER" we write "PRESS SPACE".  This gives the player a visual message letting them know
that they have died and to press the spacebar to restart the game.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	if (gameover)								<font class="theme">// Is The Game Over?</font>
	{
		glColor3ub(rand()%255,rand()%255,rand()%255);			<font class="theme">// Pick A Random Color</font>
		glPrint(472,20,1,"GAME OVER");					<font class="theme">// Write GAME OVER To The Screen</font>
		glPrint(456,40,1,"PRESS SPACE");				<font class="theme">// Write PRESS SPACE To The Screen</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
If the player still has lives left, we draw animated images of the players character to the right of the
game title.  To do this we create a loop that goes from 0 to the current number of lives the player
has left minus one.  I subtract one, because the current life is the image you control.
<br><br>
Inside the loop, we reset the view.  After the view has been reset, we translate to the 490 pixels to the
right plus the value of loop1 times 40.0f.  This draws each of the animated player lives 40 pixels
apart from eachother.  The first animated image will be drawn at 490+(0*40) (= 490), the second animated
image will be drawn at 490+(1*40) (= 530), etc.
<br><br>
After we have moved to the spot we want to draw the animated image, we rotate counterclockwise depending
on the value stored in player.spin.  This causes the animated life images to spin the opposite way
that your active player is spinning.
<br><br>
We then select green as our color, and start drawing the image.  Drawing lines is alot like drawing a
quad or a polygon.  You start off with glBegin(GL_LINES), telling OpenGL we want to draw a line.  Lines
have 2 vertices.  We use glVertex2d to set our first point.  glVertex2d doesn't require a z value, which
is nice considering we don't care about the z value.  The first point is drawn 5 pixels to the left of the
current x location and 5 pixels up from the current y location.  Giving us a top left point.  The second
point of our first line is drawn 5 pixels to the right of our current x location, and 5 pixels down,
giving us a bottom right point.  This draws a line from the top left to the bottom right.  Our second line
is drawn from the top right to the bottom left.  This draws a green X on the screen.
<br><br>
After we have drawn the green X, we rotate counterclockwise (on the z axis) even more, but this time
at half the speed.  We then select a darker shade of green (0.75f) and draw another x, but we use 7
instead of 5 this time.  This draws a bigger / darker x on top of the first green X.  Because the darker
X spins slower though, it will look as if the bright X has a spinning set of feelers (grin) on top of it.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	for (loop1=0; loop1&lt;lives-1; loop1++)					<font class="theme">// Loop Through Lives Minus Current Life</font>
	{
		glLoadIdentity();						<font class="theme">// Reset The View</font>
		glTranslatef(490+(loop1*40.0f),40.0f,0.0f);			<font class="theme">// Move To The Right Of Our Title Text</font>
		glRotatef(-player.spin,0.0f,0.0f,1.0f);				<font class="theme">// Rotate Counter Clockwise</font>
		glColor3f(0.0f,1.0f,0.0f);					<font class="theme">// Set Player Color To Light Green</font>
		glBegin(GL_LINES);						<font class="theme">// Start Drawing Our Player Using Lines</font>
			glVertex2d(-5,-5);					<font class="theme">// Top Left Of Player</font>
			glVertex2d( 5, 5);					<font class="theme">// Bottom Right Of Player</font>
			glVertex2d( 5,-5);					<font class="theme">// Top Right Of Player</font>
			glVertex2d(-5, 5);					<font class="theme">// Bottom Left Of Player</font>
		glEnd();							<font class="theme">// Done Drawing The Player</font>
		glRotatef(-player.spin*0.5f,0.0f,0.0f,1.0f);			<font class="theme">// Rotate Counter Clockwise</font>
		glColor3f(0.0f,0.75f,0.0f);					<font class="theme">// Set Player Color To Dark Green</font>
		glBegin(GL_LINES);						<font class="theme">// Start Drawing Our Player Using Lines</font>
			glVertex2d(-7, 0);					<font class="theme">// Left Center Of Player</font>
			glVertex2d( 7, 0);					<font class="theme">// Right Center Of Player</font>
			glVertex2d( 0,-7);					<font class="theme">// Top Center Of Player</font>
			glVertex2d( 0, 7);					<font class="theme">// Bottom Center Of Player</font>
		glEnd();							<font class="theme">// Done Drawing The Player</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we're going to draw the grid.  We set the variable filled to TRUE.  This tells our program that
the grid has been completely filled in (you'll see why we do this in a second).
<br><br>
Right after that we set the line width to 2.0f.  This makes the lines thicker, making the grid look more
defined.
<br><br>
Then we disable anti-aliasing.  The reason we disable anti-aliasing is because although it's a great
feature, it eats CPU's for breakfast.  Unless you have a killer graphics card, you'll notice a huge slow
down if you leave anti-aliasing on.  Go ahead and try if you want :)
<br><br>
The view is reset, and we start two loops.  loop1 will travel from left to right.  loop2
will travel from top to bottom.
<br><br>
We set the line color to blue, then we check to see if the horizontal line that we are about to draw has
been traced over.  If it has we set the color to white.  The value of hline[loop1][loop2] will be
TRUE if the line has been traced over, and FALSE if it hasn't.
<br><br>
After we have set the color to blue or white, we draw the line.  The first thing to do is make sure
we haven't gone to far to the right.  We don't want to draw any lines or check to see if the line has been
filled in when loop1 is greater than 9.
<br><br>
Once we are sure loop1 is in the valid range we check to see if the horizontal line hasn't been
filled in.  If it hasn't, filled is set to FALSE, letting our OpenGL program know that there is at
least one line that hasn't been filled in.
<br><br>
The line is then drawn.  We draw our first horizontal (left to right) line starting at 20+(0*60) (= 20).
This line is drawn all the way to 80+(0*60) (= 80).  Notice the line is drawn to the right.  That is why
we don't want to draw 11 (0-10) lines.  because the last line would start at the far right of the screen
and end 80 pixels off the screen.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	filled=TRUE;								<font class="theme">// Set Filled To True Before Testing</font>
	glLineWidth(2.0f);							<font class="theme">// Set Line Width For Cells To 2.0f</font>
	glDisable(GL_LINE_SMOOTH);						<font class="theme">// Disable Antialiasing</font>
	glLoadIdentity();							<font class="theme">// Reset The Current Modelview Matrix</font>
	for (loop1=0; loop1&lt;11; loop1++)					<font class="theme">// Loop From Left To Right</font>
	{
		for (loop2=0; loop2&lt;11; loop2++)				<font class="theme">// Loop From Top To Bottom</font>
		{
			glColor3f(0.0f,0.5f,1.0f);				<font class="theme">// Set Line Color To Blue</font>
			if (hline[loop1][loop2])				<font class="theme">// Has The Horizontal Line Been Traced</font>
			{
				glColor3f(1.0f,1.0f,1.0f);			<font class="theme">// If So, Set Line Color To White</font>
			}
			if (loop1&lt;10)						<font class="theme">// Dont Draw To Far Right</font>
			{
				if (!hline[loop1][loop2])			<font class="theme">// If A Horizontal Line Isn't Filled</font>
				{
					filled=FALSE;				<font class="theme">// filled Becomes False</font>
				}
				glBegin(GL_LINES);				<font class="theme">// Start Drawing Horizontal Cell Borders</font>
					glVertex2d(20+(loop1*60),70+(loop2*40));	<font class="theme">// Left Side Of Horizontal Line</font>
					glVertex2d(80+(loop1*60),70+(loop2*40));	<font class="theme">// Right Side Of Horizontal Line</font>
				glEnd();					<font class="theme">// Done Drawing Horizontal Cell Borders</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below does the same thing, but it checks to make sure the line isn't being drawn too far down
the screen instead of too far right.  This code is responsible for drawing vertical lines.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			glColor3f(0.0f,0.5f,1.0f);				<font class="theme">// Set Line Color To Blue</font>
			if (vline[loop1][loop2])				<font class="theme">// Has The Horizontal Line Been Traced</font>
			{
				glColor3f(1.0f,1.0f,1.0f);			<font class="theme">// If So, Set Line Color To White</font>
			}
			if (loop2&lt;10)						<font class="theme">// Dont Draw To Far Down</font>
			{
				if (!vline[loop1][loop2])			<font class="theme">// If A Verticle Line Isn't Filled</font>
				{
					filled=FALSE;				<font class="theme">// filled Becomes False</font>
				}
				glBegin(GL_LINES);				<font class="theme">// Start Drawing Verticle Cell Borders</font>
					glVertex2d(20+(loop1*60),70+(loop2*40));	<font class="theme">// Left Side Of Horizontal Line</font>
					glVertex2d(20+(loop1*60),110+(loop2*40));	<font class="theme">// Right Side Of Horizontal Line</font>
				glEnd();					<font class="theme">// Done Drawing Verticle Cell Borders</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">Now
we check to see if 4 sides of a box are traced. Each box on the screen
is 1/10th of a full screen picture. Because each box is piece of a
larger texture, the first thing we need to do is enable texture
mapping. We don't want the texture to be tinted red, green or blue so
we set the
color to bright white. After the color is set to white we select our
grid texture (texture[1]).
<br><br>The next thing we do is check to see if we are checking a box
that exists on the screen. Remember that our loop draws the 11 lines
right and left
and 11 lines up and down. But we dont have 11 boxes. We have 10 boxes.
So we have to make sure we don't check the 11th position. We do this by
making sure both loop1 and loop2 is less than 10. That's 10 boxes from
0 - 9.
<br><br>After we have made sure that we are in bounds we can start
checking the borders. hline[loop1][loop2] is the top of a box.
hline[loop1][loop2+1]
is the bottom of a box. vline[loop1][loop2] is the left side of a box
and vline[loop1+1][loop2] is the right side of a box. Hopefully I can
clear
things up with a diagram:
<br><br>
<center><img src="lesson.asp-Dateien/lesson21-1.jpg"></center>
<br>All horizontal lines are assumed to run from loop1 to loop1+1. As
you can see, the first horizontal line runs along loop2. The second
horizontal
line runs along loop2+1. Vertical lines are assumed to run from loop2
to loop2+1. The first vertical line runs along loop1 and the second
vertical
line runs along loop1+1.
<br><br>When loop1 is increased, the right side of our old box becomes
the left side of the new box. When loop2 is increased, the bottom of
the old box
becomes the top of the new box.
<br><br>If all 4 borders are TRUE (meaning we've passed over them all)
we can texture map the box. We do this the same way we broke the font
texture into
seperate letters. We divide both loop1 and loop2 by 10 because we want
to map the texture across 10 boxes from left to right and 10 boxes up
and
down. Texture coordinates run from 0.0f to 1.0f and 1/10th of 1.0f is
0.1f.
<br><br>So to get the top right side of our box we divide the loop
values by 10 and add 0.1f to the x texture coordinate. To get the top
left side of the
box we divide our loop values by 10. To get the bottom left side of the
box we divide our loop values by 10 and add 0.1f to the y texture
coordinate. Finally to get the bottom right texture coordinate we
divide the loop values by 10 and add 0.1f to both the x and y texture
coordinates.
<br><br>
Quick examples:
<br><br>
<u>loop1=0 and loop2=0</u>
<br><br>
<li>Right X Texture Coordinate = loop1/10+0.1f = 0/10+0.1f = 0+0.1f = 0.1f</li>
<li>Left X Texture Coordinate = loop1/10 = 0/10 = 0.0f</li>
<li>Top Y Texture Coordinate = loop2/10 = 0/10 = 0.0f;</li>
<li>Bottom Y Texture Coordinate = loop2/10+0.1f = 0/10+0.1f = 0+0.1f = 0.1f;</li>
<br><br>
<u>loop1=1 and loop2=1</u>
<br><br>
<li>Right X Texture Coordinate = loop1/10+0.1f = 1/10+0.1f = 0.1f+0.1f = 0.2f</li>
<li>Left X Texture Coordinate = loop1/10 = 1/10 = 0.1f</li>
<li>Top Y Texture Coordinate = loop2/10 = 1/10 = 0.1f;</li>
<li>Bottom Y Texture Coordinate = loop2/10+0.1f = 1/10+0.1f = 0.1f+0.1f = 0.2f;</li>
<br><br>Hopefully that all makes sense. If loop1 and loop2 were equal
to 9 we would end up with the values 0.9f and 1.0f. So as you can see
our texture
coordinates mapped across the 10 boxes run from 0.0f at the lowest and
1.0f at the highest. Mapping the entire texture to the screen. After
we've
mapped a section of the texture to the screen, we disable texture
mapping. Once we've drawn all the lines and filled in all the boxes, we
set the
line width to 1.0f.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			glEnable(GL_TEXTURE_2D);				<font class="theme">// Enable Texture Mapping</font>
			glColor3f(1.0f,1.0f,1.0f);				<font class="theme">// Bright White Color</font>
			glBindTexture(GL_TEXTURE_2D, texture[1]);		<font class="theme">// Select The Tile Image</font>
			if ((loop1&lt;10) &amp;&amp; (loop2&lt;10))				<font class="theme">// If In Bounds, Fill In Traced Boxes</font>
			{
				<font class="theme">// Are All Sides Of The Box Traced?</font>
				if (hline[loop1][loop2] &amp;&amp; hline[loop1][loop2+1] &amp;&amp; vline[loop1][loop2] &amp;&amp; vline[loop1+1][loop2])
				{
					glBegin(GL_QUADS);			<font class="theme">// Draw A Textured Quad</font>
						glTexCoord2f(float(loop1/10.0f)+0.1f,1.0f-(float(loop2/10.0f)));
						glVertex2d(20+(loop1*60)+59,(70+loop2*40+1));	<font class="theme">// Top Right</font>
						glTexCoord2f(float(loop1/10.0f),1.0f-(float(loop2/10.0f)));
						glVertex2d(20+(loop1*60)+1,(70+loop2*40+1));	<font class="theme">// Top Left</font>
						glTexCoord2f(float(loop1/10.0f),1.0f-(float(loop2/10.0f)+0.1f));
						glVertex2d(20+(loop1*60)+1,(70+loop2*40)+39);	<font class="theme">// Bottom Left</font>
						glTexCoord2f(float(loop1/10.0f)+0.1f,1.0f-(float(loop2/10.0f)+0.1f));
						glVertex2d(20+(loop1*60)+59,(70+loop2*40)+39);	<font class="theme">// Bottom Right</font>
					glEnd();				<font class="theme">// Done Texturing The Box</font>
				}
			}
			glDisable(GL_TEXTURE_2D);				<font class="theme">// Disable Texture Mapping</font>
		}
	}
	glLineWidth(1.0f);							<font class="theme">// Set The Line Width To 1.0f</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below checks to see if anti is TRUE.  If it is, we enable line smoothing (anti-aliasing).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	if (anti)								<font class="theme">// Is Anti TRUE?</font>
	{
		glEnable(GL_LINE_SMOOTH);					<font class="theme">// If So, Enable Antialiasing</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
To make the game a little easier I've added a special item.  The item is an hourglass.  When you touch the hourglass, the
enemies are frozen for a specific amount of time.  The following section of code is resposible for drawing the hourglass.
<br><br>
For the hourglass we use x and y to position the timer, but unlike our player and enemies we don't use
fx and fy for fine positioning.  Instead we'll use fx to keep track of whether or not the timer is
being displayed.  fx will equal 0 if the timer is not visible.  1 if it is visible, and 2 if the player has touched
the timer.  fy will be used as a counter to keep track of how long the timer should be visible or invisible.
<br><br>
So we start off by checking to see if the timer is visible.  If not, we skip over the code without drawing the timer.
If the timer is visible, we reset the modelview matrix, and position the timer.  Because our first grid point from left
to right starts at 20, we will add hourglass.x times 60 to 20.  We multiply hourglass.x by 60 because the
points on our grid from left to right are spaced 60 pixels apart.  We then position the hourglass on the y axis.  We add
hourglass.y times 40 to 70.0f because we want to start drawing 70 pixels down from the top of the screen.  Each
point on our grid from top to bottom is spaced 40 pixels apart.
<br><br>
After we have positioned the hourglass, we can rotate it on the z-axis.  hourglass.spin is used to keep track
of the rotation, the same way player.spin keeps track of the player rotation.  Before we start to draw the hourglass
we select a random color.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	if (hourglass.fx==1)							<font class="theme">// If fx=1 Draw The Hourglass</font>
	{
		glLoadIdentity();						<font class="theme">// Reset The Modelview Matrix</font>
		glTranslatef(20.0f+(hourglass.x*60),70.0f+(hourglass.y*40),0.0f);	<font class="theme">// Move To The Fine Hourglass Position</font>
		glRotatef(hourglass.spin,0.0f,0.0f,1.0f);			<font class="theme">// Rotate Clockwise</font>
		glColor3ub(rand()%255,rand()%255,rand()%255);			<font class="theme">// Set Hourglass Color To Random Color</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
glBegin(GL_LINES) tells OpenGL we want to draw using lines.  We start off by moving left and up 5 pixels from our current
location.  This gives us the top left point of our hourglass.  OpenGL will start drawing the line from this location.
The end of the line will be 5 pixels right and down from our original location.  This gives us a line running from the
top left to the bottom right.  Immediately after that we draw a second line running from the top right to the bottom left.
This gives us an 'X'.  We finish off by connecting the bottom two points together, and then the top two points to create
an hourglass type object :)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>		glBegin(GL_LINES);						<font class="theme">// Start Drawing Our Hourglass Using Lines</font>
			glVertex2d(-5,-5);					<font class="theme">// Top Left Of Hourglass</font>
			glVertex2d( 5, 5);					<font class="theme">// Bottom Right Of Hourglass</font>
			glVertex2d( 5,-5);					<font class="theme">// Top Right Of Hourglass</font>
			glVertex2d(-5, 5);					<font class="theme">// Bottom Left Of Hourglass</font>
			glVertex2d(-5, 5);					<font class="theme">// Bottom Left Of Hourglass</font>
			glVertex2d( 5, 5);					<font class="theme">// Bottom Right Of Hourglass</font>
			glVertex2d(-5,-5);					<font class="theme">// Top Left Of Hourglass</font>
			glVertex2d( 5,-5);					<font class="theme">// Top Right Of Hourglass</font>
		glEnd();							<font class="theme">// Done Drawing The Hourglass</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we draw our player.  We reset the modelview matrix, and position the player on the screen.  Notice we position the
player using fx and fy.  We want the player to move smoothly so we use fine positioning.  After positioning
the player, we rotate the player on it's z-axis using player.spin.  We set the color to light green and begin
drawing.  Just like the code we used to draw the hourglass, we draw an 'X'.  Starting at the top left to the bottom right,
then from the top right to the bottom left.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glLoadIdentity();							<font class="theme">// Reset The Modelview Matrix</font>
	glTranslatef(player.fx+20.0f,player.fy+70.0f,0.0f);			<font class="theme">// Move To The Fine Player Position</font>
	glRotatef(player.spin,0.0f,0.0f,1.0f);					<font class="theme">// Rotate Clockwise</font>
	glColor3f(0.0f,1.0f,0.0f);						<font class="theme">// Set Player Color To Light Green</font>
	glBegin(GL_LINES);							<font class="theme">// Start Drawing Our Player Using Lines</font>
		glVertex2d(-5,-5);						<font class="theme">// Top Left Of Player</font>
		glVertex2d( 5, 5);						<font class="theme">// Bottom Right Of Player</font>
		glVertex2d( 5,-5);						<font class="theme">// Top Right Of Player</font>
		glVertex2d(-5, 5);						<font class="theme">// Bottom Left Of Player</font>
	glEnd();								<font class="theme">// Done Drawing The Player</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Drawing low detail objects with lines can be a little frustrating.  I didn't want the player to look boring so I added
the next section of code to create a larger and quicker spinning blade on top of the player that we drew above.  We
rotate on the z-axis by player.spin times 0.5f.  Because we are rotating again, it will appear as if this piece
of the player is moving a little quicker than the first piece of the player.
<br><br>
After doing the new rotation, we set the color to a darker shade of green.  So that it actually looks like the player is
made up of different colors / pieces.  We then draw a large '+' on top of the first piece of the player.  It's larger
because we're using -7 and +7 instead of -5 and +5.  Also notice that instead of drawing from one corner to another,
I'm drawing this piece of the player from left to right and top to bottom.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glRotatef(player.spin*0.5f,0.0f,0.0f,1.0f);				<font class="theme">// Rotate Clockwise</font>
	glColor3f(0.0f,0.75f,0.0f);						<font class="theme">// Set Player Color To Dark Green</font>
	glBegin(GL_LINES);							<font class="theme">// Start Drawing Our Player Using Lines</font>
		glVertex2d(-7, 0);						<font class="theme">// Left Center Of Player</font>
		glVertex2d( 7, 0);						<font class="theme">// Right Center Of Player</font>
		glVertex2d( 0,-7);						<font class="theme">// Top Center Of Player</font>
		glVertex2d( 0, 7);						<font class="theme">// Bottom Center Of Player</font>
	glEnd();								<font class="theme">// Done Drawing The Player</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
All we have to do now is draw the enemies, and we're done drawing :)  We start off by creating a loop that will loop
through all the enemies visible on the current level.  We calculate how many enemies to draw by multiplying our current
game stage by the games internal level.  Remember that each level has 3 stages, and the maximum value of
the internal level is 3.  So we can have a maximum of 9 enemies.
<br><br>
Inside the loop we reset the modelview matrix, and position the current enemy (enemy[loop1]).  We position the
enemy using it's fine x and y values (fx and fy).  After positioning the current enemy we set the color
to pink and start drawing.
<br><br>
The first line will run from 0, -7 (7 pixels up from the starting location) to -7,0 (7 pixels left of the starting
location).  The second line runs from -7,0 to 0,7 (7 pixels down from the starting location).  The third line runs
from 0,7 to 7,0 (7 pixels to the right of our starting location), and the last line runs from 7,0 back to the beginning
of the first line (7 pixels up from the starting location).  This creates a non spinning pink diamond on the screen.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	for (loop1=0; loop1&lt;(stage*level); loop1++)				<font class="theme">// Loop To Draw Enemies</font>
	{
		glLoadIdentity();						<font class="theme">// Reset The Modelview Matrix</font>
		glTranslatef(enemy[loop1].fx+20.0f,enemy[loop1].fy+70.0f,0.0f);
		glColor3f(1.0f,0.5f,0.5f);					<font class="theme">// Make Enemy Body Pink</font>
		glBegin(GL_LINES);						<font class="theme">// Start Drawing Enemy</font>
			glVertex2d( 0,-7);					<font class="theme">// Top Point Of Body</font>
			glVertex2d(-7, 0);					<font class="theme">// Left Point Of Body</font>
			glVertex2d(-7, 0);					<font class="theme">// Left Point Of Body</font>
			glVertex2d( 0, 7);					<font class="theme">// Bottom Point Of Body</font>
			glVertex2d( 0, 7);					<font class="theme">// Bottom Point Of Body</font>
			glVertex2d( 7, 0);					<font class="theme">// Right Point Of Body</font>
			glVertex2d( 7, 0);					<font class="theme">// Right Point Of Body</font>
			glVertex2d( 0,-7);					<font class="theme">// Top Point Of Body</font>
		glEnd();							<font class="theme">// Done Drawing Enemy Body</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We don't want the enemy to look boring either so we'll add a dark red spinning blade ('X') on top of the diamond that
we just drew.  We rotate on the z-axis by enemy[loop1].spin, and then draw the 'X'.  We start at the top left
and draw a line to the bottom right.  Then we draw a second line from the top right to the bottom left.  The two lines
cross eachother creating an 'X' (or blade ... grin).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>		glRotatef(enemy[loop1].spin,0.0f,0.0f,1.0f);			<font class="theme">// Rotate The Enemy Blade</font>
		glColor3f(1.0f,0.0f,0.0f);					<font class="theme">// Make Enemy Blade Red</font>
		glBegin(GL_LINES);						<font class="theme">// Start Drawing Enemy Blade</font>
			glVertex2d(-7,-7);					<font class="theme">// Top Left Of Enemy</font>
			glVertex2d( 7, 7);					<font class="theme">// Bottom Right Of Enemy</font>
			glVertex2d(-7, 7);					<font class="theme">// Bottom Left Of Enemy</font>
			glVertex2d( 7,-7);					<font class="theme">// Top Right Of Enemy</font>
		glEnd();							<font class="theme">// Done Drawing Enemy Blade</font>
	}
	return TRUE;								<font class="theme">// Everything Went OK</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
I added the KillFont() command to the end of KillGLWindow().  This makes sure the font display list is
destroyed when the window is destroyed.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid KillGLWindow(GLvoid)							<font class="theme">// Properly Kill The Window</font>
{
	if (fullscreen)								<font class="theme">// Are We In Fullscreen Mode?</font>
	{
		ChangeDisplaySettings(NULL,0);					<font class="theme">// If So Switch Back To The Desktop</font>
		ShowCursor(TRUE);						<font class="theme">// Show Mouse Pointer</font>
	}

	if (hRC)								<font class="theme">// Do We Have A Rendering Context?</font>
	{
		if (!wglMakeCurrent(NULL,NULL))					<font class="theme">// Are We Able To Release The DC And RC Contexts?</font>
		{
			MessageBox(NULL,"Release Of DC And RC Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		}

		if (!wglDeleteContext(hRC))					<font class="theme">// Are We Able To Delete The RC?</font>
		{
			MessageBox(NULL,"Release Rendering Context Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		}
		hRC=NULL;							<font class="theme">// Set RC To NULL</font>
	}

	if (hDC &amp;&amp; !ReleaseDC(hWnd,hDC))					<font class="theme">// Are We Able To Release The DC</font>
	{
		MessageBox(NULL,"Release Device Context Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hDC=NULL;							<font class="theme">// Set DC To NULL</font>
	}

	if (hWnd &amp;&amp; !DestroyWindow(hWnd))					<font class="theme">// Are We Able To Destroy The Window?</font>
	{
		MessageBox(NULL,"Could Not Release hWnd.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hWnd=NULL;							<font class="theme">// Set hWnd To NULL</font>
	}

	if (!UnregisterClass("OpenGL",hInstance))				<font class="theme">// Are We Able To Unregister Class</font>
	{
		MessageBox(NULL,"Could Not Unregister Class.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hInstance=NULL;							<font class="theme">// Set hInstance To NULL</font>
	}

	KillFont();								<font class="theme">// Kill The Font We Built</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The CreateGLWindow() and WndProc() code hasn't changed so search until you find the following section
of code.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int WINAPI WinMain(	HINSTANCE	hInstance,				<font class="theme">// Instance</font>
			HINSTANCE	hPrevInstance,				<font class="theme">// Previous Instance</font>
			LPSTR		lpCmdLine,				<font class="theme">// Command Line Parameters</font>
			int		nCmdShow)				<font class="theme">// Window Show State</font>
{
	MSG	msg;								<font class="theme">// Windows Message Structure</font>
	BOOL	done=FALSE;							<font class="theme">// Bool Variable To Exit Loop</font>

	<font class="theme">// Ask The User Which Screen Mode They Prefer</font>
	if (MessageBox(NULL,"Would You Like To Run In Fullscreen Mode?", "Start FullScreen?",MB_YESNO|MB_ICONQUESTION)==IDNO)
	{
		fullscreen=FALSE;						<font class="theme">// Windowed Mode</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
This section of code hasn't changed that much.  I changed the window title to read "NeHe's Line Tutorial",
and I added the ResetObjects() command.  This sets the player to the top left point of the grid, and gives
the enemies random starting locations.  The enemies will always start off at least 5 tiles away from you.  TimerInit()
initializes the timer so it's set up properly.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	if (!CreateGLWindow("NeHe's Line Tutorial",640,480,16,fullscreen))	<font class="theme">// Create Our OpenGL Window</font>
	{
		return 0;							<font class="theme">// Quit If Window Was Not Created</font>
	}

	ResetObjects();								<font class="theme">// Set Player / Enemy Starting Positions</font>
	TimerInit();								<font class="theme">// Initialize The Timer</font>

	while(!done)								<font class="theme">// Loop That Runs While done=FALSE</font>
	{
		if (PeekMessage(&amp;msg,NULL,0,0,PM_REMOVE))			<font class="theme">// Is There A Message Waiting?</font>
		{
			if (msg.message==WM_QUIT)				<font class="theme">// Have We Received A Quit Message?</font>
			{
				done=TRUE;					<font class="theme">// If So done=TRUE</font>
			}
			else							<font class="theme">// If Not, Deal With Window Messages</font>
			{
				TranslateMessage(&amp;msg);				<font class="theme">// Translate The Message</font>
				DispatchMessage(&amp;msg);				<font class="theme">// Dispatch The Message</font>
			}
		}
		else								<font class="theme">// If There Are No Messages</font>
		{
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now to make the timing code work.  Notice before we draw our scene we grab the time, and store it in a floating point
variable called start.  We then draw the scene and swap buffers.
<br><br>
Immediately after we swap the buffers we create a delay.  We do this by checking to see if the current value of the timer
(TimerGetTime( )) is less than our starting value plus the game stepping speed times 2.  If the current timer value
is less than the value we want, we endlessly loop until the current timer value is equal to or greater than the value
we want.  This slows down REALLY fast systems.
<br><br>
Because we use the stepping speed (set by the value of adjust) the program will always run the same speed.  For
example, if our stepping speed was 1 we would wait until the timer was greater than or equal to 2 (1*2).  But if we
increased the stepping speed to 2 (causing the player to move twice as many pixels at a time), the delay is increased to
4 (2*2).  So even though we are moving twice as fast, the delay is twice as long, so the game still runs the same speed :)
<br><br>
One thing alot of people like to do is take the current time, and subtract the old time to find out how much time has
passed.  Then they move objects a certain distance based on the amount of time that has passed.  Unfortunately I can't
do that in this program because the fine movement has to be exact so that the player can line up with the lines on the
grid.  If the current fine x position was 59 and the computer decided the player needed to move two pixels, the player
would never line up with the vertical line at position 60 on the grid.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			float start=TimerGetTime();				<font class="theme">// Grab Timer Value Before We Draw</font>

			<font class="theme">// Draw The Scene.  Watch For ESC Key And Quit Messages From DrawGLScene()</font>
			if ((active &amp;&amp; !DrawGLScene()) || keys[VK_ESCAPE])	<font class="theme">// Active?  Was There A Quit Received?</font>
			{
				done=TRUE;					<font class="theme">// ESC or DrawGLScene Signalled A Quit</font>
			}
			else							<font class="theme">// Not Time To Quit, Update Screen</font>
			{
				SwapBuffers(hDC);				<font class="theme">// Swap Buffers (Double Buffering)</font>
			}

			while(TimerGetTime()&lt;start+float(steps[adjust]*2.0f)) {}<font class="theme">// Waste Cycles On Fast Systems</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The following code hasn't really changed.  I changed the title of the window to read "NeHe's Line Tutorial".
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			if (keys[VK_F1])					<font class="theme">// Is F1 Being Pressed?</font>
			{
				keys[VK_F1]=FALSE;				<font class="theme">// If So Make Key FALSE</font>
				KillGLWindow();					<font class="theme">// Kill Our Current Window</font>
				fullscreen=!fullscreen;				<font class="theme">// Toggle Fullscreen / Windowed Mode</font>
				<font class="theme">// Recreate Our OpenGL Window</font>
				if (!CreateGLWindow("NeHe's Line Tutorial",640,480,16,fullscreen))
				{
					return 0;				<font class="theme">// Quit If Window Was Not Created</font>
				}
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
This section of code checks to see if the A key is being pressed and not held.  If 'A' is being pressed, ap
becomes TRUE (telling our program that A is being held down), and anti is toggled from TRUE to FALSE or FALSE to
TRUE.  Remember that anti is checked in the drawing code to see if antialiasing is turned on or off.
<br><br>
If the 'A' key has been released (is FALSE) then ap is set to FALSE telling the program that the key is no longer
being held down.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			if (keys['A'] &amp;&amp; !ap)					<font class="theme">// If 'A' Key Is Pressed And Not Held</font>
			{
				ap=TRUE;					<font class="theme">// ap Becomes TRUE</font>
				anti=!anti;					<font class="theme">// Toggle Antialiasing</font>
			}
			if (!keys['A'])						<font class="theme">// If 'A' Key Has Been Released</font>
			{
				ap=FALSE;					<font class="theme">// ap Becomes FALSE</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now to move the enemies.  I wanted to keep this section of code really simple.  There is very little logic.  Basically,
the enemies check to see where you are and they move in that direction.  Because I'm checking the actual x and
y position of the players and no the fine values, the players seem to have a little more intelligence.  They may
see that you are way at the top of the screen.  But by the time they're fine value actually gets to the top of the screen,
you could already be in a different location.  This causes them to sometimes move past you, before they realize you are
no longer where they thought you were.  May sound like they're really dumb, but because they sometimes move past you, you
might find yourself being boxed in from all directions.
<br><br>
We start off by checking to make sure the game isn't over, and that the window (if in windowed mode) is still active.
By checking active the enemies wont move if the screen is minimized.  This gives you a convenient pause feature
when you need to take a break :)
<br><br>
After we've made sure the enemies should be moving, we create a loop.  The loop will loop through all the visible
enemies.  Again we calculate how many enemies should be on the screen by multiplying the current stage by the
current internal level.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			if (!gameover &amp;&amp; active)				<font class="theme">// If Game Isn't Over And Programs Active Move Objects</font>
			{
				for (loop1=0; loop1&lt;(stage*level); loop1++)	<font class="theme">// Loop Through The Different Stages</font>
				{
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we move the current enemy (enemy[loop1]).  We start off by checking to see if the enemy's x position is
less than the players x position and we make sure that the enemy's fine y position lines up with a horizontal line.
We can't move the enemy left and right if it's not on a horizontal line.  If we did, the enemy would cut right through
the middle of the boxes, making the game even more difficult :)
<br><br>
If the enemy x position is less than the player x position, and the enemy's fine y position is lined
up with a horizontal line, we move the enemy x position one block closer to the current player position.
<br><br>
We also do this to move the enemy left, down and up.  When moving up and down, we need to make sure the enemy's fine
x position lines up with a vertical line.  We don't want the enemy cutting through the top or bottom of a box.
<br><br>
Note: changing the enemies x and y positions doesn't move the enemy on the screen.  Remember that when we
drew the enemies we used the fine positions to place the enemies on the screen.  Changing the x and y
positions just tells our program where we WANT the enemies to move.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>					if ((enemy[loop1].x&lt;player.x) &amp;&amp; (enemy[loop1].fy==enemy[loop1].y*40))
					{
						enemy[loop1].x++;		<font class="theme">// Move The Enemy Right</font>
					}

					if ((enemy[loop1].x&gt;player.x) &amp;&amp; (enemy[loop1].fy==enemy[loop1].y*40))
					{
						enemy[loop1].x--;		<font class="theme">// Move The Enemy Left</font>
					}

					if ((enemy[loop1].y&lt;player.y) &amp;&amp; (enemy[loop1].fx==enemy[loop1].x*60))
					{
						enemy[loop1].y++;		<font class="theme">// Move The Enemy Down</font>
					}

					if ((enemy[loop1].y&gt;player.y) &amp;&amp; (enemy[loop1].fx==enemy[loop1].x*60))
					{
						enemy[loop1].y--;		<font class="theme">// Move The Enemy Up</font>
					}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
This code does the actual moving.  We check to see if the variable delay is greater than 3 minus the current
internal level.  That way if our current level is 1 the program will loop through 2 (3-1) times before the enemies
actually move.  On level 3 (the highest value that level can be) the enemies will move the same speed as the
player (no delays).  We also make sure that hourglass.fx isn't the same as 2.  Remember, if hourglass.fx
is equal to 2, that means the player has touched the hourglass.  Meaning the enemies shouldn't be moving.
<br><br>
If delay is greater than 3-level and the player hasn't touched the hourglass, we move the enemies by
adjusting the enemy fine positions (fx and fy).  The first thing we do is set delay back to 0 so that
we can start the delay counter again.  Then we set up a loop that loops through all the visible enemies (stage
times level).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>					if (delay&gt;(3-level) &amp;&amp; (hourglass.fx!=2))		<font class="theme">// If Our Delay Is Done And Player Doesn't Have Hourglass</font>
					{
						delay=0;					<font class="theme">// Reset The Delay Counter Back To Zero</font>
						for (loop2=0; loop2&lt;(stage*level); loop2++)	<font class="theme">// Loop Through All The Enemies</font>
						{
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
To move the enemies we check to see if the current enemy (enemy[loop2]) needs to move in a specific direction to
move towards the enemy x and y position we want.  In the first line below we check to see if the enemy fine
position on the x-axis is less than the desired x position times 60.  (remember each grid crossing is 60 pixels
apart from left to right).  If the fine x position is less than the enemy x position times 60 we move the
enemy to the right by steps[adjust] (the speed our game is set to play at based on the value of adjust).
We also rotate the enemy clockwise to make it look like it's rolling to the right.  We do this by increasing
enemy[loop2].spin by steps[adjust] (the current game speed based on adjust).
<br><br>
We then check to see if the enemy fx value is greater than the enemy x position times 60 and if so, we
move the enemy left and spin the enemy left.
<br><br>
We do the same when moving the enemy up and down.  If the enemy y position is less than the enemy fy
position times 40 (40 pixels between grid points up and down) we increase the enemy fy position, and rotate the
enemy to make it look like it's rolling downwards.  Lastly if the enemy y position is greater than the enemy
fy position times 40 we decrease the value of fy to move the enemy upward.  Again, the enemy spins to make
it look like it's rolling upward.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>							if (enemy[loop2].fx&lt;enemy[loop2].x*60)	<font class="theme">// Is Fine Position On X Axis Lower Than Intended Position?</font>
							{
								enemy[loop2].fx+=steps[adjust];	<font class="theme">// If So, Increase Fine Position On X Axis</font>
								enemy[loop2].spin+=steps[adjust];	<font class="theme">// Spin Enemy Clockwise</font>
							}
							if (enemy[loop2].fx&gt;enemy[loop2].x*60)	<font class="theme">// Is Fine Position On X Axis Higher Than Intended Position?</font>
							{
								enemy[loop2].fx-=steps[adjust];	<font class="theme">// If So, Decrease Fine Position On X Axis</font>
								enemy[loop2].spin-=steps[adjust];	<font class="theme">// Spin Enemy Counter Clockwise</font>
							}
							if (enemy[loop2].fy&lt;enemy[loop2].y*40)	<font class="theme">// Is Fine Position On Y Axis Lower Than Intended Position?</font>
							{
								enemy[loop2].fy+=steps[adjust];	<font class="theme">// If So, Increase Fine Position On Y Axis</font>
								enemy[loop2].spin+=steps[adjust];	<font class="theme">// Spin Enemy Clockwise</font>
							}
							if (enemy[loop2].fy&gt;enemy[loop2].y*40)	<font class="theme">// Is Fine Position On Y Axis Higher Than Intended Position?</font>
							{
								enemy[loop2].fy-=steps[adjust];	<font class="theme">// If So, Decrease Fine Position On Y Axis</font>
								enemy[loop2].spin-=steps[adjust];	<font class="theme">// Spin Enemy Counter Clockwise</font>
							}
						}
					}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
After moving the enemies we check to see if any of them have hit the player.  We want accuracy so we compare the enemy
fine positions with the player fine positions.  If the enemy fx position equals the player fx position and
the enemy fy position equals the player fy position the player is DEAD :)
<br><br>
If the player is dead, we decrease lives.  Then we check to make sure the player isn't out of lives by checking to
see if lives equals 0.  If lives does equal zero, we set gameover to TRUE.
<br><br>
We then reset our objects by calling ResetObjects(), and play the death sound.
<br><br>
Sound is new in this tutorial.  I've decided to use the most basic sound routine available... PlaySound().  PlaySound()
takes three parameters.  First we give it the name of the file we want to play.  In this case we want it to play the
Die .WAV file in the Data directory.  The second parameter can be ignored.  We'll set it to NULL.  The third parameter
is the flag for playing the sound.  The two most common flags are:  SND_SYNC which stops everything else until the sound
is done playing, and SND_ASYNC, which plays the sound, but doesn't stop the program from running.  We want a little delay
after the player dies so we use SND_SYNC.  Pretty easy!
<br><br>
The one thing I forgot to mention at the beginning of the program:  In order for PlaySound() and the timer to work, you
have to include the WINMM.LIB file under PROJECT / SETTINGS / LINK in Visual C++.  Winmm.lib is the Windows Multimedia
Library.  If you don't include this library, you will get error messages when you try to compile the program.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>					<font class="theme">// Are Any Of The Enemies On Top Of The Player?</font>
					if ((enemy[loop1].fx==player.fx) &amp;&amp; (enemy[loop1].fy==player.fy))
					{
						lives--;			<font class="theme">// If So, Player Loses A Life</font>

						if (lives==0)			<font class="theme">// Are We Out Of Lives?</font>
						{
							gameover=TRUE;		<font class="theme">// If So, gameover Becomes TRUE</font>
						}

						ResetObjects();			<font class="theme">// Reset Player / Enemy Positions</font>
						PlaySound("Data/Die.wav", NULL, SND_SYNC);	<font class="theme">// Play The Death Sound</font>
					}
				}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we can move the player.  In the first line of code below we check to see if the right arrow is being pressed,
player.x is less than 10 (don't want to go off the grid), that player.fx equals player.x times 60
(lined up with a grid crossing on the x-axis, and that player.fy equals player.y times 40 (player is lined
up with a grid crossing on the y-axis).
<br><br>
If we didn't make sure the player was at a crossing, and we allowed the player to move anyways, the player would cut
right through the middle of boxes, just like the enemies would have done if we didn't make sure they were lined up with
a vertical or horizontal line.  Checking this also makes sure the player is done moving before we move to a new location.
<br><br>
If the player is at a grid crossing (where a vertical and horizontal lines meet) and he's not to far right, we mark the
current horizontal line that we are on as being traced over.  We then increase the player.x value by one, causing
the new player position to be one box to the right.
<br><br>
We do the same thing while moving left, down and up.  When moving left, we make sure the player wont be going off the left
side of the grid.  When moving down we make sure the player wont be leaving the bottom of the grid, and when moving up
we make sure the player doesn't go off the top of the grid.
<br><br>
When moving left and right we make the horizontal line (hline[ ] [ ]) under us TRUE meaning it's been traced.
When moving up and down we make the vertical line (vline[ ] [ ]) under us TRUE meaning it has been traced.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>				if (keys[VK_RIGHT] &amp;&amp; (player.x&lt;10) &amp;&amp; (player.fx==player.x*60) &amp;&amp; (player.fy==player.y*40))
				{
					hline[player.x][player.y]=TRUE;		<font class="theme">// Mark The Current Horizontal Border As Filled</font>
					player.x++;				<font class="theme">// Move The Player Right</font>
				}
				if (keys[VK_LEFT] &amp;&amp; (player.x&gt;0) &amp;&amp; (player.fx==player.x*60) &amp;&amp; (player.fy==player.y*40))
				{
					player.x--;				<font class="theme">// Move The Player Left</font>
					hline[player.x][player.y]=TRUE;		<font class="theme">// Mark The Current Horizontal Border As Filled</font>
				}
				if (keys[VK_DOWN] &amp;&amp; (player.y&lt;10) &amp;&amp; (player.fx==player.x*60) &amp;&amp; (player.fy==player.y*40))
				{
					vline[player.x][player.y]=TRUE;		<font class="theme">// Mark The Current Verticle Border As Filled</font>
					player.y++;				<font class="theme">// Move The Player Down</font>
				}
				if (keys[VK_UP] &amp;&amp; (player.y&gt;0) &amp;&amp; (player.fx==player.x*60) &amp;&amp; (player.fy==player.y*40))
				{
					player.y--;				<font class="theme">// Move The Player Up</font>
					vline[player.x][player.y]=TRUE;		<font class="theme">// Mark The Current Verticle Border As Filled</font>
				}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We increase / decrease the player fine fx and fy variables the same way we increase / decreased the enemy
fine fx and fy variables.
<br><br>
If the player fx value is less than the player x value times 60 we increase the player fx position
by the step speed our game is running at based on the value of adjust.
<br><br>
If the player fx value is greater than the player x value times 60 we decrease the player fx position
by the step speed our game is running at based on the value of adjust.
<br><br>
If the player fy value is less than the player y value times 40 we increase the player fy position
by the step speed our game is running at based on the value of adjust.
<br><br>
If the player fy value is greater than the player y value times 40 we decrease the player fy position
by the step speed our game is running at based on the value of adjust.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>				if (player.fx&lt;player.x*60)			<font class="theme">// Is Fine Position On X Axis Lower Than Intended Position?</font>
				{
					player.fx+=steps[adjust];		<font class="theme">// If So, Increase The Fine X Position</font>
				}
				if (player.fx&gt;player.x*60)			<font class="theme">// Is Fine Position On X Axis Greater Than Intended Position?</font>
				{
					player.fx-=steps[adjust];		<font class="theme">// If So, Decrease The Fine X Position</font>
				}
				if (player.fy&lt;player.y*40)			<font class="theme">// Is Fine Position On Y Axis Lower Than Intended Position?</font>
				{
					player.fy+=steps[adjust];		<font class="theme">// If So, Increase The Fine Y Position</font>
				}
				if (player.fy&gt;player.y*40)			<font class="theme">// Is Fine Position On Y Axis Lower Than Intended Position?</font>
				{
					player.fy-=steps[adjust];		<font class="theme">// If So, Decrease The Fine Y Position</font>
				}
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
If the game is over the following bit of code will run.  We check to see if the spacebar is being pressed.  If it is
we set gameover to FALSE (starting the game over).  We set filled to TRUE.  This causes the game to think
we've finished a stage, causing the player to be reset, along with the enemies.
<br><br>
We set the starting level to 1, along with the actual displayed level (level2).  We set stage to 0.  The
reason we do this is because after the computer sees that the grid has been filled in, it will think you finished a
stage, and will increase stage by 1.  Because we set stage to 0, when the stage increases it will become
1 (exactly what we want).  Lastly we set lives back to 5.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			else							<font class="theme">// Otherwise</font>
			{
				if (keys[' '])					<font class="theme">// If Spacebar Is Being Pressed</font>
				{
					gameover=FALSE;				<font class="theme">// gameover Becomes FALSE</font>
					filled=TRUE;				<font class="theme">// filled Becomes TRUE</font>
					level=1;				<font class="theme">// Starting Level Is Set Back To One</font>
					level2=1;				<font class="theme">// Displayed Level Is Also Set To One</font>
					stage=0;				<font class="theme">// Game Stage Is Set To Zero</font>
					lives=5;				<font class="theme">// Lives Is Set To Five</font>
				}
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below checks to see if the filled flag is TRUE (meaning the grid has been filled in).  filled
can be set to TRUE one of two ways.  Either the grid is filled in completely and filled becomes TRUE or the game
has ended but the spacebar was pressed to restart it (code above).
<br><br>
If filled is TRUE, the first thing we do is play the cool level complete tune.  I've already explained how
PlaySound() works.  This time we'll be playing the Complete .WAV file in the DATA directory.  Again, we use SND_SYNC
so that there is a delay before the game starts on the next stage.
<br><br>
After the sound has played, we increase stage by one, and check to make sure stage isn't greater than 3.
If stage is greater than 3 we set stage to 1, and increase the internal level and visible level by one.
<br><br>
If the internal level is greater than 3 we set the internal leve (level) to 3, and increase lives by 1.
If you're amazing enough to get past level 3 you deserve a free life :).  After increasing lives we check to make
sure the player doesn't have more than 5 lives.  If lives is greater than 5 we set lives back to 5.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			if (filled)						<font class="theme">// Is The Grid Filled In?</font>
			{
				PlaySound("Data/Complete.wav", NULL, SND_SYNC);	<font class="theme">// If So, Play The Level Complete Sound</font>
				stage++;					<font class="theme">// Increase The Stage</font>
				if (stage&gt;3)					<font class="theme">// Is The Stage Higher Than 3?</font>
				{
					stage=1;				<font class="theme">// If So, Set The Stage To One</font>
					level++;				<font class="theme">// Increase The Level</font>
					level2++;				<font class="theme">// Increase The Displayed Level</font>
					if (level&gt;3)				<font class="theme">// Is The Level Greater Than 3?</font>
					{
						level=3;			<font class="theme">// If So, Set The Level To 3</font>
						lives++;			<font class="theme">// Give The Player A Free Life</font>
						if (lives&gt;5)			<font class="theme">// Does The Player Have More Than 5 Lives?</font>
						{
							lives=5;		<font class="theme">// If So, Set Lives To Five</font>
						}
					} 
				}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We then reset all the objects (such as the player and enemies).  This places the player back at the top left corner of the
grid, and gives the enemies random locations on the grid.
<br><br>
We create two loops (loop1 and loop2) to loop through the grid.  We set all the vertical and horizontal
lines to FALSE.  If we didn't do this, the next stage would start, and the game would think the grid was still filled in.
<br><br>
Notice the routine we use to clear the grid is similar to the routine we use to draw the grid.  We have to make sure the
lines are not being drawn to far right or down.  That's why we check to make sure that loop1 is less than 10
before we reset the horizontal lines, and we check to make sure that loop2 is less than 10 before we reset the
vertical lines.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>				ResetObjects();					<font class="theme">// Reset Player / Enemy Positions</font>

				for (loop1=0; loop1&lt;11; loop1++)		<font class="theme">// Loop Through The Grid X Coordinates</font>
				{
					for (loop2=0; loop2&lt;11; loop2++)	<font class="theme">// Loop Through The Grid Y Coordinates</font>
					{
						if (loop1&lt;10)			<font class="theme">// If X Coordinate Is Less Than 10</font>
						{
							hline[loop1][loop2]=FALSE;	<font class="theme">// Set The Current Horizontal Value To FALSE</font>
						}
						if (loop2&lt;10)			<font class="theme">// If Y Coordinate Is Less Than 10</font>
						{
							vline[loop1][loop2]=FALSE;	<font class="theme">// Set The Current Vertical Value To FALSE</font>
						}
					}
				}
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we check to see if the player has hit the hourglass.  If the fine player fx value is equal to the hourglass
x value times 60 and the fine player fy value is equal to the hourglass y value times 40 AND
hourglass.fx is equal to 1 (meaning the hourglass is displayed on the screen), the code below runs.
<br><br>
The first line of code is PlaySound("Data/freeze.wav",NULL, SND_ASYNC | SND_LOOP).  This line plays the freeze .WAV file
in the DATA directory.  Notice we are using SND_ASYNC this time.  We want the freeze sound to play without the game
stopping.  SND_LOOP keeps the sound playing endlessly until we tell it to stop playing, or until another sound is played.
<br><br>
After we have started the sound playing, we set hourglass.fx to 2.  When hourglass.fx equals 2 the hourglass
will no longer be drawn, the enemies will stop moving, and the sound will loop endlessly.
<br><br>
We also set hourglass.fy to 0.  hourglass.fy is a counter.  When it hits a certain value, the value of
hourglass.fx will change.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			<font class="theme">// If The Player Hits The Hourglass While It's Being Displayed On The Screen</font>
			if ((player.fx==hourglass.x*60) &amp;&amp; (player.fy==hourglass.y*40) &amp;&amp; (hourglass.fx==1))
			{
				<font class="theme">// Play Freeze Enemy Sound</font>
				PlaySound("Data/freeze.wav", NULL, SND_ASYNC | SND_LOOP);
				hourglass.fx=2;					<font class="theme">// Set The hourglass fx Variable To Two</font>
				hourglass.fy=0;					<font class="theme">// Set The hourglass fy Variable To Zero</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
This bit of code increases the player spin value by half the speed that the game runs at.  If player.spin is
greater than 360.0f we subtract 360.0f from player.spin.  Keeps the value of player.spin from getting to
high.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			player.spin+=0.5f*steps[adjust];			<font class="theme">// Spin The Player Clockwise</font>
			if (player.spin&gt;360.0f)					<font class="theme">// Is The spin Value Greater Than 360?</font>
			{
				player.spin-=360;				<font class="theme">// If So, Subtract 360</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below decreases the hourglass spin value by 1/4 the speed that the game is running at.  If hourglass.spin
is less than 0.0f we add 360.0f.  We don't want hourglass.spin to become a negative number.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			hourglass.spin-=0.25f*steps[adjust];			<font class="theme">// Spin The Hourglass Counter Clockwise</font>
			if (hourglass.spin&lt;0.0f)				<font class="theme">// Is The spin Value Less Than 0?</font>
			{
				hourglass.spin+=360.0f;				<font class="theme">// If So, Add 360</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The first line below increased the hourglass counter that I was talking about.  hourglass.fy is increased by
the game speed (game speed is the steps value based on the value of adjust).
<br><br>
The second line checks to see if hourglass.fx is equal to 0 (non visible) and the hourglass counter
(hourglass.fy) is greater than 6000 divided by the current internal level (level).
<br><br>
If the fx value is 0 and the counter is greater than 6000 divided by the internal level we play the hourglass
.WAV file in the DATA directory.  We don't want the action to stop so we use SND_ASYNC.  We won't loop the sound this
time though, so once the sound has played, it wont play again.
<br><br>
After we've played the sound we give the hourglass a random value on the x-axis.  We add one to the random value so
that the hourglass doesn't appear at the players starting position at the top left of the grid.  We also give the
hourglass a random value on the y-axis.  We set hourglass.fx to 1 this makes the hourglass appear on the screen
at it's new location.  We also set hourglass.fy back to zero so it can start counting again.
<br><br>
This causes the hourglass to appear on the screen after a fixed amount of time.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			hourglass.fy+=steps[adjust];				<font class="theme">// Increase The hourglass fy Variable</font>
			if ((hourglass.fx==0) &amp;&amp; (hourglass.fy&gt;6000/level))	<font class="theme">// Is The hourglass fx Variable Equal To 0 And The fy</font>
			{							<font class="theme">// Variable Greater Than 6000 Divided By The Current Level?</font>
				PlaySound("Data/hourglass.wav", NULL, SND_ASYNC);	<font class="theme">// If So, Play The Hourglass Appears Sound</font>
				hourglass.x=rand()%10+1;			<font class="theme">// Give The Hourglass A Random X Value</font>
				hourglass.y=rand()%11;				<font class="theme">// Give The Hourglass A Random Y Value</font>
				hourglass.fx=1;					<font class="theme">// Set hourglass fx Variable To One (Hourglass Stage)</font>
				hourglass.fy=0;					<font class="theme">// Set hourglass fy Variable To Zero (Counter)</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
If hourglass.fx is equal to zero and hourglass.fy is greater than 6000 divided by the current internal
level (level) we set hourglass.fx back to 0, causing the hourglass to disappear.  We also set
hourglass.fy to 0 so it can start counting once again.
<br><br>
This causes the hourglass to disappear if you don't get it after a certain amount of time.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			if ((hourglass.fx==1) &amp;&amp; (hourglass.fy&gt;6000/level))	<font class="theme">// Is The hourglass fx Variable Equal To 1 And The fy</font>
			{							<font class="theme">// Variable Greater Than 6000 Divided By The Current Level?</font>
				hourglass.fx=0;					<font class="theme">// If So, Set fx To Zero (Hourglass Will Vanish)</font>
				hourglass.fy=0;					<font class="theme">// Set fy to Zero (Counter Is Reset)</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we check to see if the 'freeze enemy' timer has run out after the player has touched the hourglass.
<br><br>
if hourglass.fx equal 2 and hourglass.fy is greater than 500 plus 500 times the current internal level
we kill the timer sound that we started playing endlessly.  We kill the sound with the command PlaySound(NULL, NULL, 0).
We set hourglass.fx back to 0, and set hourglass.fy to 0.  Setting fx and fy to 0 starts the
hourglass cycle from the beginning.  fy will have to hit 6000 divided by the current internal level before the
hourglass appears again.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			if ((hourglass.fx==2) &amp;&amp; (hourglass.fy&gt;500+(500*level)))<font class="theme">// Is The hourglass fx Variable Equal To 2 And The fy</font>
			{							<font class="theme">// Variable Greater Than 500 Plus 500 Times The Current Level?</font>
				PlaySound(NULL, NULL, 0);			<font class="theme">// If So, Kill The Freeze Sound</font>
				hourglass.fx=0;					<font class="theme">// Set hourglass fx Variable To Zero</font>
				hourglass.fy=0;					<font class="theme">// Set hourglass fy Variable To Zero</font>
			}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The last thing to do is increase the variable delay.  If you remember, delay is used to
update the player movement and animation.  If our program has finished, we kill the window and return
to the desktop.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			delay++;						<font class="theme">// Increase The Enemy Delay Counter</font>
		}
	}

	<font class="theme">// Shutdown</font>
	KillGLWindow();								<font class="theme">// Kill The Window</font>
	return (msg.wParam);							<font class="theme">// Exit The Program</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
I spent a long time writing this tutorial.  It started out as a simple line tutorial, and flourished into
an entertaining mini game.  Hopefully you can use what you have learned in this tutorial in GL projects of
your own.  I know alot of you have been asking about TILE based games.  Well you can't get more tiled than
this :)  I've also gotten alot of emails asking how to do exact pixel plotting.  I think I've got it
covered :)  Most importantly, this tutorial not only teaches you new things about OpenGL, it also teaches
you how to use simple sounds to add excitement to your visual works of art!  I hope you've enjoyed this
tutorial.  If you feel I have incorrectly commented something or that the code could be done better in
some sections, please let me know.  I want to make the best OpenGL tutorials I can and I'm interested
in hearing your feedback.
<br><br>
Please note, this was an extremely large projects.  I tried to comment everything as clearly as possible, but putting
what things into words isn't as easy as it may seem.  I know how everything works off by heart, but trying to explain
is a different story :)  If you've read through the tutorial and have a better way to word things, or if you feel diagrams
might help out, please send me suggestions.  I want this tutorial to be easy to follow through.  Also note that this is
not a beginner tutorial.  If you haven't read through the previous tutorials please don't email me with questions until
you have.  Thanks.
<br><br>
<b>Jeff Molofee</b> (<b>NeHe</b>)
<br><br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/vc/lesson21.zip">Visual C++</a> Code For This Lesson.
<br><br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/bcb6/lesson21_bcb6.zip">Borland C++ Builder 6</a> Code For This Lesson. ( Conversion by <a href="mailto:christian@tugzip.com">Christian Kindahl</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/cwarrior/lesson21.zip">Code Warrior 5.3</a> Code For This Lesson. ( Conversion by <a href="mailto:DelusionalBeing@hotmail.com">Scott Lupton</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/delphi/lesson21.zip">Delphi</a> Code For This Lesson. ( Conversion by <a href="mailto:michal_praha@seznam.cz">Michal Tucek</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/devc/lesson21.zip">Dev C++</a> Code For This Lesson. ( Conversion by <a href="mailto:danprogram@hotmail.com">Dan</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/euphoria/lesson21.zip">Euphoria</a> Code For This Lesson. ( Conversion by <a href="mailto:1evan@sbcglobal.net">Evan Marshall</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/irix/lesson21.zip">Irix</a> Code For This Lesson. ( Conversion by <a href="mailto:christop@fhw.gr">Dimi</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/java/lesson21.zip">Java</a> Code For This Lesson. ( Conversion by <a href="mailto:jeff@consunet.com.au">Jeff Kirby</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/lccwin32/lccwin32_lesson21.zip">LCC Win32</a> Code For This Lesson. ( Conversion by <a href="mailto:rwishlaw@shaw.ca">Robert Wishlaw</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/linux/lesson21.tar.gz">Linux</a> Code For This Lesson. ( Conversion by <a href="mailto:marius@hot.ee">Marius Andra</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/linuxglx/lesson21.tar.gz">Linux/GLX</a> Code For This Lesson. ( Conversion by <a href="mailto:miqster@gmx.net">Mihael Vrbanec</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/linuxsdl/lesson21.tar.gz">Linux/SDL</a> Code For This Lesson. ( Conversion by <a href="mailto:leggett@eecs.tulane.edu">Ti Leggett</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/lwjgl/lesson21.jar">LWJGL</a> Code For This Lesson. ( Conversion by <a href="mailto:mark.bernard@rogers.com">Mark Bernard</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/mac/lesson21.sit">Mac OS</a> Code For This Lesson. ( Conversion by <a href="mailto:asp@usc.edu">Anthony Parker</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/macosxcocoa/lesson21.zip">Mac OS X/Cocoa</a> Code For This Lesson. ( Conversion by <a href="mailto:blb@pobox.com">Bryan Blackburn</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/masm/lesson21.zip">MASM</a> Code For This Lesson. ( Conversion by <a href="mailto:chris.j84@free.fr">Christophe</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/openil/lesson21.zip">Visual C++ / OpenIL</a> Code For This Lesson. ( Conversion by <a href="mailto:doomwiz@ticnet.com">Denton Woods</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/vs_net/lesson21.zip">Visual Studio .NET</a> Code For This Lesson. ( Conversion by <a href="mailto:ultimatezeus@hotmail.com">Grant James</a> )<br>
<br><br>
<br><br>
<table border="0" width="100%">
<tbody><tr><td align="left" width="50%"><b><font size="-1"><a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=20">&lt; Lesson 20</a></font></b></td>
<td align="right" width="50%"><b><font size="-1"><a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=22">Lesson 22 &gt;</a></font></b></td>
</tr></tbody></table>
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table>

</body></html>