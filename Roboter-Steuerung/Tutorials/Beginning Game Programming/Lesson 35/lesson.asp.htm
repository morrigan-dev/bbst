<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">



<title>NeHe Productions: OpenGL Lesson #35</title>
<meta name="author" content="Jeff Molofee">
<meta name="description" content="OpenGL Tutorials, Demos, Games and More...">
<meta name="keywords" content="opengl, tutorial, article, demo, game, blend, texturemap, lighting, contest, 3D">
<link rel="stylesheet" type="text/css" href="lesson.asp-Dateien/rgb.css">
</head><body bgcolor="black" link="#aaccff" text="white" vlink="#aaccff">

<table border="0" width="100%"><tbody><tr><td align="center">
<!-- Begin -  Site: GameDev.net Zone: NeHe 728x90 -->
<script language="javascript" type="text/javascript">
<!--
var browName = navigator.appName;
var SiteID = 1;
var ZoneID = 4;
var browDateTime = (new Date()).getTime();
if (browName=='Netscape')
{
document.write('<s'+'cript lang' + 'uage="jav' + 'ascript" src="http://www.gamedev.net/banman/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;Browser=NETSCAPE4&amp;PageID=61252&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '">'); document.write('</'+'scr'+'ipt>');
}
if (browName!='Netscape')
{
document.write('<s'+'cript lang' + 'uage="jav' + 'ascript" src="http://www.gamedev.net/banman/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;PageID=61252&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '">'); document.write('</'+'scr'+'ipt>');
}
// --> 
</script><script language="javascript" src="lesson.asp-Dateien/a.js"></script><a href="http://www.gamedev.net/banman/a.aspx?Task=Click&amp;ZoneID=4&amp;CampaignID=609&amp;AdvertiserID=11&amp;BannerID=673&amp;SiteID=1&amp;RandomNumber=1448358307&amp;Keywords=" target="_Blank"><img src="lesson.asp-Dateien/BGPleader.png" alt="" align="Center" border="0" height="90" width="728"></a><br>
<noscript> <a
href="http://www.gamedev.net/banman/a.aspx?ZoneID=4&amp;Task=Click&amp;Mode=HTML&amp;SiteID=1&amp;PageID=70554"
target="_blank"> <img
src="http://www.gamedev.net/banman/a.aspx?ZoneID=4&amp;Task=Get&amp;Mode=HTML&amp;SiteID=1&amp;PageID=70554"
width="728" height="90" border="0" alt=""></a>
</noscript>
<!-- End -  Site: GameDev.net Zone: NeHe 728x90 --></td></tr></tbody></table><br>

<table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tinylogo" height="130" width="326"><img src="lesson.asp-Dateien/blank.gif" alt="NeHe Productions" height="130" width="326"></td><td class="indexheading" align="center" valign="middle"><font class="text"><font class="theme" size="+3"><b><i>Lesson: 35</i></b></font></font></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">I would like to start off by saying that I am very proud of this tutorial.  When I first got the idea to code an
AVI player in OpenGL thanks to Jonathan de Blok, I had no idea how to open an AVI let alone code an AVI
player.  I started off by flipping through my collection of programming books.  Not one book talked about AVI
files.  I then read everything there was to read about the AVI format in the MSDN.  Lots of useful information
in the MSDN, but I needed more information.
<br><br>
After browsing the net for hours searching for AVI examples, I had just two sites bookmarked.  I'm not going to
say my search engine skills are amazing, but 99.9% of the time I have no problems finding what I'm looking for.
I was absolutely shocked when I realized just how few AVI examples there were!  Most the examples I found
wouldn't compile... A handful of them were way to complex (for me at least), and the rest did the job, but they
were coded in VB, Delphi, etc. (not VC++).
<br><br>
The first page I book marked was an article written by Jonathan Nix titled "AVI Files".  You can
visit it at http://www.gamedev.net/reference/programming/features/avifile/. Huge respect to Jonathan for
writing an extremely brilliant document on the AVI format.  Although I decided to do things differently, his
example code snippets, and clear comments made the learning process alot easier!  The second site is titled
"The AVI Overview" by John F. McGowan, Ph.D..  I could go on and on about how amazing John's page is, but
it's easier if you check it out yourself!  The URL is http://www.jmcgowan.com/avi.html.  His site pretty
much covers everything there is to know about the AVI format!  Thanks to John for making such a
valuable page available to the public.
<br><br>
The last thing I wanted to mention is that NONE of the code has been borrowed, and none of the code has been
copied.  It was written during a 3 day coding spree, using information from the above mentioned sites and
articles.  With that said, I feel it is important to note that my code may not be the BEST way to play an AVI
file.  It may not even be the correct way to play an AVI file, but it does work, and it's easy to use!  If you
dislike the code, my coding style, or if you feel I'm hurting the programming community by releasing this tut,
you have a few options:  1) search the net for alternate resources  2) write your own AVI player OR 3) write a
better tutorial!  Everyone visiting this site should know by now that I'm an average programmer with average
skills (I've stated that on numerous pages throughout the site)!  I code for FUN!  The goal of this site is to
make life easier for the non-elite coder to get started with OpenGL.  The tutorials are merely examples on how
'I' managed to accomplish a specific effect... Nothing more, nothing less!
<br><br>
On to the code...
<br><br>
The first thing you will notice is that we include and link to the Video For Windows header / library.
Big thanks to Microsoft (I can't believe I just said that!).  This library makes opening and playing AVI files
a SNAP!  For now... All you need to know is that you MUST include the vfw.h header file and you must
link to the vfw32.lib library file if you want the code to compile :)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>#include &lt;windows.h&gt;							<font class="theme">// Header File For Windows</font>
#include &lt;gl\gl.h&gt;							<font class="theme">// Header File For The OpenGL32 Library</font>
#include &lt;gl\glu.h&gt;							<font class="theme">// Header File For The GLu32 Library</font>
#include &lt;vfw.h&gt;							<font class="theme">// Header File For Video For Windows</font>
#include "NeHeGL.h"							<font class="theme">// Header File For NeHeGL</font>

#pragma comment( lib, "opengl32.lib" )					<font class="theme">// Search For OpenGL32.lib While Linking</font>
#pragma comment( lib, "glu32.lib" )					<font class="theme">// Search For GLu32.lib While Linking</font>
#pragma comment( lib, "vfw32.lib" )					<font class="theme">// Search For VFW32.lib While Linking</font>

#ifndef CDS_FULLSCREEN							<font class="theme">// CDS_FULLSCREEN Is Not Defined By Some</font>
#define CDS_FULLSCREEN 4						<font class="theme">// Compilers. By Defining It This Way,</font>
#endif									<font class="theme">// We Can Avoid Errors</font>

GL_Window*	g_window;
Keys*		g_keys;
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we define our variables.  angle is used to rotate our objects around based on the amount of time that
has passed.  We will use angle for all rotations just to keep things simple.
<br><br>
next is an integer variable that will be used to count how much time has passed (in milliseconds).  It
will be used to keep the framerate at a descent speed.  More about this later!
<br><br>
frame is of course the current frame we want to display from the animation.  We start off at 0 (first
frame). I think it's safe to assume that if we managed to open the video, it HAS to have at least one frame of
animation :)
<br><br>
effect is the current effect seen on the screen (object:  Cube, Sphere, Cylinder, Nothing).  env
is a boolean value.  If it's true, then environment mapping is enabled, if it's false, the object will NOT be
environment mapped.  If bg is true, you will see the video playing fullscreen behind the object.  If it's
false, you will only see the object (there will be no background).
<br><br>
sp, ep and bp are used to make sure the user isn't holding a key down.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre><font class="theme">// User Defined Variables</font>
float		angle;							<font class="theme">// Used For Rotation</font>
int		next;							<font class="theme">// Used For Animation</font>
int		frame=0;						<font class="theme">// Frame Counter</font>
int		effect;							<font class="theme">// Current Effect</font>
bool		sp;							<font class="theme">// Space Bar Pressed?</font>
bool		env=TRUE;						<font class="theme">// Environment Mapping (Default On)</font>
bool		ep;							<font class="theme">// 'E' Pressed?</font>
bool		bg=TRUE;						<font class="theme">// Background (Default On)</font>
bool		bp;							<font class="theme">// 'B' Pressed?</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The psi structure will hold information about our AVI file later in the code.  pavi is a pointer to
a buffer that receives the new stream handle once the AVI file has been opened.  pgf is a pointer to our
GetFrame object.  bmih will be used later in the code to convert the frame of animation to a format we
want (holds the bitmap header info describing what we want).  lastframe will hold the number of the last
frame in the AVI animation.  width and height will hold the dimensions of the AVI stream and
finally.... pdata is a pointer to the image data returned after we get a frame of animation from the AVI!
mpf will be used to calculate how many milliseconds each frame is displayed for.  More on this later.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>AVISTREAMINFO		psi;						<font class="theme">// Pointer To A Structure Containing Stream Info</font>
PAVISTREAM		pavi;						<font class="theme">// Handle To An Open Stream</font>
PGETFRAME		pgf;						<font class="theme">// Pointer To A GetFrame Object</font>
BITMAPINFOHEADER	bmih;						<font class="theme">// Header Information For DrawDibDraw Decoding</font>
long			lastframe;					<font class="theme">// Last Frame Of The Stream</font>
int			width;						<font class="theme">// Video Width</font>
int			height;						<font class="theme">// Video Height</font>
char			*pdata;						<font class="theme">// Pointer To Texture Data</font>
int			mpf;						<font class="theme">// Will Hold Rough Milliseconds Per Frame</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
In this tutorial we will create 2 different quadratic shapes (a sphere and a cylinder) using the GLU library.
quadratic is a pointer to our quadric object.
<br><br>
hdd is a handle to a DrawDib device context.  hdc is handle to a device context.
<br><br>
hBitmap is a handle to a device dependant bitmap (used in the bitmap conversion process later).
<br><br>
data is a pointer that will eventually point to our converted bitmap image data.  Will make sense later
in the code.  Keep reading :)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLUquadricObj *quadratic;						<font class="theme">// Storage For Our Quadratic Objects</font>

HDRAWDIB hdd;								<font class="theme">// Handle For Our Dib</font>
HBITMAP hBitmap;							<font class="theme">// Handle To A Device Dependant Bitmap</font>
HDC hdc = CreateCompatibleDC(0);					<font class="theme">// Creates A Compatible Device Context</font>
unsigned char* data = 0;						<font class="theme">// Pointer To Our Resized Image</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now for some assembly language.  For those of you that have never used assembly before, don't be intimidated.
It might look cryptic, but it's actually pretty simple!
<br><br>
While writing this tutorial I discovered something very odd.  The first video I actually got working with this
code was playing fine but the colors were messed up.  Everything that was supposed to be red was blue and
everything that was supposed to be blue was red.  I went absolutely NUTS!  I was convinced that I made a mistake
somewhere in the code.  After looking at all the code, I was unable to find the bug!  So I started reading
through the MSDN again.  Why would the red and blue bytes be swapped!?!  It says right in the MSDN that 24 bit
bitmaps are RGB!!!  After some more reading I discovered the problem.  In WINDOWS (figures), RGB data is actually
store backwards (BGR).  In OpenGL, RGB is exactly that... RGB!
<br><br>
After a few complaints from fans of Microsoft :)  I decided to add a quick note!  I am not trashing Microsoft
because their RGB data is stored backwards.  I just find it very frustrating that it's called RGB when it's
actually BGR in the file!
<br><br>
Blue Adds: It's more to do with "little endian" and "big endian".  Intel and Intel compatibles use little endian
where the least significant byte (LSB) is stored first.  OpenGL came from Silicon Graphics machines, which are
probably big endian, and thus the OpenGL standard required the bitmap format to be in big endian format.  I
think this is how it works.
<br><br>
Wonderful!  So here I am with a player, that looks like absolute crap!  My first solution was to swap the bytes
manually with a for next loop.  It worked, but it was very slow.  Completely fed up, I modified the texture
generation code to use GL_BGR_EXT instead of GL_RGB.  A huge speed increase, and the colors looked great!  So my
problem was solved... or so I thought!  It turns out, some OpenGL drivers have problems with GL_BGR_EXT.... Back
to the drawing board :(
<br><br>
After talking with my good friend Maxwell Sayles, he recommended that I swap the bytes using asm code.  A minute
later, he had icq'd me the code below!  It may not be optimized, but it's fast and it does the job!
<br><br>
Each frame of animation is stored in a buffer.  The image will always be 256 pixels wide, 256 pixels tall and
1 byte per color (3 bytes per pixel).  The code below will go through the buffer and swap the Red and Blue
bytes.  Red is stored at ebx+0 and blue is stored at ebx+2.  We move through the buffer 3 bytes
at a time (because one pixel is made up of 3 bytes).  We loop through the data until all of the byte have been
swapped.
<br><br>
A few of you were unhappy with the use of ASM code, so I figured I would explain why it's used in this tutorial.
Originally I had planned to use GL_BGR_EXT as I stated, it works.  But not on all cards!  I then decided
to use the swap method from the last tut (very tidy XOR swap code).  The swap code works on all machines, but
it's not extremely fast.  In the last tut, yeah, it works GREAT.  In this tutorial we are dealing with REAL-TIME
video.  You want the fastest swap you can get.  Weighing the options, ASM in my opinion is the best choice!  If
you have a better way to do the job, please ... USE IT!  I'm not telling you how you HAVE to do things.  I'm
showing you how I did it.  I also explain in detail what the code does.  That way if you want to replace the
code with something better, you know exactly what this code is doing, making it easier to find an alternate
solution if you want to write your own code!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void flipIt(void* buffer)						<font class="theme">// Flips The Red And Blue Bytes (256x256)</font>
{
	void* b = buffer;						<font class="theme">// Pointer To The Buffer</font>
	__asm								<font class="theme">// Assembler Code To Follow</font>
	{
		mov ecx, 256*256					<font class="theme">// Set Up A Counter (Dimensions Of Memory Block)</font>
		mov ebx, b						<font class="theme">// Points ebx To Our Data (b)</font>
		label:							<font class="theme">// Label Used For Looping</font>
			mov al,[ebx+0]					<font class="theme">// Loads Value At ebx Into al</font>
			mov ah,[ebx+2]					<font class="theme">// Loads Value At ebx+2 Into ah</font>
			mov [ebx+2],al					<font class="theme">// Stores Value In al At ebx+2</font>
			mov [ebx+0],ah					<font class="theme">// Stores Value In ah At ebx</font>
			
			add ebx,3					<font class="theme">// Moves Through The Data By 3 Bytes</font>
			dec ecx						<font class="theme">// Decreases Our Loop Counter</font>
			jnz label					<font class="theme">// If Not Zero Jump Back To Label</font>
	}
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below opens the AVI file in read mode.  szFile is the name of the file we want to open.  title[100]
will be used to modify the title of the window (to show information about the AVI file).
<br><br>
The first thing we need to do is call AVIFileInit().  This initializes the AVI file library (gets things
ready for us).
<br><br>
There are many ways to open an AVI file.  I decided to use AVIStreamOpenFromFile(...).  This opens a single
stream from an AVI file (AVI files can contain multiple streams).
<br><br>
The parameters are as follows:  pavi is a pointer to a buffer that receives the new stream handle.
szFile is of course, the name of the file we wish to open (complete with path).  The third parameter is
the type of stream we wish to open.  In this project, we are only interested in the VIDEO stream (streamtypeVIDEO).
The fourth parameter is 0.  This means we want the first occurance of streamtypeVIDEO (there can be multiple video
streams in a single AVI file... we want the first stream).  OF_READ means that we want to open the file
for reading ONLY.  The last parameter is a pointer to a class identifier of the handler you want to use.  To
be honest, I have no idea what it does.  I let windows select it for me by passing NULL as the last parameter!
<br><br>
If there are any errors while opening the file, a message box pops up letting you know that the stream could
not be opened.  I don't pass a PASS or FAIL back to the calling section of code, so if this fails, the program
will try to keep running.  Adding some type of error checking shouldn't take alot of effort, I was too lazy :)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void OpenAVI(LPCSTR szFile)						<font class="theme">// Opens An AVI File (szFile)</font>
{
	TCHAR	title[100];						<font class="theme">// Will Hold The Modified Window Title</font>

	AVIFileInit();							<font class="theme">// Opens The AVIFile Library</font>

	<font class="theme">// Opens The AVI Stream</font>
	if (AVIStreamOpenFromFile(&amp;pavi, szFile, streamtypeVIDEO, 0, OF_READ, NULL) !=0)
	{
		<font class="theme">// An Error Occurred Opening The Stream</font>
		MessageBox (HWND_DESKTOP, "Failed To Open The AVI Stream", "Error", MB_OK | MB_ICONEXCLAMATION);
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
If we made it this far, it's safe to assume that the file was opened and a stream was located!  Next we grab a
bit of information from the AVI file with AVIStreamInfo(...).
<br><br>
Earlier we created a structure called psi that will hold information about our AVI stream.  We will fill this
structure with information about the AVI with the first line of code below.  Everything from the width of the
stream (in pixels) to the framerate of the animation is stored in psi.  For those of you that want
accurate playback speeds, make a note of what I just said.  For more information look up AVIStreamInfo in the
MSDN.
<br><br>
We can calculate the width of a frame by subtracting the left border from the right border.  The result
should be an accurate width in pixels.  For the height, we subtract the top of the frame from the bottom
of the frame.  This gives us the height in pixels.
<br><br>
We then grab the last frame number from the AVI file using AVIStreamLength(...).  This returns the number
of frames of animation in the AVI file.  The result is stored in lastframe.
<br><br>
Calculating the framerate is fairly easy.  Frames per second = psi.dwRate / psi.dwScale.  The value
returned should match the frame rate displayed when you right click on the AVI and check its properties.  So
what does this have to do with mpf you ask?  When I first wrote the animation code, I tried using the
frames per second to select the correct frame of animation.  I ran into a problem... All of the videos played 
too fast!  So I had a look at the video properties.  The face2.avi file is 3.36 seconds long.  The frame rate is
29.974 frames per second.  The video has 91 frames of animation.  If you multiply 3.36 by 29.974 you get 100
frames of animation.  Very Odd!
<br><br>
So, I decided to do things a little different.  Instead of calculating the frames per second, I calculate how
long each frame should be displayed.  AVIStreamSampleToTime() converts a position in the animation to
how many milliseconds it would take to get to that position.  So we calculate how many milliseconds the entire
video is by grabbing the time (in milliseconds) of the last frame (lastframe).  We then divide the result
by the total number of frames in the animation (lastframe).  This gives us the amount of time each frame
is displayed for in milliseconds.  We store the result in mpf (milliseconds per frame).  You could also
calculate the milliseconds per frame by grabbing the amount of time for just 1 frame of animation with the
following code: AVIStreamSampleToTime(pavi,1).  Either way should work fine!  Big thanks to
Albert Chaulk for the idea!
<br><br>
The reason I say rough milliseconds per frame is because mpf is an integer so any floating values will be
rounded off.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	AVIStreamInfo(pavi, &amp;psi, sizeof(psi));				<font class="theme">// Reads Information About The Stream Into psi</font>
	width=psi.rcFrame.right-psi.rcFrame.left;			<font class="theme">// Width Is Right Side Of Frame Minus Left</font>
	height=psi.rcFrame.bottom-psi.rcFrame.top;			<font class="theme">// Height Is Bottom Of Frame Minus Top</font>

	lastframe=AVIStreamLength(pavi);				<font class="theme">// The Last Frame Of The Stream</font>

	mpf=AVIStreamSampleToTime(pavi,lastframe)/lastframe;		<font class="theme">// Calculate Rough Milliseconds Per Frame</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">Because
OpenGL requires texture data to be a power of 2, and because most
videos are 160x120, 320x240 or some other odd dimensions we need a fast
way to resize the video on the fly to a format that we can use as a
texture. To do this, we take advantage of specific Windows Dib
functions.
<br><br>The first thing we need to do is describe the type of image we
want. To do this, we fill the bmih BitmapInfoHeader structure with our
requested
parameters. We start off by setting the size of the structure. We then
set the bitplanes to 1. Three bytes of data works out to 24 bits (RGB).
We want the image to be 256 pixels wide and 256 pixels tall and finally
we want the data returned as UNCOMPRESSED RGB data (BI_RGB).
<br><br>CreateDIBSection creates a dib that we can directly write to.
If everything goes well, hBitmap will point to the dib's bit values.
hdc is a
handle to a device context (DC). The second parameter is a pointer to
our BitmapInfo structure. The structure contains information about the
dib
file as mentioned above. The third parameter (DIB_RGB_COLORS) specifies
that the data is RGB values. data is a pointer to a variable that
receives
a pointer to the location of the DIB's bit values (whew, that was a
mouthful). By setting the 5th value to NULL, memory is allocated for
our DIB.
Finally, the last parameter can be ignored (set to NULL).
<br><br>
Quoted from the MSDN:  The SelectObject function selects an object into the specified device context (DC).
<br><br>
We have now created a DIB that we can directly draw to.  Yay :)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	bmih.biSize		= sizeof (BITMAPINFOHEADER);		<font class="theme">// Size Of The BitmapInfoHeader</font>
	bmih.biPlanes		= 1;					<font class="theme">// Bitplanes</font>
	bmih.biBitCount		= 24;					<font class="theme">// Bits Format We Want (24 Bit, 3 Bytes)</font>
	bmih.biWidth		= 256;					<font class="theme">// Width We Want (256 Pixels)</font>
	bmih.biHeight		= 256;					<font class="theme">// Height We Want (256 Pixels)</font>
	bmih.biCompression	= BI_RGB;				<font class="theme">// Requested Mode = RGB</font>

	hBitmap = CreateDIBSection (hdc, (BITMAPINFO*)(&amp;bmih), DIB_RGB_COLORS, (void**)(&amp;data), NULL, NULL);
	SelectObject (hdc, hBitmap);					<font class="theme">// Select hBitmap Into Our Device Context (hdc)</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
A few more things to do before we're ready to read frames from the AVI.  The next thing we have to do is prepare
our program to decompress video frames from the AVI file.  We do this with the AVIStreamGetFrameOpen(...)
function.
<br><br>
You can pass a structure similar to the one above as the second parameter to have a specific video format
returned.  Unfortunately, the only thing you can alter is the width and height of the returned image.  The
MSDN also mentions that you can pass AVIGETFRAMEF_BESTDISPLAYFMT to select the best display format.  Oddly
enough, my compiler had no definition for it.
<br><br>
If everything goes well, a GETFRAME object is returned (which we need to read frames of data).  If there are any
problems, a message box will pop onto the screen telling you there was an error!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	pgf=AVIStreamGetFrameOpen(pavi, NULL);				<font class="theme">// Create The PGETFRAME Using Our Request Mode</font>
	if (pgf==NULL)
	{
		<font class="theme">// An Error Occurred Opening The Frame</font>
		MessageBox (HWND_DESKTOP, "Failed To Open The AVI Frame", "Error", MB_OK | MB_ICONEXCLAMATION);
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below prints the videos width, height and frames to title.  We display title at the top
of the window with the command SetWindowText(...).  Run the program in windowed mode to see what the
code below does.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	<font class="theme">// Information For The Title Bar (Width / Height / Last Frame)</font>
	wsprintf (title, "NeHe's AVI Player: Width: %d, Height: %d, Frames: %d", width, height, lastframe);
	SetWindowText(g_window-&gt;hWnd, title);				<font class="theme">// Modify The Title Bar</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now for the fun stuff... we grab a frame from the AVI and then convert it to a usable image size / color depth.
lpbi will hold the BitmapInfoHeader information for the frame of animation.  We accomplish a few things
at once in the second line of code below.  First we grab a frame of animation ... The frame we want is specified
by frame.  This will pull in the frame of animation and will fill lpbi with the header information
for that frame.
<br><br>
Now for the fun stuff... we need to point to the image data.  To do this we need to skip over the header
information (lpbi-&gt;biSize).  One thing I didn't realize until I started writing this tut was that we
also have to skip over any color information.  To do this we also add colors used multiplied by the size of
RGBQUAD (biClrUsed*sizeof(RGBQUAD)).  After doing ALL of that :) we are left with a pointer to the
image data (pdata).
<br><br>
Now we need to convert the frame of animation to a usable texture size as well, we need to convert the data to
RGB data.  To do this, we use DrawDibDraw(...).
<br><br>
A quick explanation.  We can draw directly to our custom DIB.  That's what DrawDibDraw(...) does.  The
first parameter is a handle to our DrawDib DC.  The second parameter is a handle to the DC.  Next we have the
upper left corner (0,0) and the lower right corner (256,256) of the destination rectangle.
<br><br>
lpbi is a pointer to the bitmapinfoheader information for the frame we just read.  pdata is a
pointer to the image data for the frame we just read.
<br><br>
Then we have the upper left corner (0,0) of the source image (frame we just read) and the lower right corner
of the frame we just read (width of the frame, height of the frame).  The last parameter should be left at 0.
<br><br>
This will convert an image of any size / color depth to a 256*256*24bit image.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void GrabAVIFrame(int frame)						<font class="theme">// Grabs A Frame From The Stream</font>
{
	LPBITMAPINFOHEADER lpbi;					<font class="theme">// Holds The Bitmap Header Information</font>
	lpbi = (LPBITMAPINFOHEADER)AVIStreamGetFrame(pgf, frame);	<font class="theme">// Grab Data From The AVI Stream</font>
	pdata=(char *)lpbi+lpbi-&gt;biSize+lpbi-&gt;biClrUsed * sizeof(RGBQUAD);	<font class="theme">// Pointer To Data Returned By AVIStreamGetFrame</font>
										<font class="theme">// (Skip The Header Info To Get To The Data)</font>
	<font class="theme">// Convert Data To Requested Bitmap Format</font>
	DrawDibDraw (hdd, hdc, 0, 0, 256, 256, lpbi, pdata, 0, 0, width, height, 0);
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We have our frame of animation but the red and blue bytes are swapped.  To solve this problem, we jump to our
speedy flipIt(...) code.  Remember, data is a pointer to a variable that receives a pointer to
the location of the DIB's bit values.  What that means is that after we call DrawDibDraw, data
will point to the resized (256*256) / modified (24 bit) bitmap data.
<br><br>
Originally I was updating the texture by recreating it for each frame of animation.  I received a few emails
suggesting that I use glTexSubImage2D().  After flipping through the OpenGL Red Book, I stumbled across
the following quote:  "Creating a texture may be more computationally expensive than modifying an existing one.
In OpenGL Release 1.1, there are new routines to replace all or part of a texture image with new information.
This can be helpful for certain applications, such as using real-time, captured video images as texture
images.  For that application, it makes sense to create a single texture and use glTexSubImage2D() to
repeatedly replace the texture data with new video images".
<br><br>
I personally didn't notice a huge speed increase, but on slower cards you might!  The parameters for
glTexSubImage2D() are as follows:  Our target, which is a 2D texture (GL_TEXTURE_2D).  The detail
level (0), used for mipmapping. The x (0) and y (0) offset which tells OpenGL where to start copying to (0,0 is
the lower left corner of the texture).  Then we have the width of the image we wish to copy which is 256 pixels
wide and 256 pixels tall.  GL_RGB is the format of our data.  We are copying unsigned bytes.  Finally...
The pointer to our data which is represented by data.  Very simple!
<br><br>
Kevin Rogers Adds: I just wanted to point out another important reason to use glTexSubImage2D.  Not only is
it faster on many OpenGL implementations, but the target area does not need to be a power of 2. This is
especially handy for video playback since the typical dimensions for a frame are rarely powers of 2 (often
something like 320 x 200).  This gives you the flexibility to play the video stream at its original aspect,
rather than distorting / clipping each frame to fit your texture dimensions.
<br><br>
It's important to note that you can NOT update a texture if you have not created the texture in the first place!
We create the texture in the Initialize() code!
<br><br>
I also wanted to mention... If you planned to use more than one texture in your project, make sure you bind the
texture you want to update.  If you don't bind the texture you may end up updating textures you didn't want
updated!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	flipIt(data);							<font class="theme">// Swap The Red And Blue Bytes (GL Compatability)</font>

	<font class="theme">// Update The Texture</font>
	glTexSubImage2D (GL_TEXTURE_2D, 0, 0, 0, 256, 256, GL_RGB, GL_UNSIGNED_BYTE, data);
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The following section of code is called when the program exits.  We close our DrawDib DC, and free allocated
resources.  We then release the AVI GetFrame resources.  Finally we release the stream and then the file.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void CloseAVI(void)							<font class="theme">// Properly Closes The Avi File</font>
{
	DeleteObject(hBitmap);						<font class="theme">// Delete The Device Dependant Bitmap Object</font>
	DrawDibClose(hdd);						<font class="theme">// Closes The DrawDib Device Context</font>
	AVIStreamGetFrameClose(pgf);					<font class="theme">// Deallocates The GetFrame Resources</font>
	AVIStreamRelease(pavi);						<font class="theme">// Release The Stream</font>
	AVIFileExit();							<font class="theme">// Release The File</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Initialization is pretty straight forward.  We set the starting angle to 0.  We then open the DrawDib
library (which grabs a DC).  If everything goes well, hdd becomes a handle to the newly created device
context.
<br><br>
Our clear screen color is black, depth testing is enabled, etc.
<br><br>
We then create a new quadric.  quadratic is the pointer to our new object.  We set up smooth normals,
and enable texture coordinate generation for our quadric.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>BOOL Initialize (GL_Window* window, Keys* keys)				<font class="theme">// Any GL Init Code &amp; User Initialiazation Goes Here</font>
{
	g_window	= window;
	g_keys		= keys;

	<font class="theme">// Start Of User Initialization</font>
	angle = 0.0f;							<font class="theme">// Set Starting Angle To Zero</font>
	hdd = DrawDibOpen();						<font class="theme">// Grab A Device Context For Our Dib</font>
	glClearColor (0.0f, 0.0f, 0.0f, 0.5f);				<font class="theme">// Black Background</font>
	glClearDepth (1.0f);						<font class="theme">// Depth Buffer Setup</font>
	glDepthFunc (GL_LEQUAL);					<font class="theme">// The Type Of Depth Testing (Less Or Equal)</font>
	glEnable(GL_DEPTH_TEST);					<font class="theme">// Enable Depth Testing</font>
	glShadeModel (GL_SMOOTH);					<font class="theme">// Select Smooth Shading</font>
	glHint (GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);		<font class="theme">// Set Perspective Calculations To Most Accurate</font>

	quadratic=gluNewQuadric();					<font class="theme">// Create A Pointer To The Quadric Object</font>
	gluQuadricNormals(quadratic, GLU_SMOOTH);			<font class="theme">// Create Smooth Normals</font>
	gluQuadricTexture(quadratic, GL_TRUE);				<font class="theme">// Create Texture Coords</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
In the next bit of code, we enable 2D texture mapping, we set the texture filters to GL_NEAREST (fast, but rough
looking) and we set up sphere mapping (to create the environment mapping effect).  Play around with the filters.
If you have the power, try out GL_LINEAR for a smoother looking animation.
<br><br>
After setting up our texture and sphere mapping, we open the .AVI file.  I tried to keep things simple... can you
tell :)  The file we are going to open is called face2.avi... it's located in the data directory.
<br><br>
The last thing we have to do is create our initial texture.  We need to do this in order to use glTexSubImage2D()
to update our texture in GrabAVIFrame().
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glEnable(GL_TEXTURE_2D);					<font class="theme">// Enable Texture Mapping</font>
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);<font class="theme">// Set Texture Max Filter</font>
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);<font class="theme">// Set Texture Min Filter</font>

	glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);		<font class="theme">// Set The Texture Generation Mode For S To Sphere Mapping</font>
	glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);		<font class="theme">// Set The Texture Generation Mode For T To Sphere Mapping</font>

	OpenAVI("data/face2.avi");					<font class="theme">// Open The AVI File</font>

	<font class="theme">// Create The Texture</font>
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 256, 256, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

	return TRUE;							<font class="theme">// Return TRUE (Initialization Successful)</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
When shutting down, we call CloseAVI().  This properly closes the AVI file, and releases any used resources.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void Deinitialize (void)						<font class="theme">// Any User DeInitialization Goes Here</font>
{
	CloseAVI();							<font class="theme">// Close The AVI File</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
This is where we check for key presses and update our rotation (angle) based on time passed.  By now I
shouldn't have to explain the code in detail.  We check to see if the space bar is pressed.  If it is, we
increase the effect.  We have three effect (cube, sphere, cylinder) and when the 4th effect is selected
(effect=3) nothing is drawn... showing just the background scene!  If we are on the 4th effect and space
is pressed, we reset back to the first effect (effect=0).  Yeah, I know I should have called it OBJECT :)
<br><br>
We then check to see if the 'B' key is pressed if it is, we toggle the background (bg) from ON to
OFF or from OFF to ON.
<br><br>
Environment mapping is done the same way.  We check to see if 'E' is pressed.  If it is, we toggle
env from TRUE to FALSE or from FALSE to TRUE.  Turning environment mapping off or on!
<br><br>
The angle is increased by a tiny fraction each time Update() is called.  I divide the time passed
by 60.0f to slow things down a little.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void Update (DWORD milliseconds)					<font class="theme">// Perform Motion Updates Here</font>
{
	if (g_keys-&gt;keyDown [VK_ESCAPE] == TRUE)			<font class="theme">// Is ESC Being Pressed?</font>
	{
		TerminateApplication (g_window);			<font class="theme">// Terminate The Program</font>
	}

	if (g_keys-&gt;keyDown [VK_F1] == TRUE)				<font class="theme">// Is F1 Being Pressed?</font>
	{
		ToggleFullscreen (g_window);				<font class="theme">// Toggle Fullscreen Mode</font>
	}

	if ((g_keys-&gt;keyDown [' ']) &amp;&amp; !sp)				<font class="theme">// Is Space Being Pressed And Not Held?</font>
	{
		sp=TRUE;						<font class="theme">// Set sp To True</font>
		effect++;						<font class="theme">// Change Effects (Increase effect)</font>
		if (effect&gt;3)						<font class="theme">// Over Our Limit?</font>
			effect=0;					<font class="theme">// Reset Back To 0</font>
	}

	if (!g_keys-&gt;keyDown[' '])					<font class="theme">// Is Space Released?</font>
		sp=FALSE;						<font class="theme">// Set sp To False</font>

	if ((g_keys-&gt;keyDown ['B']) &amp;&amp; !bp)				<font class="theme">// Is 'B' Being Pressed And Not Held?</font>
	{
		bp=TRUE;						<font class="theme">// Set bp To True</font>
		bg=!bg;							<font class="theme">// Toggle Background Off/On</font>
	}

	if (!g_keys-&gt;keyDown['B'])					<font class="theme">// Is 'B' Released?</font>
		bp=FALSE;						<font class="theme">// Set bp To False</font>

	if ((g_keys-&gt;keyDown ['E']) &amp;&amp; !ep)				<font class="theme">// Is 'E' Being Pressed And Not Held?</font>
	{
		ep=TRUE;						<font class="theme">// Set ep To True</font>
		env=!env;						<font class="theme">// Toggle Environment Mapping Off/On</font>
	}

	if (!g_keys-&gt;keyDown['E'])					<font class="theme">// Is 'E' Released?</font>
		ep=FALSE;						<font class="theme">// Set ep To False</font>

	angle += (float)(milliseconds) / 60.0f;				<font class="theme">// Update angle Based On The Timer</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
In the original tutorial, all AVI files were played at the same speed.  Since then, the tutorial has been
rewritten to play the video at the correct speed.  next is increased by the number of milliseconds that
have passed since this section of code was last called.  If you remember earlier in the tutorial, we calculated
how long each frame should be displayed in milliseconds (mpf).  To calculate the current frame, we
take the amount of time that has passed (next) and divide it by the time each frame is displayed for
(mpf).
<br><br>
After that, we check to make sure that the current frame of animation hasn't passed the last frame of the video.
If it has, frame is reset to zero, the animation timer (next) is reset to 0, and the animation
starts over.
<br><br>
The code below will drop frames if your computer is running to slow, or another application is hogging the CPU.
If you want every frame to be displayed no matter how slow the users computer is, you could check to see if
next is greater than mpf if it is, you would reset next to 0 and increase frame by
one.  Either way will work, although the code below is better for faster machines.
<br><br>
If you feel energetic, try adding rewind, fast forward, pause or reverse play!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	next+= milliseconds;						<font class="theme">// Increase next Based On Timer (Milliseconds)</font>
	frame=next/mpf;							<font class="theme">// Calculate The Current Frame</font>

	if (frame&gt;=lastframe)						<font class="theme">// Have We Gone Past The Last Frame?</font>
	{
		frame=0;						<font class="theme">// Reset The Frame Back To Zero (Start Of Video)</font>
		next=0;							<font class="theme">// Reset The Animation Timer (next)</font>
	}
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now for the drawing code :)  We clear the screen and depth buffer.  We then grab a frame of animation.  Again, I
tried to keep it simple!  You pass the requested frame (frame) to GrabAVIFrame().  Pretty simple!
Of course, if you wanted multiple AVI's, you would have to pass a texture ID.  (More for you to do).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void Draw (void)							<font class="theme">// Draw Our Scene</font>
{
	glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		<font class="theme">// Clear Screen And Depth Buffer</font>

	GrabAVIFrame(frame);						<font class="theme">// Grab A Frame From The AVI</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below checks to see if we want to draw a background image.  If bg is TRUE, we reset the modelview
matrix and draw a single texture mapped quad (mapped with a frame from the AVI video) large enough to fill the
entire screen.  The quad is drawn 20 units into the screen so it appears behind the object (futher in the distance).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	if (bg)								<font class="theme">// Is Background Visible?</font>
	{
		glLoadIdentity();					<font class="theme">// Reset The Modelview Matrix</font>
		glBegin(GL_QUADS);					<font class="theme">// Begin Drawing The Background (One Quad)</font>
			<font class="theme">// Front Face</font>
			glTexCoord2f(1.0f, 1.0f); glVertex3f( 11.0f,  8.3f, -20.0f);
			glTexCoord2f(0.0f, 1.0f); glVertex3f(-11.0f,  8.3f, -20.0f);
			glTexCoord2f(0.0f, 0.0f); glVertex3f(-11.0f, -8.3f, -20.0f);
			glTexCoord2f(1.0f, 0.0f); glVertex3f( 11.0f, -8.3f, -20.0f);
		glEnd();						<font class="theme">// Done Drawing The Background</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
After drawing the background (or not), we reset the modelview matrix (starting us back at the center of the
screen).  We then translate 10 units into the screen.
<br><br>
After that, we check to see if env is TRUE.  If it is, we enable sphere mapping to create the environment
mapping effect.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glLoadIdentity ();						<font class="theme">// Reset The Modelview Matrix</font>
	glTranslatef (0.0f, 0.0f, -10.0f);				<font class="theme">// Translate 10 Units Into The Screen</font>

	if (env)							<font class="theme">// Is Environment Mapping On?</font>
	{
		glEnable(GL_TEXTURE_GEN_S);				<font class="theme">// Enable Texture Coord Generation For S (NEW)</font>
		glEnable(GL_TEXTURE_GEN_T);				<font class="theme">// Enable Texture Coord Generation For T (NEW)</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
I added the code below at the last minute.  It rotates on the x-axis and y-axis (based on the value of angle)
and then translates 2 units on the z-axis.  This move us away from the center of the screen.  If you remove the
three lines of code below, the object will spin in the center of the screen.  With the three lines of code, the
objects move around a bit as they spin :)
<br><br>
If you don't understand rotations and translations... you shouldn't be reading this tutorial :)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glRotatef(angle*2.3f,1.0f,0.0f,0.0f);				<font class="theme">// Throw In Some Rotations To Move Things Around A Bit</font>
	glRotatef(angle*1.8f,0.0f,1.0f,0.0f);				<font class="theme">// Throw In Some Rotations To Move Things Around A Bit</font>
	glTranslatef(0.0f,0.0f,2.0f);					<font class="theme">// After Rotating Translate To New Position</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below checks to see which effect (object) we want to draw.  If the value of effect is 0, we do
a few rotations and then draw a cube.  The rotations keep the cube spinning on the x-axis, y-axis and z-axis.
By now, you should have the code to create a cube burned into your head :)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	switch (effect)							<font class="theme">// Which Effect?</font>
	{
	case 0:								<font class="theme">// Effect 0 - Cube</font>
		glRotatef (angle*1.3f, 1.0f, 0.0f, 0.0f);		<font class="theme">// Rotate On The X-Axis By angle</font>
		glRotatef (angle*1.1f, 0.0f, 1.0f, 0.0f);		<font class="theme">// Rotate On The Y-Axis By angle</font>
		glRotatef (angle*1.2f, 0.0f, 0.0f, 1.0f);		<font class="theme">// Rotate On The Z-Axis By angle</font>
		glBegin(GL_QUADS);					<font class="theme">// Begin Drawing A Cube</font>
			<font class="theme">// Front Face</font>
			glNormal3f( 0.0f, 0.0f, 0.5f);
			glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);
			glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);
			glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f,  1.0f);
			glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f,  1.0f);
			<font class="theme">// Back Face</font>
			glNormal3f( 0.0f, 0.0f,-0.5f);
			glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);
			glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);
			glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);
			glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f, -1.0f);
			<font class="theme">// Top Face</font>
			glNormal3f( 0.0f, 0.5f, 0.0f);
			glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);
			glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f,  1.0f,  1.0f);
			glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f,  1.0f,  1.0f);
			glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);
			<font class="theme">// Bottom Face</font>
			glNormal3f( 0.0f,-0.5f, 0.0f);
			glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);
			glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f, -1.0f, -1.0f);
			glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);
			glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);
			<font class="theme">// Right Face</font>
			glNormal3f( 0.5f, 0.0f, 0.0f);
			glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f, -1.0f, -1.0f);
			glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);
			glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f,  1.0f,  1.0f);
			glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);
			<font class="theme">// Left Face</font>
			glNormal3f(-0.5f, 0.0f, 0.0f);
			glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);
			glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);
			glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f,  1.0f,  1.0f);
			glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);
		glEnd();						<font class="theme">// Done Drawing Our Cube</font>
		break;							<font class="theme">// Done Effect 0</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
This is where we draw the sphere.  We start off with a few quick rotations on the x-axis, y-axis and z-axis.
We then draw the sphere.  The sphere will have a radius of 1.3f, with 20 slices and 20 stacks.  I decided to use
20 because I didn't want the sphere to be perfectly smooth.  Using fewer slices and stacks gives the sphere a
rougher look (less smooth), making it semi obvious that the sphere is actually rotating when sphere mapping is
enabled.  Try playing around with the values!  It's important to note that more slices or stacks requires more
processing power!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	case 1:								<font class="theme">// Effect 1 - Sphere</font>
		glRotatef (angle*1.3f, 1.0f, 0.0f, 0.0f);		<font class="theme">// Rotate On The X-Axis By angle</font>
		glRotatef (angle*1.1f, 0.0f, 1.0f, 0.0f);		<font class="theme">// Rotate On The Y-Axis By angle</font>
		glRotatef (angle*1.2f, 0.0f, 0.0f, 1.0f);		<font class="theme">// Rotate On The Z-Axis By angle</font>
		gluSphere(quadratic,1.3f,20,20);			<font class="theme">// Draw A Sphere</font>
		break;							<font class="theme">// Done Drawing Sphere</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
This is where we draw the cylinder.  We start off with some simple rotations on the x-axis, y-axis and z-axis.
Our cylinder has a base and top radius of 1.0f units.  It's 3.0f units high, and is composed of 32 slices and
32 stacks.  If you decrease the slices or stacks, the cylinder will be made up of less polygons and will appear
less rounded.
<br><br>
Before we draw the cylinder, we translate -1.5f units on the z-axis.  By doing this, our cylinder will rotate
around it's center point.  The general rule to centering a cylinder is to divide it's height by 2 and translate
by the result in a negative direction on the z-axis.  If you have no idea what I'm talking about, take out the
tranlatef(...) line below.  The cylinder will rotate around it's base, instead of a center point.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	case 2:								<font class="theme">// Effect 2 - Cylinder</font>
		glRotatef (angle*1.3f, 1.0f, 0.0f, 0.0f);		<font class="theme">// Rotate On The X-Axis By angle</font>
		glRotatef (angle*1.1f, 0.0f, 1.0f, 0.0f);		<font class="theme">// Rotate On The Y-Axis By angle</font>
		glRotatef (angle*1.2f, 0.0f, 0.0f, 1.0f);		<font class="theme">// Rotate On The Z-Axis By angle</font>
		glTranslatef(0.0f,0.0f,-1.5f);				<font class="theme">// Center The Cylinder</font>
		gluCylinder(quadratic,1.0f,1.0f,3.0f,32,32);		<font class="theme">// Draw A Cylinder</font>
		break;							<font class="theme">// Done Drawing Cylinder</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Next we check to see if env is TRUE.  If it is, we disable sphere mapping.  We call glFlush() to
flush out the rendering pipeline (makes sure everything gets rendered before we draw the next frame).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	if (env)							<font class="theme">// Environment Mapping Enabled?</font>
	{
		glDisable(GL_TEXTURE_GEN_S);				<font class="theme">// Disable Texture Coord Generation For S (NEW)</font>
		glDisable(GL_TEXTURE_GEN_T);				<font class="theme">// Disable Texture Coord Generation For T (NEW)</font>
	}
	
	glFlush ();							<font class="theme">// Flush The GL Rendering Pipeline</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
I hope you enjoyed this tutorial.  It's 2:00am at the moment...  I've been working on this tut for the last 6
hours.  Sounds crazy, but writing things so that they actually make sense is not an easy task.  I have read the
tut 3 times now and I'm still trying to make things easier to understand.  Believe it or not, it's important to
me that you understand how things work and why they work.  That's why I babble endlessly, why I over-comment,
etc.
<br><br>
Anyways... I would love to hear some feedback about this tut.  If you find mistakes or you would like to help
make the tut better, please contact me.  As I said, this is my first attempt at AVI.  Normally I wouldn't write
a tut on a subject I just learned, but my excitement got the best of me, plus the fact that there's very little
information on the subject bothered me.  What I'm hoping is that I'll open the door to a flood of higher quality
AVI demos and example code!  Might happen... might not.  Either way, the code is here for you to use however
you want!
<br><br>
Huge thanks to Fredster for the face AVI file.  Face was one of about 6 AVI animations he sent to
me for use in my tutorial.  No questions asked, no conditions.  I emailed him and he went out of his way to help
me out... Huge respect!
<br><br>
An even bigger thanks to Jonathan de Blok.  If it wasn't for him, this tutorial would not exist.  He got
me interested in the AVI format by sending me bits of code from his own personal AVI player.  He also went out of
his way to answer any questions that I had in regards to his code.  It's important to note that nothing was
borrowed or taken from his code, it was used only to understand how an AVI player works.  My player opens,
decodes and plays AVI files using very different code!
<br><br>
Thanks to everyone for the great support!  This site would be nothing without it's visitors!!!
<br><br>
<b>Jeff Molofee</b> (<b>NeHe</b>)
<br><br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/vc/lesson35.zip">Visual C++</a> Code For This Lesson.
<br><br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/bcb6/lesson35_bcb6.zip">Borland C++ Builder 6</a> Code For This Lesson. ( Conversion by <a href="mailto:christian@tugzip.com">Christian Kindahl</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/cwarrior/lesson35.zip">Code Warrior 5.3</a> Code For This Lesson. ( Conversion by <a href="mailto:DelusionalBeing@hotmail.com">Scott Lupton</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/delphi/lesson35.zip">Delphi</a> Code For This Lesson. ( Conversion by <a href="mailto:michal_praha@seznam.cz">Michal Tucek</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/devc/lesson35.zip">Dev C++</a> Code For This Lesson. ( Conversion by <a href="mailto:zealouselixir@mchsi.com">Warren Moore</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/linux/lesson35.tar.gz">Linux</a> Code For This Lesson. ( Conversion by <a href="mailto:matthias.haack@epost.de">Matthias Haack</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/vs_net/lesson35.zip">Visual Studio .NET</a> Code For This Lesson. ( Conversion by <a href="mailto:ultimatezeus@hotmail.com">Grant James</a> )<br>
<br><br>
<br><br>
<table border="0" width="100%">
<tbody><tr><td align="left" width="50%"><b><font size="-1"><a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=34">&lt; Lesson 34</a></font></b></td>
<td align="right" width="50%"><b><font size="-1"><a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=36">Lesson 36 &gt;</a></font></b></td>
</tr></tbody></table>
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table>

</body></html>