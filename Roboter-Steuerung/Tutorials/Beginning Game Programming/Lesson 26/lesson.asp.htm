<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">



<title>NeHe Productions: OpenGL Lesson #26</title>
<meta name="author" content="Jeff Molofee">
<meta name="description" content="OpenGL Tutorials, Demos, Games and More...">
<meta name="keywords" content="opengl, tutorial, article, demo, game, blend, texturemap, lighting, contest, 3D">
<link rel="stylesheet" type="text/css" href="lesson.asp-Dateien/rgb.css">
</head><body bgcolor="black" link="#aaccff" text="white" vlink="#aaccff">

<table border="0" width="100%"><tbody><tr><td align="center">
<!-- Begin -  Site: GameDev.net Zone: NeHe 728x90 -->
<script language="javascript" type="text/javascript">
<!--
var browName = navigator.appName;
var SiteID = 1;
var ZoneID = 4;
var browDateTime = (new Date()).getTime();
if (browName=='Netscape')
{
document.write('<s'+'cript lang' + 'uage="jav' + 'ascript" src="http://www.gamedev.net/banman/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;Browser=NETSCAPE4&amp;PageID=61252&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '">'); document.write('</'+'scr'+'ipt>');
}
if (browName!='Netscape')
{
document.write('<s'+'cript lang' + 'uage="jav' + 'ascript" src="http://www.gamedev.net/banman/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;PageID=61252&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '">'); document.write('</'+'scr'+'ipt>');
}
// --> 
</script><script language="javascript" src="lesson.asp-Dateien/a.js"></script><a href="http://www.gamedev.net/banman/a.aspx?Task=Click&amp;ZoneID=4&amp;CampaignID=609&amp;AdvertiserID=11&amp;BannerID=673&amp;SiteID=1&amp;RandomNumber=1973920635&amp;Keywords=" target="_Blank"><img src="lesson.asp-Dateien/BGPleader.png" alt="" align="Center" border="0" height="90" width="728"></a><br>
<noscript> <a
href="http://www.gamedev.net/banman/a.aspx?ZoneID=4&amp;Task=Click&amp;Mode=HTML&amp;SiteID=1&amp;PageID=70554"
target="_blank"> <img
src="http://www.gamedev.net/banman/a.aspx?ZoneID=4&amp;Task=Get&amp;Mode=HTML&amp;SiteID=1&amp;PageID=70554"
width="728" height="90" border="0" alt=""></a>
</noscript>
<!-- End -  Site: GameDev.net Zone: NeHe 728x90 --></td></tr></tbody></table><br>

<table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tinylogo" height="130" width="326"><img src="lesson.asp-Dateien/blank.gif" alt="NeHe Productions" height="130" width="326"></td><td class="indexheading" align="center" valign="middle"><font class="text"><font class="theme" size="+3"><b><i>Lesson: 26</i></b></font></font></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">Welcome to another exciting tutorial.  The code for this tutorial was written by Banu Octavian.  The tutorial was of course
written by myself (NeHe).  In this tutorial you will learn how to create EXTREMELY realistic reflections.  Nothing fake
here!  The objects being reflected will not show up underneath the floor or on the other side of a wall.  True reflections!
<br><br>
A very important thing to note about this tutorial:  Because the Voodoo 1, 2 and some other cards do not support the stencil
buffer, this demo will NOT run on those cards.  It will ONLY run on cards that support the stencil buffer.  If you're not
sure if your card supports the stencil buffer, download the code, and try running the demo.  Also, this demo requires a
fairly decent processor and graphics card.  Even on my GeForce I notice there is a little slow down at times.  This demo
runs best in 32 bit color mode!
<br><br>
As video cards get better, and processors get faster, I can see the stencil buffer becoming more popular.  If you have the
hardware and you're ready to reflect, read on!
<br><br>
The first part of the code is fairly standard.  We include all necessary header files, and set up our Device Context,
Rendering Context, etc.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>#include	&lt;windows.h&gt;							<font class="theme">// Header File For Windows</font>
#include	&lt;gl\gl.h&gt;							<font class="theme">// Header File For The OpenGL32 Library</font>
#include	&lt;gl\glu.h&gt;							<font class="theme">// Header File For The GLu32 Library</font>
#include	&lt;gl\glaux.h&gt;							<font class="theme">// Header File For The Glaux Library</font>
#include	&lt;stdio.h&gt;							<font class="theme">// Header File For Standard Input / Output</font>

HDC		hDC=NULL;							<font class="theme">// Private GDI Device Context</font>
HGLRC		hRC=NULL;							<font class="theme">// Permanent Rendering Context</font>
HWND		hWnd=NULL;							<font class="theme">// Holds Our Window Handle</font>
HINSTANCE	hInstance = NULL;						<font class="theme">// Holds The Instance Of The Application</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Next we have the standard variables to keep track of key presses (keys[ ]), whether or not the program is active
(active), and if we should use fullscreen mode or windowed mode (fullscreen).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>bool		keys[256];							<font class="theme">// Array Used For The Keyboard Routine</font>
bool		active=TRUE;							<font class="theme">// Window Active Flag Set To TRUE By Default</font>
bool		fullscreen=TRUE;						<font class="theme">// Fullscreen Flag Set To Fullscreen Mode By Default</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Next we set up our lighting variables.  LightAmb[ ] will set our ambient light.  We will use 70% red, 70% green and
70% blue, creating a light that is 70% bright white.  LightDif[ ] will set the diffuse lighting (the amount of light
evenly reflected off the surface of our object).  In this case we want to reflect full intensity light.  Lastly we have
LightPos[ ] which will be used to position our light.  In this case we want the light 4 units to the right, 4 units
up, and 6 units towards the viewer.  If we could actually see the light, it would be floating in front of the top right
corner of our screen.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre><font class="theme">// Light Parameters</font>
static GLfloat	LightAmb[] = {0.7f, 0.7f, 0.7f, 1.0f};				<font class="theme">// Ambient Light</font>
static GLfloat	LightDif[] = {1.0f, 1.0f, 1.0f, 1.0f};				<font class="theme">// Diffuse Light</font>
static GLfloat	LightPos[] = {4.0f, 4.0f, 6.0f, 1.0f};				<font class="theme">// Light Position</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We set up a variable called q for our quadratic object, xrot and yrot to keep track of rotation.
xrotspeed and yrotspeed control the speed our object rotates at.  zoom is used to zoom in and out of
the scene (we start at -7 which shows us the entire scene) and height is the height of the ball above the floor.
<br><br>
We then make room for our 3 textures with texture[3], and define WndProc().
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLUquadricObj	*q;								<font class="theme">// Quadratic For Drawing A Sphere</font>

GLfloat		xrot		=  0.0f;					<font class="theme">// X Rotation</font>
GLfloat		yrot		=  0.0f;					<font class="theme">// Y Rotation</font>
GLfloat		xrotspeed	=  0.0f;					<font class="theme">// X Rotation Speed</font>
GLfloat		yrotspeed	=  0.0f;					<font class="theme">// Y Rotation Speed</font>
GLfloat		zoom		= -7.0f;					<font class="theme">// Depth Into The Screen</font>
GLfloat		height		=  2.0f;					<font class="theme">// Height Of Ball From Floor</font>

GLuint		texture[3];							<font class="theme">// 3 Textures</font>

LRESULT	CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);				<font class="theme">// Declaration For WndProc</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The ReSizeGLScene() and LoadBMP() code has not changed so I will skip over both sections of code.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid ReSizeGLScene(GLsizei width, GLsizei height)				<font class="theme">// Resize And Initialize The GL Window</font>

AUX_RGBImageRec *LoadBMP(char *Filename)					<font class="theme">// Loads A Bitmap Image</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The load texture code is pretty standard.  You've used it many times before in the previous tutorials.  We make room for
3 textures, then we load the three images, and create linear filtered textures from the image data.  The bitmap files we
use are located in the DATA directory.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int LoadGLTextures()								<font class="theme">// Load Bitmaps And Convert To Textures</font>
{
    int Status=FALSE;								<font class="theme">// Status Indicator</font>
    AUX_RGBImageRec *TextureImage[3];						<font class="theme">// Create Storage Space For The Textures</font>
    memset(TextureImage,0,sizeof(void *)*3);					<font class="theme">// Set The Pointer To NULL</font>
    if ((TextureImage[0]=LoadBMP("Data/EnvWall.bmp")) &amp;&amp;			<font class="theme">// Load The Floor Texture</font>
        (TextureImage[1]=LoadBMP("Data/Ball.bmp")) &amp;&amp;				<font class="theme">// Load the Light Texture</font>
        (TextureImage[2]=LoadBMP("Data/EnvRoll.bmp")))				<font class="theme">// Load the Wall Texture</font>
	{   
		Status=TRUE;							<font class="theme">// Set The Status To TRUE</font>
		glGenTextures(3, &amp;texture[0]);					<font class="theme">// Create The Texture</font>
		for (int loop=0; loop&lt;3; loop++)				<font class="theme">// Loop Through 5 Textures</font>
		{
			glBindTexture(GL_TEXTURE_2D, texture[loop]);
			glTexImage2D(GL_TEXTURE_2D, 0, 3, TextureImage[loop]-&gt;sizeX, TextureImage[loop]-&gt;sizeY, 0, GL_RGB, GL_UNSIGNED_BYTE, TextureImage[loop]-&gt;data);
			glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
			glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
		}
		for (loop=0; loop&lt;3; loop++)					<font class="theme">// Loop Through 5 Textures</font>
		{
			if (TextureImage[loop])					<font class="theme">// If Texture Exists</font>
			{
				if (TextureImage[loop]-&gt;data)			<font class="theme">// If Texture Image Exists</font>
				{
					free(TextureImage[loop]-&gt;data);		<font class="theme">// Free The Texture Image Memory</font>
				}
				free(TextureImage[loop]);			<font class="theme">// Free The Image Structure</font>
			}
		}
	}
	return Status;								<font class="theme">// Return The Status</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
A new command called glClearStencil is introduced in the init code.  Passing 0 as a parameter tells OpenGL to disable
clearing of the stencil buffer.  You should be familiar with the rest of the code by now.  We load our textures and enable
smooth shading.  The clear color is set to an off blue and the clear depth is set to 1.0f.  The stencil clear value is set
to 0.  We enable depth testing, and set the depth test value to less than or equal to.  Our perspective correction is set
to nicest (very good quality) and 2d texture mapping is enabled.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int InitGL(GLvoid)								<font class="theme">// All Setup For OpenGL Goes Here</font>
{
	if (!LoadGLTextures())							<font class="theme">// If Loading The Textures Failed</font>
	{
		return FALSE;							<font class="theme">// Return False</font>
	}
	glShadeModel(GL_SMOOTH);						<font class="theme">// Enable Smooth Shading</font>
	glClearColor(0.2f, 0.5f, 1.0f, 1.0f);					<font class="theme">// Background</font>
	glClearDepth(1.0f);							<font class="theme">// Depth Buffer Setup</font>
	glClearStencil(0);							<font class="theme">// Clear The Stencil Buffer To 0</font>
	glEnable(GL_DEPTH_TEST);						<font class="theme">// Enables Depth Testing</font>
	glDepthFunc(GL_LEQUAL);							<font class="theme">// The Type Of Depth Testing To Do</font>
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);			<font class="theme">// Really Nice Perspective Calculations</font>
	glEnable(GL_TEXTURE_2D);						<font class="theme">// Enable 2D Texture Mapping</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now it's time to set up light 0.  The first line below tells OpenGL to use the values stored in LightAmb for the
Ambient light.  If you remember at the beginning of the code, the rgb values of LightAmb were all 0.7f, giving us
a white light at 70% full intensity.  We then set the Diffuse light using the values stored in LightDif and
position the light using the x,y,z values stored in LightPos.
<br><br>
After we have set the light up we can enable it with glEnable(GL_LIGHT0).  Even though the light is enabled, you will not
see it until we enable lighting with the last line of code.
<br><br>
Note: If we wanted to turn off all lights in a scene we would use glDisable(GL_LIGHTING).  If we wanted to disable
just one of our lights we would use glDisable(GL_LIGHT{0-7}).  This gives us alot of control over the lighting and what
lights are on and off.  Just remember if GL_LIGHTING is disabled, you will not see lights!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glLightfv(GL_LIGHT0, GL_AMBIENT, LightAmb);				<font class="theme">// Set The Ambient Lighting For Light0</font>
	glLightfv(GL_LIGHT0, GL_DIFFUSE, LightDif);				<font class="theme">// Set The Diffuse Lighting For Light0</font>
	glLightfv(GL_LIGHT0, GL_POSITION, LightPos);				<font class="theme">// Set The Position For Light0</font>

	glEnable(GL_LIGHT0);							<font class="theme">// Enable Light 0</font>
	glEnable(GL_LIGHTING);							<font class="theme">// Enable Lighting</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
In the first line below, we create a new quadratic object.  The second line tells OpenGL to generate smooth normals for
our quadratic object, and the third line tells OpenGL to generate texture coordinates for our quadratic.  Without the
second and third lines of code, our object would use flat shading and we wouldn't be able to texture it.
<br><br>
The fourth and fifth lines tell OpenGL to use the Sphere Mapping algorithm to generate the texture coordinates.  This
allows us to sphere map the quadratic object.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	q = gluNewQuadric();							<font class="theme">// Create A New Quadratic</font>
	gluQuadricNormals(q, GL_SMOOTH);					<font class="theme">// Generate Smooth Normals For The Quad</font>
	gluQuadricTexture(q, GL_TRUE);						<font class="theme">// Enable Texture Coords For The Quad</font>

	glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);			<font class="theme">// Set Up Sphere Mapping</font>
	glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);			<font class="theme">// Set Up Sphere Mapping</font>

	return TRUE;								<font class="theme">// Initialization Went OK</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below will draw our object (which is a cool looking environment mapped beach ball).
<br><br>
We set the color to full intensity white and bind to our BALL texture (the ball texture is a series of red, white and blue
stripes).
<br><br>
After selecting our texture, we draw a Quadratic Sphere with a radius of 0.35f, 32 slices and 16 stacks (up and down).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void DrawObject()								<font class="theme">// Draw Our Ball</font>
{
	glColor3f(1.0f, 1.0f, 1.0f);						<font class="theme">// Set Color To White</font>
	glBindTexture(GL_TEXTURE_2D, texture[1]);				<font class="theme">// Select Texture 2 (1)</font>
	gluSphere(q, 0.35f, 32, 16);						<font class="theme">// Draw First Sphere</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
After drawing the first sphere, we select a new texture (EnvRoll), set the alpha value to 40% and enable blending based on
the source alpha value.  glEnable(GL_TEXTURE_GEN_S) and glEnable(GL_TEXTURE_GEN_T) enables sphere mapping.
<br><br>
After doing all that, we redraw the sphere, disable sphere mapping and disable blending.
<br><br>
The final result is a reflection that almost looks like bright points of light mapped to the beach ball.  Because we
enable sphere mapping, the texture is always facing the viewer, even as the ball spins.  We blend so that the new texture
doesn't cancel out the old texture (a form of multitexturing).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glBindTexture(GL_TEXTURE_2D, texture[2]);				<font class="theme">// Select Texture 3 (2)</font>
	glColor4f(1.0f, 1.0f, 1.0f, 0.4f);					<font class="theme">// Set Color To White With 40% Alpha</font>
	glEnable(GL_BLEND);							<font class="theme">// Enable Blending</font>
	glBlendFunc(GL_SRC_ALPHA, GL_ONE);					<font class="theme">// Set Blending Mode To Mix Based On SRC Alpha</font>
	glEnable(GL_TEXTURE_GEN_S);						<font class="theme">// Enable Sphere Mapping</font>
	glEnable(GL_TEXTURE_GEN_T);						<font class="theme">// Enable Sphere Mapping</font>

	gluSphere(q, 0.35f, 32, 16);						<font class="theme">// Draw Another Sphere Using New Texture</font>
										<font class="theme">// Textures Will Mix Creating A MultiTexture Effect (Reflection)</font>
	glDisable(GL_TEXTURE_GEN_S);						<font class="theme">// Disable Sphere Mapping</font>
	glDisable(GL_TEXTURE_GEN_T);						<font class="theme">// Disable Sphere Mapping</font>
	glDisable(GL_BLEND);							<font class="theme">// Disable Blending</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below draws the floor that our ball hovers over.  We select the floor texture (EnvWall), and draw a single
texture mapped quad on the z-axis.  Pretty simple!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void DrawFloor()								<font class="theme">// Draws The Floor</font>
{
	glBindTexture(GL_TEXTURE_2D, texture[0]);				<font class="theme">// Select Texture 1 (0)</font>
	glBegin(GL_QUADS);							<font class="theme">// Begin Drawing A Quad</font>
		glNormal3f(0.0, 1.0, 0.0);					<font class="theme">// Normal Pointing Up</font>
		glTexCoord2f(0.0f, 1.0f);					<font class="theme">// Bottom Left Of Texture</font>
		glVertex3f(-2.0, 0.0, 2.0);					<font class="theme">// Bottom Left Corner Of Floor</font>
			
		glTexCoord2f(0.0f, 0.0f);					<font class="theme">// Top Left Of Texture</font>
		glVertex3f(-2.0, 0.0,-2.0);					<font class="theme">// Top Left Corner Of Floor</font>
			
		glTexCoord2f(1.0f, 0.0f);					<font class="theme">// Top Right Of Texture</font>
		glVertex3f( 2.0, 0.0,-2.0);					<font class="theme">// Top Right Corner Of Floor</font>
			
		glTexCoord2f(1.0f, 1.0f);					<font class="theme">// Bottom Right Of Texture</font>
		glVertex3f( 2.0, 0.0, 2.0);					<font class="theme">// Bottom Right Corner Of Floor</font>
	glEnd();								<font class="theme">// Done Drawing The Quad</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now for the fun stuff.  Here's where we combine all the objects and images to create our reflective scene.
<br><br>
We start off by clearing the screen (GL_COLOR_BUFFER_BIT) to our default clear color (off blue).  The depth
(GL_DEPTH_BUFFER_BIT) and stencil (GL_STENCIL_BUFFER_BIT) buffers are also cleared.  Make sure you include the stencil
buffer code, it's new and easy to overlook!  It's important to note when we clear the stencil buffer, we are filling it
with 0's.
<br><br>
After clearing the screen and buffers, we define our clipping plane equation.  The plane equation is used for clipping the
reflected image.
<br><br>
The equation eqr[]={0.0f,-1.0f, 0.0f, 0.0f} will be used when we draw the reflected image.  As you can see, the
value for the y-plane is a negative value.  Meaning we will only see pixels if they are drawn below the floor or at a
negative value on the y-axis.  Anything drawn above the floor will not show up when using this equation.
<br><br>
More on clipping later... read on.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int DrawGLScene(GLvoid)								<font class="theme">// Draw Everything</font>
{
	<font class="theme">// Clear Screen, Depth Buffer &amp; Stencil Buffer</font>
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

	<font class="theme">// Clip Plane Equations</font>
	double eqr[] = {0.0f,-1.0f, 0.0f, 0.0f};				<font class="theme">// Plane Equation To Use For The Reflected Objects</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
So we have cleared the screen, and defined our clipping planes.  Now for the fun stuff!
<br><br>
We start off by resetting the modelview matrix.  Which of course starts all drawing in the center of the screen.  We then
translate down 0.6f units (to add a small perspective tilt to the floor) and into the screen based on the value of
zoom.  To better explain why we translate down 0.6f units, I'll explain using a simple example.  If you were looking
at the side of a piece of paper at exactly eye level, you would barely be able to see it.  It would more than likely look
like a thin line.  If you moved the paper down a little, it would no longer look like a line.  You would see more of the
paper, because your eyes would be looking down at the page instead of directly at the edge of the paper.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glLoadIdentity();							<font class="theme">// Reset The Modelview Matrix</font>
	glTranslatef(0.0f, -0.6f, zoom);					<font class="theme">// Zoom And Raise Camera Above The Floor (Up 0.6 Units)</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Next we set the color mask.  Something new to this tutorial!  The 4 values for color mask represent red, green, blue and
alpha.  By default all the values are set to GL_TRUE.
<br><br>
If the red value of glColorMask({red},{green},{blue},{alpha}) was set to GL_TRUE, and all of the other values were 0
(GL_FALSE), the only color that would show up on the screen is red. If the value for red was 0 (GL_FALSE), but the other
values were all GL_TRUE, every color except red would be drawn to the screen.
<br><br>
We don't want anything drawn to the screen at the moment, with all of the values set to 0 (GL_FALSE), colors will not be
drawn to the screen.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glColorMask(0,0,0,0);							<font class="theme">// Set Color Mask</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now even more fun stuff... Setting up the stencil buffer and stencil testing!
<br><br>
We start off by enabling stencil testing.  Once stencil testing has been enabled, we are able to modify the stencil buffer.
<br><br>
It's very hard to explain the commands below so please bear with me, and if you have a better explanation, please let me
know.  In the code below we set up a test.  The line glStencilFunc(GL_ALWAYS, 1, 1) tells OpenGL what type of test we want
to do on each pixel when an object is drawn to the screen.
<br><br>
GL_ALWAYS just tells OpenGL the test will always pass.  The second parameter (1) is a reference value that we will test in
the third line of code, and the third parameter is a mask.  The mask is a value that is ANDed with the reference value and
stored in the stencil buffer when the test is done.  A reference value of 1 ANDed with a mask value of 1 is 1.  So if the
test goes well and we tell OpenGL to, it will place a one in the stencil buffer (reference&amp;mask=1).
<br><br>
Quick note:  Stencil testing is a per pixel test done each time an object is drawn to the screen.  The reference value ANDed
with the mask value is tested against the current stencil value ANDed with the mask value.
<br><br>
The third line of code tests for three different conditions based on the stencil function we decided to use.  The first
two parameters are GL_KEEP, and the third is GL_REPLACE.
<br><br>
The first parameter tells OpenGL what to do if the test fails.  Because the first parameter is GL_KEEP, if the test fails
(which it can't because we have the funtion set to GL_ALWAYS), we would leave the stencil value set at whatever it currently
is.
<br><br>
The second parameter tells OpenGL what do do if the stencil test passes, but the depth test fails.  In the code below,
we eventually disable depth testing so this parameter can be ignored.
<br><br>
The third parameter is the important one.  It tells OpenGL what to do if the test passes!  In our code we tell OpenGL
to replace (GL_REPLACE) the value in the stencil buffer.  The value we put into the stencil buffer is our reference value
ANDed with our mask value which is 1.
<br><br>
After setting up the type of testing we want to do, we disable depth testing and jump to the code that draws our floor.
<br><br>
In simple english I will try to sum up everything that the code does up until now...
<br><br>
We tell OpenGL not to draw any colors to the screen.  This means that when we draw the floor, it wont show up on the
screen.  BUT... each spot on the screen where the object (our floor) should be if we could see it will be tested based on
the type of stencil testing we decide to do.  The stencil buffer starts out full of 0's (empty).  We want to set the
stencil value to 1 wherever our object would have been drawn if we could see it.  So we tell OpenGL we don't care about
testing.  If a pixel should have been drawn to the screen, we want that spot marked with a 1.  GL_ALWAYS does exactly
that.  Our reference and mask values of 1 make sure that the value placed into the stencil buffer is indeed going to be
1!  As we invisibly draw, our stencil operation checks each pixel location, and replaces the 0 with a 1.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glEnable(GL_STENCIL_TEST);						<font class="theme">// Enable Stencil Buffer For "marking" The Floor</font>
	glStencilFunc(GL_ALWAYS, 1, 1);						<font class="theme">// Always Passes, 1 Bit Plane, 1 As Mask</font>
	glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);				<font class="theme">// We Set The Stencil Buffer To 1 Where We Draw Any Polygon</font>
										<font class="theme">// Keep If Test Fails, Keep If Test Passes But Buffer Test Fails</font>
										<font class="theme">// Replace If Test Passes</font>
	glDisable(GL_DEPTH_TEST);						<font class="theme">// Disable Depth Testing</font>
	DrawFloor();								<font class="theme">// Draw The Floor (Draws To The Stencil Buffer)</font>
										<font class="theme">// We Only Want To Mark It In The Stencil Buffer</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
So now we have an invisible stencil mask of the floor.  As long as stencil testing is enabled, the only places pixels will
show up are places where the stencil buffer has a value of 1.  All of the pixels on the screen where the invisible floor
was drawn will have a stencil value of 1.  Meaning as long as stencil testing is enabled, the only pixels that we will
see are the pixels that we draw in the same spot our invisible floor was defined in the stencil buffer.  The trick behind
creating a real looking reflection that reflects in the floor and nowhere else!
<br><br>
So now that we know the ball reflection will only be drawn where the floor should be, it's time to draw the reflection!
We enable depth testing, and set the color mask back to all ones (meaning all the colors will be drawn to the screen).
<br><br>
Instead of using GL_ALWAYS for our stencil function we are going to use GL_EQUAL.  We'll leave the reference and mask
values at 1.  For the stencil operation we will set all the parameters to GL_KEEP.  In english, any object we draw this
time around will actually appear on the screen (because the color mask is set to true for each color).  As long as stencil
testing is enabled pixels will ONLY be drawn if the stencil buffer has a value of 1 (reference value ANDed with the mask,
which is 1 EQUALS (GL_EQUAL) the stencil buffer value ANDed with the mask, which is also 1).  If the stencil value is
not 1 where the current pixel is being drawn it will not show up!  GL_KEEP just tells OpenGL not to modify any values in
the stencil buffer if the test passes OR fails!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glEnable(GL_DEPTH_TEST);						<font class="theme">// Enable Depth Testing</font>
	glColorMask(1,1,1,1);							<font class="theme">// Set Color Mask to TRUE, TRUE, TRUE, TRUE</font>
	glStencilFunc(GL_EQUAL, 1, 1);						<font class="theme">// We Draw Only Where The Stencil Is 1</font>
										<font class="theme">// (I.E. Where The Floor Was Drawn)</font>
	glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);					<font class="theme">// Don't Change The Stencil Buffer</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we enable the mirrored clipping plane.  This plane is defined by eqr, and only allows object to be drawn from
the center of the screen (where the floor is) down to the bottom of the screen (any negative value on the y-axis).  That
way the reflected ball that we draw can't come up through the center of the floor.  That would look pretty bad if it did.
If you don't understand what I mean, remove the first line below from the source code, and move the real ball (non
reflected) through the floor.  If clipping is not enabled, you will see the reflected ball pop out of the floor as the
real ball goes into the floor.
<br><br>
After we enable clipping plane0 (usually you can have from 0-5 clipping planes), we define the plane by telling it to use
the parameters stored in eqr.
<br><br>
We push the matrix (which basically saves the position of everything on the screen) and use glScalef(1.0f,-1.0f,1.0f) to
flip the object upside down (creating a real looking reflection).  Setting the y value of glScalef({x},{y},{z}) to a
negative value forces OpenGL to render opposite on the y-axis.  It's almost like flipping the entire screen upside down.
When position an object at a positive value on the y-axis, it will appear at the bottom of the screen instead of at the
top.  When you rotate an object towards yourself, it will rotate away from you.  Everything will be mirrored on the y-axis
until you pop the matrix or set the y value back to 1.0f instead of -1.0f using glScalef({x},{y},{z}).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glEnable(GL_CLIP_PLANE0);						<font class="theme">// Enable Clip Plane For Removing Artifacts</font>
										<font class="theme">// (When The Object Crosses The Floor)</font>
	glClipPlane(GL_CLIP_PLANE0, eqr);					<font class="theme">// Equation For Reflected Objects</font>
	glPushMatrix();								<font class="theme">// Push The Matrix Onto The Stack</font>
		glScalef(1.0f, -1.0f, 1.0f);					<font class="theme">// Mirror Y Axis</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The first line below positions our light to the location specified by LightPos.  The light should shine on the
bottom right of the reflected ball creating a very real looking light source.  The position of the light is also mirrored.
On the real ball (ball above the floor) the light is positioned at the top right of your screen, and shines on the top
right of the real ball.  When drawing the reflected ball, the light is positioned at the bottom right of your screen.
<br><br>
We then move up or down on the y-axis to the value specified by height.  Translations are mirrored, so if the value
of height is 5.0f, the position we translate to will be mirrored (-5.0f).  Positioning the reflected image under the floor,
instead of above the floor!
<br><br>
After position our reflected ball, we rotate the ball on both the x axis and y axis, based on the values of xrot
and yrot.  Keep in mind that any rotations on the x axis will also be mirrored.  So if the real ball (ball above
the floor) is rolling towards you on the x-axis, it will be rolling away from you in the reflection.
<br><br>
After positioning the reflected ball and doing our rotations we draw the ball by calling DrawObject(), and pop the matrix
(restoring things to how they were before we drew the ball).  Popping the matrix all cancels mirroring on the y-axis.
<br><br>
We then disable our clipping plane (plane0) so that we are not stuck drawing only to the bottom half of the screen, and
last, we disable stencil testing so that we can draw to other spots on the screen other than where the floor should be.
<br><br>
Note that we draw the reflected ball before we draw the floor.  I'll explain why later on.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>		glLightfv(GL_LIGHT0, GL_POSITION, LightPos);			<font class="theme">// Set Up Light0</font>
		glTranslatef(0.0f, height, 0.0f);				<font class="theme">// Position The Object</font>
		glRotatef(xrot, 1.0f, 0.0f, 0.0f);				<font class="theme">// Rotate Local Coordinate System On X Axis</font>
		glRotatef(yrot, 0.0f, 1.0f, 0.0f);				<font class="theme">// Rotate Local Coordinate System On Y Axis</font>
		DrawObject();							<font class="theme">// Draw The Sphere (Reflection)</font>
	glPopMatrix();								<font class="theme">// Pop The Matrix Off The Stack</font>
	glDisable(GL_CLIP_PLANE0);						<font class="theme">// Disable Clip Plane For Drawing The Floor</font>
	glDisable(GL_STENCIL_TEST);						<font class="theme">// We Don't Need The Stencil Buffer Any More (Disable)</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We start off this section of code by positioning our light.  The y-axis is no longer being mirrored so drawing the light
this time around will position it at the top of the screen instead of the bottom right of the screen.
<br><br>
We enable blending, disable lighting, and set the alpha value to 80% using the command glColor4f(1.0f,1.0f,1.0f,0.8f).
The blending mode is set up using glBlendFunc(), and the semi transparent floor is drawn over top of the reflected ball.
<br><br>
If we drew the floor first and then the reflected ball, the effect wouldn't look very good.  By drawing the ball and
then the floor, you can see a small amount of coloring from the floor mixed into the coloring of the ball.  If I was
looking into a BLUE mirror, I would expect the reflection to look a little blue.  By rendering the ball first, the
reflected image looks like it's tinted the color of the floor.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glLightfv(GL_LIGHT0, GL_POSITION, LightPos);				<font class="theme">// Set Up Light0 Position</font>
	glEnable(GL_BLEND);							<font class="theme">// Enable Blending (Otherwise The Reflected Object Wont Show)</font>
	glDisable(GL_LIGHTING);							<font class="theme">// Since We Use Blending, We Disable Lighting</font>
	glColor4f(1.0f, 1.0f, 1.0f, 0.8f);					<font class="theme">// Set Color To White With 80% Alpha</font>
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);			<font class="theme">// Blending Based On Source Alpha And 1 Minus Dest Alpha</font>
	DrawFloor();								<font class="theme">// Draw The Floor To The Screen</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we draw the 'real' ball (the one that floats above the floor).  We disabled lighting when we drew the floor, but now
it's time to draw another ball so we will turn lighting back on.
<br><br>
We don't need blending anymore so we disable blending.  If we didn't disable blending, the colors from the floor
would mix with the colors of our 'real' ball when it was floating over top of the floor.  We don't want the 'real' ball
to look like the reflection so we disable blending.
<br><br>
We are not going to clip the actual ball.  If the real ball goes through the floor, we should see it come out the bottom.
If we were using clipping the ball wouldn't show up after it went through the floor.  If you didn't want to see the ball
come through the floor, you would set up a clipping equation that set the Y value to +1.0f, then when the ball went through
the floor, you wouldn't see it (you would only see the ball when it was drawn on at a positive value on the y-axis.  For
this demo, there's no reason we shouldn't see it come through the floor.
<br><br>
We then translate up or down on the y-axis to the position specified by height.  Only this time the y-axis is not
mirrored, so the ball travels the opposite direction that the reflected image travels.  If we move the 'real' ball down
the reflected ball will move up.  If we move the 'real' ball up, the reflected ball will move down.
<br><br>
We rotate the 'real' ball, and again, because the y-axis is not mirrored, the ball will spin the opposite direction of
the reflected ball.  If the reflected ball is rolling towards you the 'real' ball will be rolling away from you.  This
creates the illusion of a real reflection.
<br><br>
After positioning and rotating the ball, we draw the 'real' ball by calling DrawObject().
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glEnable(GL_LIGHTING);							<font class="theme">// Enable Lighting</font>
	glDisable(GL_BLEND);							<font class="theme">// Disable Blending</font>
	glTranslatef(0.0f, height, 0.0f);					<font class="theme">// Position The Ball At Proper Height</font>
	glRotatef(xrot, 1.0f, 0.0f, 0.0f);					<font class="theme">// Rotate On The X Axis</font>
	glRotatef(yrot, 0.0f, 1.0f, 0.0f);					<font class="theme">// Rotate On The Y Axis</font>
	DrawObject();								<font class="theme">// Draw The Ball</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The following code rotates the ball on the x and y axis.  By increasing xrot by xrotspeed we rotate the ball
on the x-axis.  By increasing yrot by yrotspeed we spin the ball on the y-axis.  If xrotspeed is a
very high value in the positive or negative direction the ball will spin quicker than if xrotspeed was a low value,
closer to 0.0f.  Same goes for yrotspeed.  The higher the value, the faster the ball spins on the y-axis.
<br><br>
Before we return TRUE, we do a glFlush().  This tells OpenGL to render everything left in the GL pipeline before
continuing, and can help prevent flickering on slower video cards.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	xrot += xrotspeed;							<font class="theme">// Update X Rotation Angle By xrotspeed</font>
	yrot += yrotspeed;							<font class="theme">// Update Y Rotation Angle By yrotspeed</font>
	glFlush();								<font class="theme">// Flush The GL Pipeline</font>
	return TRUE;								<font class="theme">// Everything Went OK</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The following code will watch for key presses.  The first 4 lines check to see if you are pressing one of the 4 arrow
keys.  If you are, the ball is spun right, left, down or up.
<br><br>
The next 2 lines check to see if you are pressing the 'A' or 'Z' keys.  Pressing 'A' will zoom you in closer to the ball
and pressing 'Z' will zoom you away from the ball.
<br><br>
Pressing 'PAGE UP' will increase the value of height moving the ball up, and pressing 'PAGE DOWN' will decrease
the value of height moving the ball down (closer to the floor).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void ProcessKeyboard()								<font class="theme">// Process Keyboard Results</font>
{
	if (keys[VK_RIGHT])	yrotspeed += 0.08f;				<font class="theme">// Right Arrow Pressed (Increase yrotspeed)</font>
	if (keys[VK_LEFT])	yrotspeed -= 0.08f;				<font class="theme">// Left Arrow Pressed (Decrease yrotspeed)</font>
	if (keys[VK_DOWN])	xrotspeed += 0.08f;				<font class="theme">// Down Arrow Pressed (Increase xrotspeed)</font>
	if (keys[VK_UP])	xrotspeed -= 0.08f;				<font class="theme">// Up Arrow Pressed (Decrease xrotspeed)</font>

	if (keys['A'])		zoom +=0.05f;					<font class="theme">// 'A' Key Pressed ... Zoom In</font>
	if (keys['Z'])		zoom -=0.05f;					<font class="theme">// 'Z' Key Pressed ... Zoom Out</font>

	if (keys[VK_PRIOR])	height +=0.03f;					<font class="theme">// Page Up Key Pressed Move Ball Up</font>
	if (keys[VK_NEXT])	height -=0.03f;					<font class="theme">// Page Down Key Pressed Move Ball Down</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The KillGLWindow() code hasn't changed, so I'll skip over it.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid KillGLWindow(GLvoid)							<font class="theme">// Properly Kill The Window</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
You can skim through the following code.  Even though only one line of code has changed in CreateGLWindow(), I have
included all of the code so it's easier to follow through the tutorial.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>BOOL CreateGLWindow(char* title, int width, int height, int bits, bool fullscreenflag)
{
	GLuint		PixelFormat;						<font class="theme">// Holds The Results After Searching For A Match</font>
	WNDCLASS	wc;							<font class="theme">// Windows Class Structure</font>
	DWORD		dwExStyle;						<font class="theme">// Window Extended Style</font>
	DWORD		dwStyle;						<font class="theme">// Window Style</font>

	fullscreen=fullscreenflag;						<font class="theme">// Set The Global Fullscreen Flag</font>

	hInstance		= GetModuleHandle(NULL);			<font class="theme">// Grab An Instance For Our Window</font>
	wc.style		= CS_HREDRAW | CS_VREDRAW | CS_OWNDC;		<font class="theme">// Redraw On Size, And Own DC For Window</font>
	wc.lpfnWndProc		= (WNDPROC) WndProc;				<font class="theme">// WndProc Handles Messages</font>
	wc.cbClsExtra		= 0;						<font class="theme">// No Extra Window Data</font>
	wc.cbWndExtra		= 0;						<font class="theme">// No Extra Window Data</font>
	wc.hInstance		= hInstance;					<font class="theme">// Set The Instance</font>
	wc.hIcon		= LoadIcon(NULL, IDI_WINLOGO);			<font class="theme">// Load The Default Icon</font>
	wc.hCursor		= LoadCursor(NULL, IDC_ARROW);			<font class="theme">// Load The Arrow Pointer</font>
	wc.hbrBackground	= NULL;						<font class="theme">// No Background Required For GL</font>
	wc.lpszMenuName		= NULL;						<font class="theme">// We Don't Want A Menu</font>
	wc.lpszClassName	= "OpenGL";					<font class="theme">// Set The Class Name</font>

	if (!RegisterClass(&amp;wc))						<font class="theme">// Attempt To Register The Window Class</font>
	{
		MessageBox(NULL,"Failed To Register The Window Class.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<font class="theme">// Return FALSE</font>
	}
	
	if (fullscreen)								<font class="theme">// Attempt Fullscreen Mode?</font>
	{
		DEVMODE dmScreenSettings;					<font class="theme">// Device Mode</font>
		memset(&amp;dmScreenSettings,0,sizeof(dmScreenSettings));		<font class="theme">// Makes Sure Memory's Cleared</font>
		dmScreenSettings.dmSize=sizeof(dmScreenSettings);		<font class="theme">// Size Of The Devmode Structure</font>
		dmScreenSettings.dmPelsWidth	= width;			<font class="theme">// Selected Screen Width</font>
		dmScreenSettings.dmPelsHeight	= height;			<font class="theme">// Selected Screen Height</font>
		dmScreenSettings.dmBitsPerPel	= bits;				<font class="theme">// Selected Bits Per Pixel</font>
		dmScreenSettings.dmFields=DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT;

		<font class="theme">// Try To Set Selected Mode And Get Results.  NOTE: CDS_FULLSCREEN Gets Rid Of Start Bar</font>
		if (ChangeDisplaySettings(&amp;dmScreenSettings,CDS_FULLSCREEN)!=DISP_CHANGE_SUCCESSFUL)
		{
			<font class="theme">// If The Mode Fails, Offer Two Options.  Quit Or Use Windowed Mode</font>
			if (MessageBox(NULL,"The Requested Fullscreen Mode Is Not Supported By\nYour Video Card. Use Windowed Mode Instead?","NeHe GL",MB_YESNO|MB_ICONEXCLAMATION)==IDYES)
			{
				fullscreen=FALSE;				<font class="theme">// Windowed Mode Selected.  Fullscreen = FALSE</font>
			}
			else
			{
				<font class="theme">// Pop Up A Message Box Letting User Know The Program Is Closing</font>
				MessageBox(NULL,"Program Will Now Close.","ERROR",MB_OK|MB_ICONSTOP);
				return FALSE;					<font class="theme">// Return FALSE</font>
			}
		}
	}

	if (fullscreen)								<font class="theme">// Are We Still In Fullscreen Mode?</font>
	{
		dwExStyle=WS_EX_APPWINDOW;					<font class="theme">// Window Extended Style</font>
		dwStyle=WS_POPUP | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;		<font class="theme">// Windows Style</font>
		ShowCursor(FALSE);						<font class="theme">// Hide Mouse Pointer</font>
	}
	else
	{
		dwExStyle=WS_EX_APPWINDOW | WS_EX_WINDOWEDGE;			<font class="theme">// Window Extended Style</font>
		dwStyle=WS_OVERLAPPEDWINDOW | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;<font class="theme">// Windows Style</font>
	}

	<font class="theme">// Create The Window</font>
	if (!(hWnd=CreateWindowEx(	dwExStyle,				<font class="theme">// Extended Style For The Window</font>
					"OpenGL",				<font class="theme">// Class Name</font>
					title,					<font class="theme">// Window Title</font>
					dwStyle,				<font class="theme">// Window Style</font>
					0, 0,					<font class="theme">// Window Position</font>
					width, height,				<font class="theme">// Selected Width And Height</font>
					NULL,					<font class="theme">// No Parent Window</font>
					NULL,					<font class="theme">// No Menu</font>
					hInstance,				<font class="theme">// Instance</font>
					NULL)))					<font class="theme">// Dont Pass Anything To WM_CREATE</font>
	{
		KillGLWindow();							<font class="theme">// Reset The Display</font>
		MessageBox(NULL,"Window Creation Error.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<font class="theme">// Return FALSE</font>
	}

	static	PIXELFORMATDESCRIPTOR pfd=					<font class="theme">// pfd Tells Windows How We Want Things To Be</font>
	{
		sizeof(PIXELFORMATDESCRIPTOR),					<font class="theme">// Size Of This Pixel Format Descriptor</font>
		1,								<font class="theme">// Version Number</font>
		PFD_DRAW_TO_WINDOW |						<font class="theme">// Format Must Support Window</font>
		PFD_SUPPORT_OPENGL |						<font class="theme">// Format Must Support OpenGL</font>
		PFD_DOUBLEBUFFER,						<font class="theme">// Must Support Double Buffering</font>
		PFD_TYPE_RGBA,							<font class="theme">// Request An RGBA Format</font>
		bits,								<font class="theme">// Select Our Color Depth</font>
		0, 0, 0, 0, 0, 0,						<font class="theme">// Color Bits Ignored</font>
		0,								<font class="theme">// No Alpha Buffer</font>
		0,								<font class="theme">// Shift Bit Ignored</font>
		0,								<font class="theme">// No Accumulation Buffer</font>
		0, 0, 0, 0,							<font class="theme">// Accumulation Bits Ignored</font>
		16,								<font class="theme">// 16Bit Z-Buffer (Depth Buffer)</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The only change in this section of code is the line below.  It is *VERY IMPORTANT* you change the value from 0 to 1
or some other non zero value.  In all of the previous tutorials the value of the line below was 0.  In order to use Stencil
Buffering this value HAS to be greater than or equal to 1.  This value is the number of bits you want to use for the
stencil buffer.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>		1,								<font class="theme">// Use Stencil Buffer ( * Important * )</font>
		0,								<font class="theme">// No Auxiliary Buffer</font>
		PFD_MAIN_PLANE,							<font class="theme">// Main Drawing Layer</font>
		0,								<font class="theme">// Reserved</font>
		0, 0, 0								<font class="theme">// Layer Masks Ignored</font>
	};
	
	if (!(hDC=GetDC(hWnd)))							<font class="theme">// Did We Get A Device Context?</font>
	{
		KillGLWindow();							<font class="theme">// Reset The Display</font>
		MessageBox(NULL,"Can't Create A GL Device Context.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<font class="theme">// Return FALSE</font>
	}

	if (!(PixelFormat=ChoosePixelFormat(hDC,&amp;pfd)))				<font class="theme">// Did Windows Find A Matching Pixel Format?</font>
	{
		KillGLWindow();							<font class="theme">// Reset The Display</font>
		MessageBox(NULL,"Can't Find A Suitable PixelFormat.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<font class="theme">// Return FALSE</font>
	}

	if(!SetPixelFormat(hDC,PixelFormat,&amp;pfd))				<font class="theme">// Are We Able To Set The Pixel Format?</font>
	{
		KillGLWindow();							<font class="theme">// Reset The Display</font>
		MessageBox(NULL,"Can't Set The PixelFormat.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<font class="theme">// Return FALSE</font>
	}

	if (!(hRC=wglCreateContext(hDC)))					<font class="theme">// Are We Able To Get A Rendering Context?</font>
	{
		KillGLWindow();							<font class="theme">// Reset The Display</font>
		MessageBox(NULL,"Can't Create A GL Rendering Context.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<font class="theme">// Return FALSE</font>
	}

	if(!wglMakeCurrent(hDC,hRC))						<font class="theme">// Try To Activate The Rendering Context</font>
	{
		KillGLWindow();							<font class="theme">// Reset The Display</font>
		MessageBox(NULL,"Can't Activate The GL Rendering Context.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<font class="theme">// Return FALSE</font>
	}

	ShowWindow(hWnd,SW_SHOW);						<font class="theme">// Show The Window</font>
	SetForegroundWindow(hWnd);						<font class="theme">// Slightly Higher Priority</font>
	SetFocus(hWnd);								<font class="theme">// Sets Keyboard Focus To The Window</font>
	ReSizeGLScene(width, height);						<font class="theme">// Set Up Our Perspective GL Screen</font>

	if (!InitGL())								<font class="theme">// Initialize Our Newly Created GL Window</font>
	{
		KillGLWindow();							<font class="theme">// Reset The Display</font>
		MessageBox(NULL,"Initialization Failed.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<font class="theme">// Return FALSE</font>
	}

	return TRUE;								<font class="theme">// Success</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
WndProc() has not changed, so we will skip over it.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>LRESULT CALLBACK WndProc(	HWND	hWnd,					<font class="theme">// Handle For This Window</font>
				UINT	uMsg,					<font class="theme">// Message For This Window</font>
				WPARAM	wParam,					<font class="theme">// Additional Message Information</font>
				LPARAM	lParam)					<font class="theme">// Additional Message Information</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Nothing new here.  Typical start to WinMain().
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int WINAPI WinMain(	HINSTANCE	hInstance,				<font class="theme">// Instance</font>
			HINSTANCE	hPrevInstance,				<font class="theme">// Previous Instance</font>
			LPSTR		lpCmdLine,				<font class="theme">// Command Line Parameters</font>
			int		nCmdShow)				<font class="theme">// Window Show State</font>
{
	MSG	msg;								<font class="theme">// Windows Message Structure</font>
	BOOL	done=FALSE;							<font class="theme">// Bool Variable To Exit Loop</font>

	<font class="theme">// Ask The User Which Screen Mode They Prefer</font>
	if (MessageBox(NULL,"Would You Like To Run In Fullscreen Mode?", "Start FullScreen?",MB_YESNO|MB_ICONQUESTION)==IDNO)
	{
		fullscreen=FALSE;						<font class="theme">// Windowed Mode</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The only real big change in this section of the code is the new window title to let everyone know the tutorial is about
reflections using the stencil buffer.  Also notice that we pass the resx, resy and resbpp variables
to our window creation procedure instead of the usual 640, 480 and 16.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	<font class="theme">// Create Our OpenGL Window</font>
	if (!CreateGLWindow("Banu Octavian &amp; NeHe's Stencil &amp; Reflection Tutorial", resx, resy, resbpp, fullscreen))
	{
		return 0;							<font class="theme">// Quit If Window Was Not Created</font>
	}

	while(!done)								<font class="theme">// Loop That Runs While done=FALSE</font>
	{
		if (PeekMessage(&amp;msg,NULL,0,0,PM_REMOVE))			<font class="theme">// Is There A Message Waiting?</font>
		{
			if (msg.message==WM_QUIT)				<font class="theme">// Have We Received A Quit Message?</font>
			{
				done=TRUE;					<font class="theme">// If So done=TRUE</font>
			}
			else							<font class="theme">// If Not, Deal With Window Messages</font>
			{
				TranslateMessage(&amp;msg);				<font class="theme">// Translate The Message</font>
				DispatchMessage(&amp;msg);				<font class="theme">// Dispatch The Message</font>
			}
		}
		else								<font class="theme">// If There Are No Messages</font>
		{
			<font class="theme">// Draw The Scene.  Watch For ESC Key And Quit Messages From DrawGLScene()</font>
			if (active)						<font class="theme">// Program Active?</font>
			{
				if (keys[VK_ESCAPE])				<font class="theme">// Was Escape Pressed?</font>
				{
					done=TRUE;				<font class="theme">// ESC Signalled A Quit</font>
				}
				else						<font class="theme">// Not Time To Quit, Update Screen</font>
				{
					DrawGLScene();				<font class="theme">// Draw The Scene</font>
					SwapBuffers(hDC);			<font class="theme">// Swap Buffers (Double Buffering)</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Instead of checking for key presses in WinMain(), we jump to our keyboard handling routine called ProcessKeyboard().
Notice the ProcessKeyboard() routine is only called if the program is active!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>					ProcessKeyboard();			<font class="theme">// Processed Keyboard Presses</font>
				}
			}
		}
	}

	<font class="theme">// Shutdown</font>
	KillGLWindow();								<font class="theme">// Kill The Window</font>
	return (msg.wParam);							<font class="theme">// Exit The Program</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
I really hope you've enjoyed this tutorial.  I know it could use a little more work.  It was one of the more difficult
tutorials that I have written.  It's easy for me to understand what everything is doing, and what commands I need to use
to create cool effects, but when you sit down and actually try to explain things keeping in mind that most people have
never even heard of the stencil buffer, it's tough!  If you notice anything that could be made clearer or if you find any
mistakes in the tutorial please let me know.  As always, I want this tutorial to be the best it can possibly be, your
feedback is greatly appreciated.
<br><br>
<b>Banu Octavian</b> (<b>Choko</b>)
<br><br>
<b>Jeff Molofee</b> (<b>NeHe</b>)
<br><br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/vc/lesson26.zip">Visual C++</a> Code For This Lesson.
<br><br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/bcb6/lesson26_bcb6.zip">Borland C++ Builder 6</a> Code For This Lesson. ( Conversion by <a href="mailto:christian@tugzip.com">Christian Kindahl</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/cwarrior/lesson26.zip">Code Warrior 5.3</a> Code For This Lesson. ( Conversion by <a href="mailto:DelusionalBeing@hotmail.com">Scott Lupton</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/delphi/lesson26.zip">Delphi</a> Code For This Lesson. ( Conversion by <a href="mailto:michal_praha@seznam.cz">Michal Tucek</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/devc/lesson26.zip">Dev C++</a> Code For This Lesson. ( Conversion by <a href="mailto:danprogram@hotmail.com">Dan</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/euphoria/lesson26.zip">Euphoria</a> Code For This Lesson. ( Conversion by <a href="mailto:1evan@sbcglobal.net">Evan Marshall</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/lccwin32/lccwin32_lesson26.zip">LCC Win32</a> Code For This Lesson. ( Conversion by <a href="mailto:rwishlaw@shaw.ca">Robert Wishlaw</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/linux/lesson26.tar.gz">Linux</a> Code For This Lesson. ( Conversion by <a href="mailto:grayfox@pobox.sk">Gray Fox</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/lwjgl/lesson26.jar">LWJGL</a> Code For This Lesson. ( Conversion by <a href="mailto:mark.bernard@rogers.com">Mark Bernard</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/macosxcocoa/lesson26.zip">Mac OS X/Cocoa</a> Code For This Lesson. ( Conversion by <a href="mailto:blb@pobox.com">Bryan Blackburn</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/vs_net/lesson26.zip">Visual Studio .NET</a> Code For This Lesson. ( Conversion by <a href="mailto:ultimatezeus@hotmail.com">Grant James</a> )<br>
<br><br>
<br><br>
<table border="0" width="100%">
<tbody><tr><td align="left" width="50%"><b><font size="-1"><a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=25">&lt; Lesson 25</a></font></b></td>
<td align="right" width="50%"><b><font size="-1"><a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=27">Lesson 27 &gt;</a></font></b></td>
</tr></tbody></table>
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table>

</body></html>