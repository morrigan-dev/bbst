<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">



<title>NeHe Productions: OpenGL Lesson #25</title>
<meta name="author" content="Jeff Molofee">
<meta name="description" content="OpenGL Tutorials, Demos, Games and More...">
<meta name="keywords" content="opengl, tutorial, article, demo, game, blend, texturemap, lighting, contest, 3D">
<link rel="stylesheet" type="text/css" href="lesson.asp-Dateien/rgb.css">
</head><body bgcolor="black" link="#aaccff" text="white" vlink="#aaccff">

<table border="0" width="100%"><tbody><tr><td align="center">
<!-- Begin -  Site: GameDev.net Zone: NeHe 728x90 -->
<script language="javascript" type="text/javascript">
<!--
var browName = navigator.appName;
var SiteID = 1;
var ZoneID = 4;
var browDateTime = (new Date()).getTime();
if (browName=='Netscape')
{
document.write('<s'+'cript lang' + 'uage="jav' + 'ascript" src="http://www.gamedev.net/banman/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;Browser=NETSCAPE4&amp;PageID=61252&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '">'); document.write('</'+'scr'+'ipt>');
}
if (browName!='Netscape')
{
document.write('<s'+'cript lang' + 'uage="jav' + 'ascript" src="http://www.gamedev.net/banman/a.aspx?ZoneID=' + ZoneID + '&amp;Task=Get&amp;IFR=False&amp;PageID=61252&amp;SiteID=' + SiteID + '&amp;Random=' + browDateTime + '">'); document.write('</'+'scr'+'ipt>');
}
// --> 
</script><script language="javascript" src="lesson.asp-Dateien/a.js"></script><script type="text/javascript"><!--
google_ad_client = "pub-3167291168602081";
google_alternate_ad_url = "http://www.gamedev.net/banman/banman.asp?ZoneID=21&Task=Get";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_type = "text_image";
google_ad_channel ="";
google_color_border = "336699";
google_color_bg = "FFFFFF";
google_color_link = "0000FF";
google_color_url = "008000";
google_color_text = "000000";
//--></script>
<script type="text/javascript" src="lesson.asp-Dateien/show_ads.js">
</script>
<noscript> <a
href="http://www.gamedev.net/banman/a.aspx?ZoneID=4&amp;Task=Click&amp;Mode=HTML&amp;SiteID=1&amp;PageID=70554"
target="_blank"> <img
src="http://www.gamedev.net/banman/a.aspx?ZoneID=4&amp;Task=Get&amp;Mode=HTML&amp;SiteID=1&amp;PageID=70554"
width="728" height="90" border="0" alt=""></a>
</noscript>
<!-- End -  Site: GameDev.net Zone: NeHe 728x90 --></td></tr></tbody></table><br>

<table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tinylogo" height="130" width="326"><img src="lesson.asp-Dateien/blank.gif" alt="NeHe Productions" height="130" width="326"></td><td class="indexheading" align="center" valign="middle"><font class="text"><font class="theme" size="+3"><b><i>Lesson: 25</i></b></font></font></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">Welcome to yet another exciting tutorial!  This time we will focus on the effect rather than the graphics, although the
final result is pretty cool looking!  In this tutorial you will learn how to morph seamlessly from one object to another.
Similar to the effect I use in the dolphin demo.  Although there are a few catches.  First thing to note is that each
object must have the same amount of points.  Very rare to luck out and get 3 object made up of exactly the same amount
of vertices, but it just so happens, in this tutorial we have 3 objects with exactly the same amount of points :)
Don't get me wrong, you can use objects with different values, but the transition from one object to another is odd looking
and not as smooth.
<br><br>
You will also learn how to read object data from a file.  Similar to the format used in lesson 10, although it shouldn't be
hard to modify the code to read .ASC files or some other text type data files.  In general, it's a really cool effect, a
really cool tutorial, so lets begin!
<br><br>
We start off as usual.  Including all the required header files, along with the math and standard input / output headers.
Notice we don't include glaux.  That's because we'll be drawing points rather than textures in this tutorial.  After you've
got the tutorial figured out, you can try playing with Polygons, Lines, and Textures!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>#include	&lt;windows.h&gt;								<font class="theme">// Header File For Windows</font>
#include	&lt;math.h&gt;								<font class="theme">// Math Library Header File</font>
#include	&lt;stdio.h&gt;								<font class="theme">// Header File For Standard Input/Output</font>
#include	&lt;gl\gl.h&gt;								<font class="theme">// Header File For The OpenGL32 Library</font>
#include	&lt;gl\glu.h&gt;								<font class="theme">// Header File For The GLu32 Library</font>

HDC		hDC=NULL;								<font class="theme">// Device Context Handle</font>
HGLRC		hRC=NULL;								<font class="theme">// Rendering Context Handle</font>
HWND		hWnd=NULL;								<font class="theme">// Window Handle</font>
HINSTANCE	hInstance;								<font class="theme">// Instance Handle</font>

bool		keys[256];								<font class="theme">// Key Array</font>
bool		active=TRUE;								<font class="theme">// Program's Active</font>
bool		fullscreen=TRUE;							<font class="theme">// Default Fullscreen To True</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
After setting up all the standard variables, we will add some new variables.  xrot, yrot and zrot will
hold the current rotation values for the x, y and z axes of the onscreen object.  xspeed, yspeed and
zspeed will control how fast the object is rotating on each axis.  cx, cy and cz control the
position of the object on the screen (where it's drawn left to right cx, up and down cy and into and out of
the screen cz).
<br><br>
The variable key is a variable that I have included to make sure the user doesn't try to morph from the first shape
back into the first shape.  This would be pretty pointless and would cause a delay while the points were trying to morph to
the position they're already in.
<br><br>
step is a counter variable that counts through all the steps specified by steps.  If you increase the value
of steps it will take longer for the object to morph, but the movement of the points as they morph will be smoother.
Once step is equal to steps we know the morphing has been completed.
<br><br>
The last variable morph lets our program know if it should be morphing the points or leaving them where they are.
If it's TRUE, the object is in the process of morphing from one shape to another.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLfloat		xrot,yrot,zrot,								<font class="theme">// X, Y &amp; Z Rotation</font>
		xspeed,yspeed,zspeed,							<font class="theme">// X, Y &amp; Z Spin Speed</font>
		cx,cy,cz=-15;								<font class="theme">// X, Y &amp; Z Position</font>

int		key=1;									<font class="theme">// Used To Make Sure Same Morph Key Is Not Pressed</font>
int		step=0,steps=200;							<font class="theme">// Step Counter And Maximum Number Of Steps</font>
bool		morph=FALSE;								<font class="theme">// Default morph To False (Not Morphing)</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we create a structure to keep track of a vertex.  The structure will hold the x, y and z values of any point on the
screen.  The variables x, y &amp; z are all floating point so we can position the point anywhere on the
screen with great accuracy.  The structure name is VERTEX.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>typedef struct										<font class="theme">// Structure For 3D Points</font>
{
	float	x, y, z;								<font class="theme">// X, Y &amp; Z Points</font>
} VERTEX;										<font class="theme">// Called VERTEX</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We already have a structure to keep track of vertices, and we know that an object is made up of many vertices so lets
create an OBJECT structure.  The first variable verts is an integer value that will hold the number of
vertices required to make up an object.  So if our object has 5 points, the value of verts will be equal to 5.
We will set the value later in the code.  For now, all you need to know is that verts keeps track of how many points
we use to create the object.
<br><br>
The variable points will reference a single VERTEX (x, y and z values).  This allows us to grab the x, y or z value
of any point using points[{point we want to access}].{x, y or z}.
<br><br>
The name of this structure is... you guessed it... OBJECT!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>typedef	struct										<font class="theme">// Structure For An Object</font>
{
 int		verts;									<font class="theme">// Number Of Vertices For The Object</font>
 VERTEX		*points;								<font class="theme">// One Vertice (Vertex x,y &amp; z)</font>
} OBJECT;										<font class="theme">// Called OBJECT</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now that we have created a VERTEX structure and an OBJECT structure we can define some objects.
<br><br>
The variable maxver will be used to keep track of the maximum number of variables used in any of the objects.  If
one object only had 5 points, another had 20, and the last object had 15, the value of maxver would be equal to the
greatest number of points used.  So maxver would be equal to 20.
<br><br>
After we define maxver we can define the objects.  morph1, morph2, morph3, morph4 &amp;
helper are all defined as an OBJECT.  *sour &amp; *dest are defined as OBJECT* (pointer to an
object).  The object is made up of vertices (VERTEX).  The first 4 morph{num} objects will hold the 4
objects we want to morph to and from.  helper will be used to keep track of changes as the object is morphed.
*sour will point to the source object and *dest will point to the object we want to morph to (destination
object).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int		maxver;									<font class="theme">// Will Eventually Hold The Maximum Number Of Vertices</font>
OBJECT		morph1,morph2,morph3,morph4,						<font class="theme">// Our 4 Morphable Objects (morph1,2,3 &amp; 4)</font>
		helper,*sour,*dest;		 					<font class="theme">// Helper Object, Source Object, Destination Object</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Same as always, we declare WndProc().
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>LRESULT	CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);					<font class="theme">// Declaration</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below allocates memory for each object, based on the number of vertices we pass to n.  *k will point
to the object we want to allocate memory for.
<br><br>
The line inside the { }'s allocates the memory for object k's points.  A point is an entire VERTEX (3 floats).
The memory allocated is the size of VERTEX (3 floats) multiplied by the number of points (n).  So if there were
10 points (n=10) we would be allocating room for 30 floating point values (3 floats * 10 points).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void objallocate(OBJECT *k,int n)							<font class="theme">// Allocate Memory For Each Object</font>
{											<font class="theme">// And Defines points</font>
	k-&gt;points=(VERTEX*)malloc(sizeof(VERTEX)*n);					<font class="theme">// Sets points Equal To VERTEX * Number Of Vertices</font>
}											<font class="theme">// (3 Points For Each Vertice)</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The following code frees the object, releasing the memory used to create the object.  The object is passed as k.
The free command tells our program to release all the points used to make up our object (k).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void objfree(OBJECT *k)									<font class="theme">// Frees The Object (Releasing The Memory)</font>
{
	free(k-&gt;points);								<font class="theme">// Frees Points</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below reads a string of text from a file.  The pointer to our file structure is passed to *f.  The variable
string will hold the text that we have read in.
<br><br>
We start off by creating a do / while loop.  fgets() will read up to 255 characters from our file f and store the
characters at *string.  If the line read is blank (carriage return \n), the loop will start over, attempting to find
a line with text.  The while() statement checks for blank lines and if found starts over again.
<br><br>
After the string has been read in we return.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void readstr(FILE *f,char *string)							<font class="theme">// Reads A String From File (f)</font>
{
	do										<font class="theme">// Do This</font>
	{
		fgets(string, 255, f);							<font class="theme">// Gets A String Of 255 Chars Max From f (File)</font>
	} while ((string[0] == '/') || (string[0] == '\n'));				<font class="theme">// Read Again If Line Has Comment Or Is Blank</font>
	return;										<font class="theme">// Return</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we load in an object.  *name points to the filename.  *k points to the object we wish to load data
into.
<br><br>
We start off with an integer variable called ver.  ver will hold the number of vertices used to build the
object.
<br><br>
The variables rx, ry &amp; rz will hold the x, y &amp; z values of each vertex.
<br><br>
The variable filein is the pointer to our file structure, and oneline[ ] will be used to hold 255 characters
of text.
<br><br>
We open the file name for read in text translated mode (meaning CTRL-Z represents the end of a line).  Then we read
in a line of text using readstr(filein,oneline).  The line of text will be stored in oneline.
<br><br>
After we have read in the text, we scan the line of text (oneline) for the phrase "Vertices: {some number}{carriage
return}.  If the text is found, the number is stored in the variable ver.  This number is the number of vertices
used to create the object.  If you look at the object text files, you'll see that the first line of text is:
Vertices: {some number}.
<br><br>
After we know how many vertices are used we store the results in the objects verts variable.  Each object could have
a different value if each object had a different number of vertices.
<br><br>
The last thing we do in this section of code is allocate memory for the object.  We do this by calling
objallocate({object name},{number of verts}).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void objload(char *name,OBJECT *k)							<font class="theme">// Loads Object From File (name)</font>
{
	int	ver;									<font class="theme">// Will Hold Vertice Count</font>
	float	rx,ry,rz;								<font class="theme">// Hold Vertex X, Y &amp; Z Position</font>
	FILE	*filein;								<font class="theme">// Filename To Open</font>
	char	oneline[255];								<font class="theme">// Holds One Line Of Text (255 Chars Max)</font>

	filein = fopen(name, "rt");							<font class="theme">// Opens The File For Reading Text In Translated Mode</font>
											<font class="theme">// CTRL Z Symbolizes End Of File In Translated Mode</font>
	readstr(filein,oneline);							<font class="theme">// Jumps To Code That Reads One Line Of Text From The File</font>
	sscanf(oneline, "Vertices: %d\n", &amp;ver);					<font class="theme">// Scans Text For "Vertices: ".  Number After Is Stored In ver</font>
	k-&gt;verts=ver;									<font class="theme">// Sets Objects verts Variable To Equal The Value Of ver</font>
	objallocate(k,ver);								<font class="theme">// Jumps To Code That Allocates Ram To Hold The Object</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We know how many vertices the object has.  We have allocated memory, now all that is left to do is read in the vertices.
We create a loop using the variable i.  The loop will go through all the vertices.
<br><br>
Next we read in a line of text.  This will be the first line of valid text underneath the "Vertices: {some number}" line.
What we should end up reading is a line with floating point values for x, y &amp; z.
<br><br>
The line is analyzed with sscanf() and the three floating point values are extracted and stored in rx, ry
and rz.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	for (int i=0;i&lt;ver;i++)								<font class="theme">// Loops Through The Vertices</font>
	{
		readstr(filein,oneline);						<font class="theme">// Reads In The Next Line Of Text</font>
		sscanf(oneline, "%f %f %f", &amp;rx, &amp;ry, &amp;rz);				<font class="theme">// Searches For 3 Floating Point Numbers, Store In rx,ry &amp; rz</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The following three lines are hard to explain in plain english if you don't understand structures, etc, but I'll try my
best :)
<br><br>
The line k-&gt;points[i].x=rx can be broken down like this:
<br><br>
rx is the value on the x axis for one of the points.<br>
points[i].x is the x axis position of point[i].<br>
If i is 0 then were are setting the x axis value of point 1, if i is 1, we are setting the x axis value of
point 2, and so on.<br>
points[i] is part of our object (which is represented as k).
<br><br>
So if i is equal to 0, what we are saying is:  The x axis of point 1 (point[0].x) in our object (k) equals
the x axis value we just read from the file (rx).
<br><br>
The other two lines set the y &amp; z axis values for each point in our object.
<br><br>
We loop through all the vertices.  If there are not enough vertices, an error might occur, so make sure the text at the
beginning of the file "Vertices: {some number}" is actually the number of vertices in the file.  Meaning if the top line
of the file says "Vertices: 10", there had better be 10 Vertices (x, y and z values)!
<br><br>
After reading in all of the vertices we close the file, and check to see if the variable ver is greater than the
variable maxver.  If ver is greater than maxver, we set maxver to equal ver.  That way
if we read in one object and it has 20 vertices, maxver will become 20.  If we read in another object, and it has
40 vertices, maxver will become 40.  That way we know how many vertices our largest object has.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>		k-&gt;points[i].x = rx;							<font class="theme">// Sets Objects (k) points.x Value To rx</font>
		k-&gt;points[i].y = ry;							<font class="theme">// Sets Objects (k) points.y Value To ry</font>
		k-&gt;points[i].z = rz;							<font class="theme">// Sets Objects (k) points.z Value To rz</font>
	}
	fclose(filein);									<font class="theme">// Close The File</font>

	if(ver&gt;maxver) maxver=ver;							<font class="theme">// If ver Is Greater Than maxver Set maxver Equal To ver</font>
}											<font class="theme">// Keeps Track Of Highest Number Of Vertices Used</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The next bit of code may look a little intimidating... it's NOT :)  I'll explain it so clearly you'll laugh when you next
look at it.
<br><br>
What the code below does is calculates a new position for each point when morphing is enabled.  The number of the point to
calculate is stored in i.  The results will be returned in the VERTEX structure.
<br><br>
The first variable we create is a VERTEX called a.  This will give a an x, y and z value.
<br><br>
Lets look at the first line.  The x value of the VERTEX a equals the x value of point[i] (point[i].x)
in our SOURCE object minus the x value of point[i] (point[i].x) in our DESTINATION object divided by
steps.
<br><br>
So lets plug in some numbers.  Lets say our source objects first x value is 40 and our destination objects first x value is
20.  We already know that steps is equal to 200!  So that means that a.x=(40-20)/200... a.x=(20)/200...
a.x=0.1.
<br><br>
What this means is that in order to move from 40 to 20 in 200 steps, we need to move by 0.1 units each calculation.  To
prove this calculation, multiply 0.1 by 200, and you get 20.  40-20=20 :)
<br><br>
We do the same thing to calculate how many units to move on both the y axis and the z axis for each point.  If you increase
the value of steps the movements will be even more fine (smooth), but it will take longer to morph from one position
to another.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>VERTEX calculate(int i)									<font class="theme">// Calculates Movement Of Points During Morphing</font>
{
	VERTEX a;									<font class="theme">// Temporary Vertex Called a</font>
	a.x=(sour-&gt;points[i].x - dest-&gt;points[i].x) / steps;				<font class="theme">// a.x Value Equals Source x - Destination x Divided By Steps</font>
	a.y=(sour-&gt;points[i].y - dest-&gt;points[i].y) / steps;				<font class="theme">// a.y Value Equals Source y - Destination y Divided By Steps</font>
	a.z=(sour-&gt;points[i].z - dest-&gt;points[i].z) / steps;				<font class="theme">// a.z Value Equals Source z - Destination z Divided By Steps</font>
	return a;									<font class="theme">// Return The Results</font>
}											<font class="theme">// This Makes Points Move At A Speed So They All Get To Their</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The ReSizeGLScene() code hasn't changed so we'll skip over it.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid ReSizeGLScene(GLsizei width, GLsizei height)					<font class="theme">// Resize And Initialize The GL Window</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
In the code below we set blending for translucency.  This allows us to create neat looking trails when the points are moving.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int InitGL(GLvoid)									<font class="theme">// All Setup For OpenGL Goes Here</font>
{
	glBlendFunc(GL_SRC_ALPHA,GL_ONE);						<font class="theme">// Set The Blending Function For Translucency</font>
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);						<font class="theme">// This Will Clear The Background Color To Black</font>
	glClearDepth(1.0);								<font class="theme">// Enables Clearing Of The Depth Buffer</font>
	glDepthFunc(GL_LESS);								<font class="theme">// The Type Of Depth Test To Do</font>
	glEnable(GL_DEPTH_TEST);							<font class="theme">// Enables Depth Testing</font>
	glShadeModel(GL_SMOOTH);							<font class="theme">// Enables Smooth Color Shading</font>
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);				<font class="theme">// Really Nice Perspective Calculations</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We set the maxver variable to 0 to start off.  We haven't read in any objects so we don't know what the maximum
amount of vertices will be.
<br><br>
Next well load in 3 objects.  The first object is a sphere.  The data for the sphere is stored in the file sphere.txt.
The data will be loaded into the object named morph1.  We also load a torus, and a tube into objects morph2
and morph3.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	maxver=0;									<font class="theme">// Sets Max Vertices To 0 By Default</font>
	objload("data/sphere.txt",&amp;morph1);						<font class="theme">// Load The First Object Into morph1 From File sphere.txt</font>
	objload("data/torus.txt",&amp;morph2);						<font class="theme">// Load The Second Object Into morph2 From File torus.txt</font>
	objload("data/tube.txt",&amp;morph3);						<font class="theme">// Load The Third Object Into morph3 From File tube.txt</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The 4th object isn't read from a file.  It's a bunch of dots randomly scattered around the screen.  Because we're not
reading the data from a file, we have to manually allocate the memory by calling objallocate(&amp;morph4,468).  468 means
we want to allocate enough space to hold 468 vertices (the same amount of vertices the other 3 objects have).
<br><br>
After allocating the space, we create a loop that assigns a random x, y and z value to each point.  The random value will
be a floating point value from +7 to -7.  (14000/1000=14... minus 7 gives us a max value of +7... if the random number is
0, we have a minimum value of 0-7 or -7).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	objallocate(&amp;morph4,486);							<font class="theme">// Manually Reserver Ram For A 4th 468 Vertice Object (morph4)</font>
	for(int i=0;i&lt;486;i++)								<font class="theme">// Loop Through All 468 Vertices</font>
	{
		morph4.points[i].x=((float)(rand()%14000)/1000)-7;			<font class="theme">// morph4 x Point Becomes A Random Float Value From -7 to 7</font>
		morph4.points[i].y=((float)(rand()%14000)/1000)-7;			<font class="theme">// morph4 y Point Becomes A Random Float Value From -7 to 7</font>
		morph4.points[i].z=((float)(rand()%14000)/1000)-7;			<font class="theme">// morph4 z Point Becomes A Random Float Value From -7 to 7</font>
	}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
We then load the sphere.txt as a helper object.  We never want to modify the object data in morph{1/2/3/4} directly.
We modify the helper data to make it become one of the 4 shapes.  Because we start out displaying morph1
(a sphere) we start the helper out as a sphere as well.
<br><br>
After all of the objects are loaded, we set the source and destination objects (sour and dest) to equal
morph1, which is the sphere.  This way everything starts out as a sphere.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	objload("data/sphere.txt",&amp;helper);						<font class="theme">// Load sphere.txt Object Into Helper (Used As Starting Point)</font>
	sour=dest=&amp;morph1;								<font class="theme">// Source &amp; Destination Are Set To Equal First Object (morph1)</font>

	return TRUE;									<font class="theme">// Initialization Went OK</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now for the fun stuff.  The actual rendering code :)
<br><br>
We start off normal.  Clear the screen, depth buffer and reset the modelview matrix.  Then we position the object on the
screen using the values stored in cx, cy and cz.
<br><br>
Rotations are done using xrot, yrot and zrot.
<br><br>
The rotation angle is increased based on xspeed, yspeed and zspeed.
<br><br>
Finally 3 temporary variables are created tx, ty and tz, along with a new VERTEX called q.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>void DrawGLScene(GLvoid)								<font class="theme">// Here's Where We Do All The Drawing</font>
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);				<font class="theme">// Clear The Screen And The Depth Buffer</font>
	glLoadIdentity();								<font class="theme">// Reset The View</font>
	glTranslatef(cx,cy,cz);								<font class="theme">// Translate To The Current Position</font>
	glRotatef(xrot,1,0,0);								<font class="theme">// Rotate On The X Axis By xrot</font>
	glRotatef(yrot,0,1,0);								<font class="theme">// Rotate On The Y Axis By yrot</font>
	glRotatef(zrot,0,0,1);								<font class="theme">// Rotate On The Z Axis By zrot</font>

	xrot+=xspeed; yrot+=yspeed; zrot+=zspeed;					<font class="theme">// Increase xrot,yrot &amp; zrot by xspeed, yspeed &amp; zspeed</font>

	GLfloat tx,ty,tz;								<font class="theme">// Temp X, Y &amp; Z Variables</font>
	VERTEX q;									<font class="theme">// Holds Returned Calculated Values For One Vertex</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we draw the points and do our calculations if morphing is enabled.  glBegin(GL_POINTS) tells OpenGL that each vertex
that we specify will be drawn as a point on the screen.
<br><br>
We create a loop to loop through all the vertices.  You could use maxver, but because every object has the same
number of vertices we'll use morph1.verts.
<br><br>
Inside the loop we check to see if morph is TRUE.  If it is we calculate the movement for the current point (i).
q.x, q.y and q.z will hold the results.  If morph is false, q.x, q.y and q.z
will be set to 0 (preventing movement).
<br><br>
The points in the helper object are moved based on the results of we got from calculate(i).  (remember earlier that
we calculated a point would have to move 0.1 units to make it from 40 to 20 in 200 steps).
<br><br>
We adjust the each points value on the x, y and z axis by subtracting the number of units to move from helper.
<br><br>
The new helper point is stored in tx, ty and tz.  (t{x/y/z}=helper.points[i].{x/y/z}).
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	glBegin(GL_POINTS);								<font class="theme">// Begin Drawing Points</font>
		for(int i=0;i&lt;morph1.verts;i++)						<font class="theme">// Loop Through All The Verts Of morph1 (All Objects Have</font>
		{									<font class="theme">// The Same Amount Of Verts For Simplicity, Could Use maxver Also)</font>
			if(morph) q=calculate(i); else q.x=q.y=q.z=0;			<font class="theme">// If morph Is True Calculate Movement Otherwise Movement=0</font>
			helper.points[i].x-=q.x;					<font class="theme">// Subtract q.x Units From helper.points[i].x (Move On X Axis)</font>
			helper.points[i].y-=q.y;					<font class="theme">// Subtract q.y Units From helper.points[i].y (Move On Y Axis)</font>
			helper.points[i].z-=q.z;					<font class="theme">// Subtract q.z Units From helper.points[i].z (Move On Z Axis)</font>
			tx=helper.points[i].x;						<font class="theme">// Make Temp X Variable Equal To Helper's X Variable</font>
			ty=helper.points[i].y;						<font class="theme">// Make Temp Y Variable Equal To Helper's Y Variable</font>
			tz=helper.points[i].z;						<font class="theme">// Make Temp Z Variable Equal To Helper's Z Variable</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now that we have the new position calculated it's time to draw our points.  We set the color to a bright bluish color, and
then draw the first point with glVertex3f(tx,ty,tz).  This draws a point at the newly calculated position.
<br><br>
We then darken the color a little, and move 2 steps in the direction we just calculated instead of one.  This moves the point
to the newly calculated position, and then moves it again in the same direction.  So if it was travelling left at 0.1 units,
the next dot would be at 0.2 units.  After calculating 2 positions ahead we draw the second point.
<br><br>
Finally we set the color to dark blue, and calculate even further ahead.  This time using our example we would move 0.4 units
to the left instead of 0.1 or 0.2.  The end result is a little tail of particles following as the dots move.  With blending,
this creates a pretty cool effect!
<br><br>
glEnd() tells OpenGL we are done drawing points.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>			glColor3f(0,1,1);						<font class="theme">// Set Color To A Bright Shade Of Off Blue</font>
			glVertex3f(tx,ty,tz);						<font class="theme">// Draw A Point At The Current Temp Values (Vertex)</font>
			glColor3f(0,0.5f,1);						<font class="theme">// Darken Color A Bit</font>
			tx-=2*q.x; ty-=2*q.y; ty-=2*q.y;				<font class="theme">// Calculate Two Positions Ahead</font>
			glVertex3f(tx,ty,tz);						<font class="theme">// Draw A Second Point At The Newly Calculate Position</font>
			glColor3f(0,0,1);						<font class="theme">// Set Color To A Very Dark Blue</font>
			tx-=2*q.x; ty-=2*q.y; ty-=2*q.y;				<font class="theme">// Calculate Two More Positions Ahead</font>
			glVertex3f(tx,ty,tz);						<font class="theme">// Draw A Third Point At The Second New Position</font>
		}									<font class="theme">// This Creates A Ghostly Tail As Points Move</font>
	glEnd();									<font class="theme">// Done Drawing Points</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The last thing we do is check to see if morph is TRUE and step is less than steps (200).  If step
is less than 200, we increase step by 1.
<br><br>
If morph is false or step is greater than or equal to steps (200), morph is set to FALSE,
the sour (source) object is set to equal the dest (destination) object, and step is set back to 0.
This tells the program that morphing is not happening or it has just finished.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>	<font class="theme">// If We're Morphing And We Haven't Gone Through All 200 Steps Increase Our Step Counter</font>
	<font class="theme">// Otherwise Set Morphing To False, Make Source=Destination And Set The Step Counter Back To Zero.</font>
	if(morph &amp;&amp; step&lt;=steps)step++; else { morph=FALSE; sour=dest; step=0;}
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The KillGLWindow() code hasn't changed much.  The only real difference is that we free all of the objects from memory
before we kill the windows.  This prevents memory leaks, and is good practice ;)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>GLvoid KillGLWindow(GLvoid)								<font class="theme">// Properly Kill The Window</font>
{
	objfree(&amp;morph1);								<font class="theme">// Jump To Code To Release morph1 Allocated Ram</font>
	objfree(&amp;morph2);								<font class="theme">// Jump To Code To Release morph2 Allocated Ram</font>
	objfree(&amp;morph3);								<font class="theme">// Jump To Code To Release morph3 Allocated Ram</font>
	objfree(&amp;morph4);								<font class="theme">// Jump To Code To Release morph4 Allocated Ram</font>
	objfree(&amp;helper);								<font class="theme">// Jump To Code To Release helper Allocated Ram</font>

	if (fullscreen)									<font class="theme">// Are We In Fullscreen Mode?</font>
	{
		ChangeDisplaySettings(NULL,0);						<font class="theme">// If So Switch Back To The Desktop</font>
		ShowCursor(TRUE);							<font class="theme">// Show Mouse Pointer</font>
	}

	if (hRC)									<font class="theme">// Do We Have A Rendering Context?</font>
	{
		if (!wglMakeCurrent(NULL,NULL))						<font class="theme">// Are We Able To Release The DC And RC Contexts?</font>
		{
			MessageBox(NULL,"Release Of DC And RC Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		}

		if (!wglDeleteContext(hRC))						<font class="theme">// Are We Able To Delete The RC?</font>
		{
			MessageBox(NULL,"Release Rendering Context Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		}
		hRC=NULL;								<font class="theme">// Set RC To NULL</font>
	}

	if (hDC &amp;&amp; !ReleaseDC(hWnd,hDC))						<font class="theme">// Are We Able To Release The DC</font>
	{
		MessageBox(NULL,"Release Device Context Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hDC=NULL;								<font class="theme">// Set DC To NULL</font>
	}

	if (hWnd &amp;&amp; !DestroyWindow(hWnd))						<font class="theme">// Are We Able To Destroy The Window?</font>
	{
		MessageBox(NULL,"Could Not Release hWnd.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hWnd=NULL;								<font class="theme">// Set hWnd To NULL</font>
	}

	if (!UnregisterClass("OpenGL",hInstance))					<font class="theme">// Are We Able To Unregister Class</font>
	{
		MessageBox(NULL,"Could Not Unregister Class.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hInstance=NULL;								<font class="theme">// Set hInstance To NULL</font>
	}
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The CreateGLWindow() and WndProc() code hasn't changed.  So I'll skip over it.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>BOOL CreateGLWindow()									<font class="theme">// Creates The GL Window</font>

LRESULT CALLBACK WndProc()								<font class="theme">// Handle For This Window</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
In WinMain() there are a few changes.  First thing to note is the new caption on the title bar :)
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>int WINAPI WinMain(	HINSTANCE	hInstance,					<font class="theme">// Instance</font>
			HINSTANCE	hPrevInstance,					<font class="theme">// Previous Instance</font>
			LPSTR		lpCmdLine,					<font class="theme">// Command Line Parameters</font>
			int		nCmdShow)					<font class="theme">// Window Show State</font>
{
	MSG	msg;									<font class="theme">// Windows Message Structure</font>
	BOOL	done=FALSE;								<font class="theme">// Bool Variable To Exit Loop</font>

	<font class="theme">// Ask The User Which Screen Mode They Prefer</font>
	if (MessageBox(NULL,"Would You Like To Run In Fullscreen Mode?", "Start FullScreen?",MB_YESNO|MB_ICONQUESTION)==IDNO)
	{
		fullscreen=FALSE;							<font class="theme">// Windowed Mode</font>
	}

	<font class="theme">// Create Our OpenGL Window</font>
	if (!CreateGLWindow("Piotr Cieslak &amp; NeHe's Morphing Points Tutorial",640,480,16,fullscreen))
	{
		return 0;								<font class="theme">// Quit If Window Was Not Created</font>
	}

	while(!done)									<font class="theme">// Loop That Runs While done=FALSE</font>
	{
		if (PeekMessage(&amp;msg,NULL,0,0,PM_REMOVE))				<font class="theme">// Is There A Message Waiting?</font>
		{
			if (msg.message==WM_QUIT)					<font class="theme">// Have We Received A Quit Message?</font>
			{
				done=TRUE;						<font class="theme">// If So done=TRUE</font>
			}
			else								<font class="theme">// If Not, Deal With Window Messages</font>
			{
				TranslateMessage(&amp;msg);					<font class="theme">// Translate The Message</font>
				DispatchMessage(&amp;msg);					<font class="theme">// Dispatch The Message</font>
			}
		}
		else									<font class="theme">// If There Are No Messages</font>
		{
			<font class="theme">// Draw The Scene.  Watch For ESC Key And Quit Messages From DrawGLScene()</font>
			if (active &amp;&amp; keys[VK_ESCAPE])					<font class="theme">// Active?  Was There A Quit Received?</font>
			{
				done=TRUE;						<font class="theme">// ESC or DrawGLScene Signaled A Quit</font>
			}
			else								<font class="theme">// Not Time To Quit, Update Screen</font>
			{
				DrawGLScene();						<font class="theme">// Draw The Scene (Don't Draw When Inactive 1% CPU Use)</font>
				SwapBuffers(hDC);					<font class="theme">// Swap Buffers (Double Buffering)</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The code below watches for key presses.  By now you should understand the code fairly easily.  If page up is pressed
we increase zspeed.  This causes the object to spin faster on the z axis in a positive direction.
<br><br>
If page down is pressed we decrease zspeed.  This causes the object to spin faster on the z axis in a negative
direction.
<br><br>
If the down arrow is pressed we increase xspeed.  This causes the object to spin faster on the x axis in a positive
direction.
<br><br>
If the up arrow is pressed we decrease xspeed.  This causes the object to spin faster on the x axis in a negative
direction.
<br><br>
If the right arrow is pressed we increase yspeed.  This causes the object to spin faster on the y axis in a positive
direction.
<br><br>
If the left arrow is pressed we decrease yspeed.  This causes the object to spin faster on the y axis in a negative
direction.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>				if(keys[VK_PRIOR])					<font class="theme">// Is Page Up Being Pressed?</font>
					zspeed+=0.01f;					<font class="theme">// Increase zspeed</font>

				if(keys[VK_NEXT])					<font class="theme">// Is Page Down Being Pressed?</font>
					zspeed-=0.01f;					<font class="theme">// Decrease zspeed</font>

				if(keys[VK_DOWN])					<font class="theme">// Is Down Arrow Being Pressed?</font>
					xspeed+=0.01f;					<font class="theme">// Increase xspeed</font>

				if(keys[VK_UP])						<font class="theme">// Is Up Arrow Being Pressed?</font>
					xspeed-=0.01f;					<font class="theme">// Decrease xspeed</font>

				if(keys[VK_RIGHT])					<font class="theme">// Is Right Arrow Being Pressed?</font>
					yspeed+=0.01f;					<font class="theme">// Increase yspeed</font>

				if(keys[VK_LEFT])					<font class="theme">// Is Left Arrow Being Pressed?</font>
					yspeed-=0.01f;					<font class="theme">// Decrease yspeed</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
The following keys physically move the object.  'Q' moves it into the screen, 'Z' moves it towards the viewer, 'W' moves
the object up, 'S' moves it down, 'D' moves it right, and 'A' moves it left.
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>				if (keys['Q'])						<font class="theme">// Is Q Key Being Pressed?</font>
				 cz-=0.01f;						<font class="theme">// Move Object Away From Viewer</font>

				if (keys['Z'])						<font class="theme">// Is Z Key Being Pressed?</font>
				 cz+=0.01f;						<font class="theme">// Move Object Towards Viewer</font>

				if (keys['W'])						<font class="theme">// Is W Key Being Pressed?</font>
				 cy+=0.01f;						<font class="theme">// Move Object Up</font>

				if (keys['S'])						<font class="theme">// Is S Key Being Pressed?</font>
				 cy-=0.01f;						<font class="theme">// Move Object Down</font>

				if (keys['D'])						<font class="theme">// Is D Key Being Pressed?</font>
				 cx+=0.01f;						<font class="theme">// Move Object Right</font>

				if (keys['A'])						<font class="theme">// Is A Key Being Pressed?</font>
				 cx-=0.01f;						<font class="theme">// Move Object Left</font>
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Now we watch to see if keys 1 through 4 are pressed.  If 1 is pressed and key is not equal to 1 (not the current
object already) and morph is false (not already in the process of morphing), we set key to 1, so that our
program knows we just selected object 1.  We then set morph to TRUE, letting our program know it's time to start
morphing, and last we set the destination object (dest) to equal object 1 (morph1).
<br><br>
Pressing keys 2, 3, and 4 does the same thing.  If 2 is pressed we set dest to morph2, and we set key
to equal 2.  Pressing 3, sets dest to morph3 and key to 3.
<br><br>
By setting key to the value of the key we just pressed on the keyboard, we prevent the user from trying to morph
from a sphere to a sphere or a cone to a cone!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>				if (keys['1'] &amp;&amp; (key!=1) &amp;&amp; !morph)			<font class="theme">// Is 1 Pressed, key Not Equal To 1 And Morph False?</font>
				{
					key=1;						<font class="theme">// Sets key To 1 (To Prevent Pressing 1 2x In A Row)</font>
					morph=TRUE;					<font class="theme">// Set morph To True (Starts Morphing Process)</font>
					dest=&amp;morph1;					<font class="theme">// Destination Object To Morph To Becomes morph1</font>
				}
				if (keys['2'] &amp;&amp; (key!=2) &amp;&amp; !morph)			<font class="theme">// Is 2 Pressed, key Not Equal To 2 And Morph False?</font>
				{
					key=2;						<font class="theme">// Sets key To 2 (To Prevent Pressing 2 2x In A Row)</font>
					morph=TRUE;					<font class="theme">// Set morph To True (Starts Morphing Process)</font>
					dest=&amp;morph2;					<font class="theme">// Destination Object To Morph To Becomes morph2</font>
				}
				if (keys['3'] &amp;&amp; (key!=3) &amp;&amp; !morph)			<font class="theme">// Is 3 Pressed, key Not Equal To 3 And Morph False?</font>
				{
					key=3;						<font class="theme">// Sets key To 3 (To Prevent Pressing 3 2x In A Row)</font>
					morph=TRUE;					<font class="theme">// Set morph To True (Starts Morphing Process)</font>
					dest=&amp;morph3;					<font class="theme">// Destination Object To Morph To Becomes morph3</font>
				}
				if (keys['4'] &amp;&amp; (key!=4) &amp;&amp; !morph)			<font class="theme">// Is 4 Pressed, key Not Equal To 4 And Morph False?</font>
				{
					key=4;						<font class="theme">// Sets key To 4 (To Prevent Pressing 4 2x In A Row)</font>
					morph=TRUE;					<font class="theme">// Set morph To True (Starts Morphing Process)</font>
					dest=&amp;morph4;					<font class="theme">// Destination Object To Morph To Becomes morph4</font>
				}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
Finally we watch to see if F1 is pressed if it is we toggle from Fullscreen to Windowed mode or Windowed mode to
Fullscreen mode!
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><pre>				if (keys[VK_F1])					<font class="theme">// Is F1 Being Pressed?</font>
				{
					keys[VK_F1]=FALSE;				<font class="theme">// If So Make Key FALSE</font>
					KillGLWindow();					<font class="theme">// Kill Our Current Window</font>
					fullscreen=!fullscreen;				<font class="theme">// Toggle Fullscreen / Windowed Mode</font>
					<font class="theme">// Recreate Our OpenGL Window</font>
					if (!CreateGLWindow("Piotr Cieslak &amp; NeHe's Morphing Points Tutorial",640,480,16,fullscreen))
					{
						return 0;				<font class="theme">// Quit If Window Was Not Created</font>
					}
				}
			}
		}
	}

	<font class="theme">// Shutdown</font>
	KillGLWindow();									<font class="theme">// Kill The Window</font>
	return (msg.wParam);								<font class="theme">// Exit The Program</font>
}
</pre><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="tl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="tc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="100%"></td><td class="tr"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="l"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="back3" valign="top" width="100%"><font class="text">
I hope you have enjoyed this tutorial.  Although it's not an incredibly complex tutorial, you can learn alot from the code!
The animation in my dolphin demo is done in a similar way to the morphing in this demo.  By playing around with the code
you can come up with some really cool effects.  Dots turning into words.  Faked animation, and more!  You may even want to
try using solid polygons or lines instead of dots.  The effect can be quite impressive!
<br><br>
Piotr's code is new and refreshing. I hope that after reading through this tutorial you have a better understanding on how
to store and load object data from a file, and how to manipulate the data to create cool GL effects in your own programs!
The .html for this tutorial took 3 days to write.  If you notice any mistakes please let me know.  Alot of it was written
late at night, meaning a few mistakes may have crept in.  I want these tutorials to be the best they can be.  Feedback
is appreciated!
<br><br>
RabidHaMsTeR released a demo called "Morph" before this tutorial was written that shows off a more advanced version
of this effect.  You can check it out yourself at <a href="http://homepage.ntlworld.com/fj.williams/PgSoftware.html">
http://homepage.ntlworld.com/fj.williams/PgSoftware.html</a>.
<br><br>
<b>Piotr Cieslak</b>
<br><br>
<b>Jeff Molofee</b> (<b>NeHe</b>)
<br><br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/vc/lesson25.zip">Visual C++</a> Code For This Lesson.
<br><br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/bcb6/lesson25_bcb6.zip">Borland C++ Builder 6</a> Code For This Lesson. ( Conversion by <a href="mailto:christian@tugzip.com">Christian Kindahl</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/cwarrior/lesson25.zip">Code Warrior 5.3</a> Code For This Lesson. ( Conversion by <a href="mailto:DelusionalBeing@hotmail.com">Scott Lupton</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/delphi/lesson25.zip">Delphi</a> Code For This Lesson. ( Conversion by <a href="mailto:michal_praha@seznam.cz">Michal Tucek</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/devc/lesson25.zip">Dev C++</a> Code For This Lesson. ( Conversion by <a href="mailto:danprogram@hotmail.com">Dan</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/euphoria/lesson25.zip">Euphoria</a> Code For This Lesson. ( Conversion by <a href="mailto:1evan@sbcglobal.net">Evan Marshall</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/lccwin32/lccwin32_lesson25.zip">LCC Win32</a> Code For This Lesson. ( Conversion by <a href="mailto:rwishlaw@shaw.ca">Robert Wishlaw</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/linux/lesson25.tar.gz">Linux</a> Code For This Lesson. ( Conversion by <a href="mailto:jay@remotepoint.com">Jay Groven</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/linuxglx/lesson25.tar.gz">Linux/GLX</a> Code For This Lesson. ( Conversion by <a href="mailto:Schubert_P@Yahoo.de">Patrick Schubert</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/linuxsdl/lesson25.tar.gz">Linux/SDL</a> Code For This Lesson. ( Conversion by <a href="mailto:scarab@egyptian.net">DarkAlloy</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/lwjgl/lesson25.jar">LWJGL</a> Code For This Lesson. ( Conversion by <a href="mailto:mark.bernard@rogers.com">Mark Bernard</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/macosxcocoa/lesson25.zip">Mac OS X/Cocoa</a> Code For This Lesson. ( Conversion by <a href="mailto:blb@pobox.com">Bryan Blackburn</a> )<br>
* DOWNLOAD <a href="http://nehe.gamedev.net/data/lessons/vs_net/lesson25.zip">Visual Studio .NET</a> Code For This Lesson. ( Conversion by <a href="mailto:ultimatezeus@hotmail.com">Grant James</a> )<br>
<br><br>
<br><br>
<table border="0" width="100%">
<tbody><tr><td align="left" width="50%"><b><font size="-1"><a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=24">&lt; Lesson 24</a></font></b></td>
<td align="right" width="50%"><b><font size="-1"><a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=26">Lesson 26 &gt;</a></font></b></td>
</tr></tbody></table>
</font></td><td class="r"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td class="bl"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="bc" width="100%"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td><td class="br"><img src="lesson.asp-Dateien/blank.gif" alt="" height="28" width="28"></td></tr></tbody></table>

</body></html>